!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	include/input/GamePad.hpp	/^			A,$/;"	e	enum:GamePad::Key
ANIMATEDMAP_HPP_	include/display/AnimatedMap.hpp	19;"	d
ANIMATEDTILE_HPP_	include/display/AnimatedTile.hpp	19;"	d
APPLICATIONSTATESTACK_HPP_	include/core/ApplicationStateStack.hpp	19;"	d
APPLICATIONSTATE_HPP_	include/states/ApplicationState.hpp	19;"	d
APPLICATION_HPP_	include/core/Application.hpp	19;"	d
ATTRIBUTE_NAME	external/tinyxml2.hpp	/^        ATTRIBUTE_NAME		            	= 0,$/;"	e	enum:tinyxml2::StrPair::__anon1
ATTRIBUTE_VALUE	external/tinyxml2.hpp	/^        ATTRIBUTE_VALUE		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
ATTRIBUTE_VALUE_LEAVE_ENTITIES	external/tinyxml2.hpp	/^        ATTRIBUTE_VALUE_LEAVE_ENTITIES  	= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
Accept	external/tinyxml2.cpp	/^bool XMLComment::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLComment	signature:( XMLVisitor* visitor ) const
Accept	external/tinyxml2.cpp	/^bool XMLDeclaration::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLVisitor* visitor ) const
Accept	external/tinyxml2.cpp	/^bool XMLDocument::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLVisitor* visitor ) const
Accept	external/tinyxml2.cpp	/^bool XMLElement::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLElement	signature:( XMLVisitor* visitor ) const
Accept	external/tinyxml2.cpp	/^bool XMLText::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLText	signature:( XMLVisitor* visitor ) const
Accept	external/tinyxml2.cpp	/^bool XMLUnknown::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLVisitor* visitor ) const
Accept	external/tinyxml2.hpp	/^    virtual bool Accept( XMLVisitor* visitor ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLVisitor* visitor ) const
Accept	external/tinyxml2.hpp	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( XMLVisitor* visitor ) const
Accept	external/tinyxml2.hpp	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLVisitor* visitor ) const
Accept	external/tinyxml2.hpp	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLVisitor* visitor ) const
Accept	external/tinyxml2.hpp	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( XMLVisitor* visitor ) const
Accept	external/tinyxml2.hpp	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( XMLVisitor* visitor ) const
Accept	external/tinyxml2.hpp	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLVisitor* visitor ) const
Alloc	external/tinyxml2.hpp	/^    virtual void* Alloc() = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:()
Alloc	external/tinyxml2.hpp	/^    virtual void* Alloc() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
AnimatedMap	include/display/AnimatedMap.hpp	/^		AnimatedMap();$/;"	p	class:AnimatedMap	access:public	signature:()
AnimatedMap	include/display/AnimatedMap.hpp	/^		AnimatedMap(std::string filename, std::string textureName);$/;"	p	class:AnimatedMap	access:public	signature:(std::string filename, std::string textureName)
AnimatedMap	include/display/AnimatedMap.hpp	/^class AnimatedMap : public TileMap {$/;"	c	inherits:TileMap
AnimatedMap	source/display/AnimatedMap.cpp	/^AnimatedMap::AnimatedMap() {$/;"	f	class:AnimatedMap	signature:()
AnimatedMap	source/display/AnimatedMap.cpp	/^AnimatedMap::AnimatedMap(std::string filename, std::string textureName) : TileMap(filename, textureName) {$/;"	f	class:AnimatedMap	signature:(std::string filename, std::string textureName)
AnimatedMap::AnimatedMap	include/display/AnimatedMap.hpp	/^		AnimatedMap();$/;"	p	class:AnimatedMap	access:public	signature:()
AnimatedMap::AnimatedMap	include/display/AnimatedMap.hpp	/^		AnimatedMap(std::string filename, std::string textureName);$/;"	p	class:AnimatedMap	access:public	signature:(std::string filename, std::string textureName)
AnimatedMap::AnimatedMap	source/display/AnimatedMap.cpp	/^AnimatedMap::AnimatedMap() {$/;"	f	class:AnimatedMap	signature:()
AnimatedMap::AnimatedMap	source/display/AnimatedMap.cpp	/^AnimatedMap::AnimatedMap(std::string filename, std::string textureName) : TileMap(filename, textureName) {$/;"	f	class:AnimatedMap	signature:(std::string filename, std::string textureName)
AnimatedMap::m_animatedTiles	include/display/AnimatedMap.hpp	/^		std::vector<AnimatedTile> m_animatedTiles;$/;"	m	class:AnimatedMap	access:private
AnimatedMap::override	include/display/AnimatedMap.hpp	/^		virtual void updateTile(u16 tileX, u16 tileY) override;$/;"	m	class:AnimatedMap	access:public
AnimatedMap::update	include/display/AnimatedMap.hpp	/^		void update();$/;"	p	class:AnimatedMap	access:public	signature:()
AnimatedMap::update	source/display/AnimatedMap.cpp	/^void AnimatedMap::update() {$/;"	f	class:AnimatedMap	signature:()
AnimatedMap::updateTile	source/display/AnimatedMap.cpp	/^void AnimatedMap::updateTile(u16 tileX, u16 tileY) {$/;"	f	class:AnimatedMap	signature:(u16 tileX, u16 tileY)
AnimatedMap::~AnimatedMap	include/display/AnimatedMap.hpp	/^		~AnimatedMap();$/;"	p	class:AnimatedMap	access:public	signature:()
AnimatedMap::~AnimatedMap	source/display/AnimatedMap.cpp	/^AnimatedMap::~AnimatedMap() {$/;"	f	class:AnimatedMap	signature:()
AnimatedTile	include/display/AnimatedTile.hpp	/^	AnimatedTile(u16 _tileX, u16 _tileY, u16 _nextFrame, TileAnimation &_anim) :$/;"	f	struct:AnimatedTile	access:public	signature:(u16 _tileX, u16 _tileY, u16 _nextFrame, TileAnimation &_anim)
AnimatedTile	include/display/AnimatedTile.hpp	/^struct AnimatedTile {$/;"	s
AnimatedTile::AnimatedTile	include/display/AnimatedTile.hpp	/^	AnimatedTile(u16 _tileX, u16 _tileY, u16 _nextFrame, TileAnimation &_anim) :$/;"	f	struct:AnimatedTile	access:public	signature:(u16 _tileX, u16 _tileY, u16 _nextFrame, TileAnimation &_anim)
AnimatedTile::anim	include/display/AnimatedTile.hpp	/^	TileAnimation &anim;$/;"	m	struct:AnimatedTile	access:public
AnimatedTile::nextFrame	include/display/AnimatedTile.hpp	/^	u16 nextFrame;$/;"	m	struct:AnimatedTile	access:public
AnimatedTile::tileX	include/display/AnimatedTile.hpp	/^	u16 tileX;$/;"	m	struct:AnimatedTile	access:public
AnimatedTile::tileY	include/display/AnimatedTile.hpp	/^	u16 tileY;$/;"	m	struct:AnimatedTile	access:public
AnimatedTile::timer	include/display/AnimatedTile.hpp	/^	Timer timer;$/;"	m	struct:AnimatedTile	access:public
Application	include/core/Application.hpp	/^		Application();$/;"	p	class:Application	access:public	signature:()
Application	include/core/Application.hpp	/^class Application {$/;"	c
Application	source/core/Application.cpp	/^Application::Application() {$/;"	f	class:Application	signature:()
Application::Application	include/core/Application.hpp	/^		Application();$/;"	p	class:Application	access:public	signature:()
Application::Application	source/core/Application.cpp	/^Application::Application() {$/;"	f	class:Application	signature:()
Application::getInstance	include/core/Application.hpp	/^		static Application &getInstance() {$/;"	f	class:Application	access:public	signature:()
Application::handleEvents	include/core/Application.hpp	/^		void handleEvents();$/;"	p	class:Application	access:public	signature:()
Application::handleEvents	source/core/Application.cpp	/^void Application::handleEvents() {$/;"	f	class:Application	signature:()
Application::m_applicationStateStack	include/core/Application.hpp	/^		ApplicationStateStack *m_applicationStateStack;$/;"	m	class:Application	access:private
Application::m_clock	include/core/Application.hpp	/^		GameClock m_clock;$/;"	m	class:Application	access:private
Application::m_defaultView	include/core/Application.hpp	/^		sf::View m_defaultView;$/;"	m	class:Application	access:private
Application::m_window	include/core/Application.hpp	/^		sf::RenderWindow m_window;$/;"	m	class:Application	access:private
Application::resetView	include/core/Application.hpp	/^		void resetView() { m_window.setView(m_defaultView); }$/;"	f	class:Application	access:public	signature:()
Application::run	include/core/Application.hpp	/^		void run();$/;"	p	class:Application	access:public	signature:()
Application::run	source/core/Application.cpp	/^void Application::run() {$/;"	f	class:Application	signature:()
Application::window	include/core/Application.hpp	/^		sf::RenderWindow &window() { return m_window; }$/;"	f	class:Application	access:public	signature:()
Application::~Application	include/core/Application.hpp	/^		~Application();$/;"	p	class:Application	access:public	signature:()
Application::~Application	source/core/Application.cpp	/^Application::~Application() {$/;"	f	class:Application	signature:()
ApplicationState	include/states/ApplicationState.hpp	/^		ApplicationState();$/;"	p	class:ApplicationState	access:public	signature:()
ApplicationState	include/states/ApplicationState.hpp	/^class ApplicationState {$/;"	c
ApplicationState	source/states/ApplicationState.cpp	/^ApplicationState::ApplicationState() {$/;"	f	class:ApplicationState	signature:()
ApplicationState::ApplicationState	include/states/ApplicationState.hpp	/^		ApplicationState();$/;"	p	class:ApplicationState	access:public	signature:()
ApplicationState::ApplicationState	source/states/ApplicationState.cpp	/^ApplicationState::ApplicationState() {$/;"	f	class:ApplicationState	signature:()
ApplicationState::draw	include/states/ApplicationState.hpp	/^		virtual void draw() = 0;$/;"	p	class:ApplicationState	access:public	signature:()
ApplicationState::getApplicationStateStack	include/states/ApplicationState.hpp	/^		ApplicationStateStack &getApplicationStateStack();$/;"	p	class:ApplicationState	access:public	signature:()
ApplicationState::getApplicationStateStack	source/states/ApplicationState.cpp	/^ApplicationStateStack &ApplicationState::getApplicationStateStack() {$/;"	f	class:ApplicationState	signature:()
ApplicationState::update	include/states/ApplicationState.hpp	/^		virtual void update() = 0;$/;"	p	class:ApplicationState	access:public	signature:()
ApplicationState::~ApplicationState	include/states/ApplicationState.hpp	/^		virtual ~ApplicationState();$/;"	p	class:ApplicationState	access:public	signature:()
ApplicationState::~ApplicationState	source/states/ApplicationState.cpp	/^ApplicationState::~ApplicationState() {$/;"	f	class:ApplicationState	signature:()
ApplicationStateStack	include/core/ApplicationStateStack.hpp	/^		ApplicationStateStack();$/;"	p	class:ApplicationStateStack	access:public	signature:()
ApplicationStateStack	include/core/ApplicationStateStack.hpp	/^class ApplicationStateStack {$/;"	c
ApplicationStateStack	source/core/ApplicationStateStack.cpp	/^ApplicationStateStack::ApplicationStateStack() {$/;"	f	class:ApplicationStateStack	signature:()
ApplicationStateStack::ApplicationStateStack	include/core/ApplicationStateStack.hpp	/^		ApplicationStateStack();$/;"	p	class:ApplicationStateStack	access:public	signature:()
ApplicationStateStack::ApplicationStateStack	source/core/ApplicationStateStack.cpp	/^ApplicationStateStack::ApplicationStateStack() {$/;"	f	class:ApplicationStateStack	signature:()
ApplicationStateStack::getInstance	include/core/ApplicationStateStack.hpp	/^		static ApplicationStateStack &getInstance();$/;"	p	class:ApplicationStateStack	access:public	signature:()
ApplicationStateStack::getInstance	source/core/ApplicationStateStack.cpp	/^ApplicationStateStack &ApplicationStateStack::getInstance() {$/;"	f	class:ApplicationStateStack	signature:()
ApplicationStateStack::m_stack	include/core/ApplicationStateStack.hpp	/^		std::stack<std::unique_ptr<ApplicationState>> m_stack;$/;"	m	class:ApplicationStateStack	access:private
ApplicationStateStack::pop	include/core/ApplicationStateStack.hpp	/^		void pop() { m_stack.pop(); }$/;"	f	class:ApplicationStateStack	access:public	signature:()
ApplicationStateStack::push	include/core/ApplicationStateStack.hpp	/^		void push(ApplicationState *state) { m_stack.push(std::unique_ptr<ApplicationState>(state)); }$/;"	f	class:ApplicationStateStack	access:public	signature:(ApplicationState *state)
ApplicationStateStack::top	include/core/ApplicationStateStack.hpp	/^		ApplicationState &top() { return *m_stack.top().get(); } $/;"	f	class:ApplicationStateStack	access:public	signature:()
ApplicationStateStack::~ApplicationStateStack	include/core/ApplicationStateStack.hpp	/^		~ApplicationStateStack();$/;"	p	class:ApplicationStateStack	access:public	signature:()
ApplicationStateStack::~ApplicationStateStack	source/core/ApplicationStateStack.cpp	/^ApplicationStateStack::~ApplicationStateStack() {$/;"	f	class:ApplicationStateStack	signature:()
Attribute	external/tinyxml2.cpp	/^const char* XMLElement::Attribute( const char* name, const char* value ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name, const char* value ) const
Attribute	external/tinyxml2.hpp	/^    const char* Attribute( const char* name, const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value=0 ) const
B	include/input/GamePad.hpp	/^			B,$/;"	e	enum:GamePad::Key
BUF_SIZE	external/tinyxml2.hpp	/^        BUF_SIZE = 200$/;"	e	enum:tinyxml2::XMLPrinter::__anon7
BUF_SIZE	external/tinyxml2.hpp	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLAttribute::__anon4
BUF_SIZE	external/tinyxml2.hpp	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLElement::__anon6
BUILD	Makefile	/^BUILD		:=	build$/;"	m
Block	external/tinyxml2.hpp	/^    struct Block {$/;"	s	class:tinyxml2::MemPoolT	access:private
Blue	include/core/Debug.hpp	/^		Blue = 36$/;"	e	enum:Debug::TextColor
BoolAttribute	external/tinyxml2.hpp	/^    bool	 BoolAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
BoolValue	external/tinyxml2.hpp	/^    bool	 BoolValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
Button	include/data/TilesData.hpp	/^		Button			= 15,$/;"	e	enum:TilesData::TileType
CARRIAGE_RETURN	external/tinyxml2.cpp	/^static const char CARRIAGE_RETURN		= (char)0x0d;			\/\/ CR gets filtered out$/;"	v	file:
CC	Makefile	/^CC		:=	gcc$/;"	m
CData	external/tinyxml2.hpp	/^    bool CData() const						{$/;"	f	class:tinyxml2::XMLText	access:public	signature:() const
CFILES	Makefile	/^export CFILES	:=	$(sort $(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)\/*.c))))$/;"	m
CFLAGS	Makefile	/^CFLAGS	:=	-g -Wall$/;"	m
CLOSED	external/tinyxml2.hpp	/^        CLOSED,		\/\/ <foo\/>$/;"	e	enum:tinyxml2::XMLElement::__anon5
CLOSING	external/tinyxml2.hpp	/^        CLOSING		\/\/ <\/foo>$/;"	e	enum:tinyxml2::XMLElement::__anon5
COLLAPSE_WHITESPACE	external/tinyxml2.hpp	/^        COLLAPSE_WHITESPACE	                = 0x04,$/;"	e	enum:tinyxml2::StrPair::__anon1
COLLAPSE_WHITESPACE	external/tinyxml2.hpp	/^    COLLAPSE_WHITESPACE$/;"	e	enum:tinyxml2::Whitespace
COMMENT	external/tinyxml2.hpp	/^        COMMENT				        = NEEDS_NEWLINE_NORMALIZATION$/;"	e	enum:tinyxml2::StrPair::__anon1
COUNT	external/tinyxml2.hpp	/^    enum { COUNT = (4*1024)\/SIZE }; \/\/ Some compilers do not accept to use COUNT in private part if COUNT is private$/;"	e	enum:tinyxml2::MemPoolT::__anon3
CPPFILES	Makefile	/^export CPPFILES	:=	$(sort $(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)\/*.cpp))))$/;"	m
CR	external/tinyxml2.cpp	/^static const char CR = CARRIAGE_RETURN;$/;"	v	file:
CStr	external/tinyxml2.hpp	/^    const char* CStr() const {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:() const
CStrSize	external/tinyxml2.hpp	/^    int CStrSize() const {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:() const
CXX	Makefile	/^CXX		:=	g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS:=	$(CFLAGS) -std=c++11 -MD$/;"	m
Capacity	external/tinyxml2.hpp	/^    int Capacity() const				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
ChangeMap	include/data/TilesData.hpp	/^		ChangeMap		= 2$/;"	e	enum:TilesData::SubTileType
Chunk	external/tinyxml2.hpp	/^    union Chunk {$/;"	u	class:tinyxml2::MemPoolT	access:private
Clear	external/tinyxml2.cpp	/^void XMLDocument::Clear()$/;"	f	class:tinyxml2::XMLDocument	signature:()
Clear	external/tinyxml2.hpp	/^    void Clear() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
Clear	external/tinyxml2.hpp	/^    void Clear();$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:()
ClearBuffer	external/tinyxml2.hpp	/^    void ClearBuffer() {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:()
CloseElement	external/tinyxml2.cpp	/^void XMLPrinter::CloseElement( bool compactMode )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool compactMode )
CloseElement	external/tinyxml2.hpp	/^    virtual void CloseElement( bool compactMode );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool compactMode )
ClosedChest	include/data/TilesData.hpp	/^		ClosedChest		= 16,$/;"	e	enum:TilesData::TileType
ClosingType	external/tinyxml2.hpp	/^    int ClosingType() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
CollapseWhitespace	external/tinyxml2.cpp	/^void StrPair::CollapseWhitespace()$/;"	f	class:tinyxml2::StrPair	signature:()
CollapseWhitespace	external/tinyxml2.hpp	/^    void CollapseWhitespace();$/;"	p	class:tinyxml2::StrPair	access:private	signature:()
CompactMode	external/tinyxml2.hpp	/^	virtual bool CompactMode( const XMLElement& )	{ return _compactMode; };$/;"	f	class:tinyxml2::XMLPrinter	access:protected	signature:( const XMLElement& )
ConvertUTF32ToUTF8	external/tinyxml2.cpp	/^void XMLUtil::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:tinyxml2::XMLUtil	signature:( unsigned long input, char* output, int* length )
ConvertUTF32ToUTF8	external/tinyxml2.hpp	/^    static void ConvertUTF32ToUTF8( unsigned long input, char* output, int* length );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned long input, char* output, int* length )
CurrentAllocs	external/tinyxml2.hpp	/^    int CurrentAllocs() const		{$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
DEBUG	external/tinyxml2.hpp	57;"	d
DEBUG	include/core/Debug.hpp	34;"	d
DEBUG	include/core/Debug.hpp	36;"	d
DEBUG_COLOR	include/core/Debug.hpp	29;"	d
DEBUG_ENABLED	include/core/Debug.hpp	28;"	d
DEBUG_HPP_	include/core/Debug.hpp	19;"	d
DELETE_ATTRIBUTE	external/tinyxml2.cpp	59;"	d	file:
DELETE_NODE	external/tinyxml2.cpp	52;"	d	file:
DOUBLE_QUOTE	external/tinyxml2.cpp	/^static const char DOUBLE_QUOTE			= '\\"';$/;"	v	file:
Debug	include/core/Debug.hpp	/^namespace Debug {$/;"	n
Debug::Blue	include/core/Debug.hpp	/^		Blue = 36$/;"	e	enum:Debug::TextColor
Debug::Red	include/core/Debug.hpp	/^		Red = 31,$/;"	e	enum:Debug::TextColor
Debug::TextColor	include/core/Debug.hpp	/^	enum TextColor {$/;"	g	namespace:Debug
Debug::White	include/core/Debug.hpp	/^		White = 0,$/;"	e	enum:Debug::TextColor
Debug::makeString	include/core/Debug.hpp	/^	std::string makeString(std::stringstream &stream, T value) {$/;"	f	namespace:Debug	signature:(std::stringstream &stream, T value)
Debug::makeString	include/core/Debug.hpp	/^	std::string makeString(std::stringstream &stream, T value, Args... args) {$/;"	f	namespace:Debug	signature:(std::stringstream &stream, T value, Args... args)
Debug::print	include/core/Debug.hpp	/^	void print(Args... args) {$/;"	f	namespace:Debug	signature:(Args.... args)
Debug::textColor	include/core/Debug.hpp	/^	inline std::string textColor(u8 color = TextColor::White, bool bold = false) {$/;"	f	namespace:Debug	signature:(u8 color = TextColor::White, bool bold = false)
DeleteAttribute	external/tinyxml2.cpp	/^void XMLElement::DeleteAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
DeleteAttribute	external/tinyxml2.hpp	/^    void DeleteAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name )
DeleteChild	external/tinyxml2.cpp	/^void XMLNode::DeleteChild( XMLNode* node )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* node )
DeleteChild	external/tinyxml2.hpp	/^    void DeleteChild( XMLNode* node );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* node )
DeleteChildren	external/tinyxml2.cpp	/^void XMLNode::DeleteChildren()$/;"	f	class:tinyxml2::XMLNode	signature:()
DeleteChildren	external/tinyxml2.hpp	/^    void DeleteChildren();$/;"	p	class:tinyxml2::XMLNode	access:public	signature:()
DeleteNode	external/tinyxml2.hpp	/^    void DeleteNode( XMLNode* node )	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( XMLNode* node )
Direction	include/mapObjects/Movable.hpp	/^		enum Direction {$/;"	g	class:Movable	access:public
DoubleAttribute	external/tinyxml2.hpp	/^    double 	 DoubleAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
DoubleValue	external/tinyxml2.hpp	/^    double 	 DoubleValue() const			{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
Down	include/input/GamePad.hpp	/^			Down,$/;"	e	enum:GamePad::Key
Down	include/mapObjects/Movable.hpp	/^			Down,$/;"	e	enum:Movable::Direction
DynArray	external/tinyxml2.hpp	/^    DynArray< T, INIT >() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
DynArray	external/tinyxml2.hpp	/^class DynArray$/;"	c	namespace:tinyxml2
ENTITY_RANGE	external/tinyxml2.hpp	/^        ENTITY_RANGE = 64,$/;"	e	enum:tinyxml2::XMLPrinter::__anon7
EXCEPTION	include/system/Exception.hpp	27;"	d
EXCEPTION_HPP_	include/system/Exception.hpp	19;"	d
Empty	external/tinyxml2.hpp	/^    bool Empty() const					{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
Empty	external/tinyxml2.hpp	/^    bool Empty() const {$/;"	f	class:tinyxml2::StrPair	access:public	signature:() const
EnsureCapacity	external/tinyxml2.hpp	/^    void EnsureCapacity( int cap ) {$/;"	f	class:tinyxml2::DynArray	access:private	signature:( int cap )
Entity	external/tinyxml2.cpp	/^struct Entity {$/;"	s	namespace:tinyxml2	file:
Error	external/tinyxml2.hpp	/^    bool Error() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
ErrorID	external/tinyxml2.hpp	/^    XMLError  ErrorID() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
Exception	include/system/Exception.hpp	/^		Exception(u16 line, std::string filename, Args... args) throw() {$/;"	f	class:Exception	access:public	signature:(u16 line, std::string filename, Args... args)
Exception	include/system/Exception.hpp	/^class Exception : public std::exception {$/;"	c	inherits:std::exception
Exception::Exception	include/system/Exception.hpp	/^		Exception(u16 line, std::string filename, Args... args) throw() {$/;"	f	class:Exception	access:public	signature:(u16 line, std::string filename, Args... args)
Exception::m_errorMsg	include/system/Exception.hpp	/^		std::string m_errorMsg;$/;"	m	class:Exception	access:private
Exception::m_filename	include/system/Exception.hpp	/^		std::string m_filename;$/;"	m	class:Exception	access:private
Exception::m_line	include/system/Exception.hpp	/^		u16 m_line;$/;"	m	class:Exception	access:private
Exception::what	include/system/Exception.hpp	/^		virtual const char *what() const throw() {$/;"	f	class:Exception	access:public	signature:() const
Exception::~Exception	include/system/Exception.hpp	/^		~Exception() throw() {$/;"	f	class:Exception	access:public	signature:()
FindAttribute	external/tinyxml2.cpp	/^XMLAttribute* XMLElement::FindAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
FindAttribute	external/tinyxml2.cpp	/^const XMLAttribute* XMLElement::FindAttribute( const char* name ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name ) const
FindAttribute	external/tinyxml2.hpp	/^    XMLAttribute* FindAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
FindAttribute	external/tinyxml2.hpp	/^    const XMLAttribute* FindAttribute( const char* name ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
FindOrCreateAttribute	external/tinyxml2.cpp	/^XMLAttribute* XMLElement::FindOrCreateAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
FindOrCreateAttribute	external/tinyxml2.hpp	/^    XMLAttribute* FindOrCreateAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
FirstAttribute	external/tinyxml2.hpp	/^    const XMLAttribute* FirstAttribute() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
FirstChild	external/tinyxml2.hpp	/^    XMLHandle FirstChild() 													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
FirstChild	external/tinyxml2.hpp	/^    XMLNode*		FirstChild()			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
FirstChild	external/tinyxml2.hpp	/^    const XMLConstHandle FirstChild() const											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
FirstChild	external/tinyxml2.hpp	/^    const XMLNode*  FirstChild() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
FirstChildElement	external/tinyxml2.cpp	/^const XMLElement* XMLNode::FirstChildElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
FirstChildElement	external/tinyxml2.hpp	/^    XMLElement* FirstChildElement( const char* value=0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
FirstChildElement	external/tinyxml2.hpp	/^    XMLHandle FirstChildElement( const char* value=0 )						{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* value=0 )
FirstChildElement	external/tinyxml2.hpp	/^    const XMLConstHandle FirstChildElement( const char* value=0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* value=0 ) const
FirstChildElement	external/tinyxml2.hpp	/^    const XMLElement* FirstChildElement( const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
FirstChildElement	include/core/XMLFile.hpp	/^		XMLHandle FirstChildElement(const char *element) { return m_doc->FirstChildElement(element); }$/;"	f	class:XMLFile	access:public	signature:(const char *element)
FloatAttribute	external/tinyxml2.hpp	/^    float	 FloatAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
FloatValue	external/tinyxml2.hpp	/^    float	 FloatValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
Free	external/tinyxml2.hpp	/^    virtual void Free( void* ) = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:( void* )
Free	external/tinyxml2.hpp	/^    virtual void Free( void* mem ) {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:( void* mem )
GAMECLOCK_HPP_	include/system/GameClock.hpp	19;"	d
GAMEPAD_HPP_	include/input/GamePad.hpp	19;"	d
GAMESTATE_HPP_	include/core/GameState.hpp	19;"	d
GameClock	include/system/GameClock.hpp	/^		GameClock();$/;"	p	class:GameClock	access:public	signature:()
GameClock	include/system/GameClock.hpp	/^class GameClock {$/;"	c
GameClock	source/system/GameClock.cpp	/^GameClock::GameClock() {$/;"	f	class:GameClock	signature:()
GameClock::GameClock	include/system/GameClock.hpp	/^		GameClock();$/;"	p	class:GameClock	access:public	signature:()
GameClock::GameClock	source/system/GameClock.cpp	/^GameClock::GameClock() {$/;"	f	class:GameClock	signature:()
GameClock::clock	include/system/GameClock.hpp	/^		static sf::Clock clock;$/;"	m	class:GameClock	access:private
GameClock::clock	source/system/GameClock.cpp	/^sf::Clock GameClock::clock;$/;"	m	class:GameClock	file:
GameClock::drawGame	include/system/GameClock.hpp	/^		void drawGame(std::function<void(void)> drawFunc);$/;"	p	class:GameClock	access:public	signature:(std::function<void(void)> drawFunc)
GameClock::drawGame	source/system/GameClock.cpp	/^void GameClock::drawGame(std::function<void(void)> drawFunc) {$/;"	f	class:GameClock	signature:(std::function<void(void)> drawFunc)
GameClock::getTicks	include/system/GameClock.hpp	/^		static u32 getTicks(bool realTime = false);$/;"	p	class:GameClock	access:public	signature:(bool realTime = false)
GameClock::getTicks	source/system/GameClock.cpp	/^u32 GameClock::getTicks(bool realTime) {$/;"	f	class:GameClock	signature:(bool realTime)
GameClock::m_lag	include/system/GameClock.hpp	/^		u32 m_lag;$/;"	m	class:GameClock	access:private
GameClock::m_lastFrameDate	include/system/GameClock.hpp	/^		u32 m_lastFrameDate;$/;"	m	class:GameClock	access:private
GameClock::m_lastFrameDuration	include/system/GameClock.hpp	/^		u32 m_lastFrameDuration;$/;"	m	class:GameClock	access:private
GameClock::m_now	include/system/GameClock.hpp	/^		u32 m_now;$/;"	m	class:GameClock	access:private
GameClock::m_numUpdates	include/system/GameClock.hpp	/^		u8 m_numUpdates;$/;"	m	class:GameClock	access:private
GameClock::m_timeDropped	include/system/GameClock.hpp	/^		u32 m_timeDropped;$/;"	m	class:GameClock	access:private
GameClock::m_timestep	include/system/GameClock.hpp	/^		u32 m_timestep;$/;"	m	class:GameClock	access:private
GameClock::measureLastFrameDuration	include/system/GameClock.hpp	/^		void measureLastFrameDuration();$/;"	p	class:GameClock	access:public	signature:()
GameClock::measureLastFrameDuration	source/system/GameClock.cpp	/^void GameClock::measureLastFrameDuration() {$/;"	f	class:GameClock	signature:()
GameClock::ticks	include/system/GameClock.hpp	/^		static u32 ticks;$/;"	m	class:GameClock	access:private
GameClock::ticks	source/system/GameClock.cpp	/^u32 GameClock::ticks = 0;$/;"	m	class:GameClock	file:
GameClock::updateGame	include/system/GameClock.hpp	/^		void updateGame(std::function<void(void)> updateFunc);$/;"	p	class:GameClock	access:public	signature:(std::function<void(void)> updateFunc)
GameClock::updateGame	source/system/GameClock.cpp	/^void GameClock::updateGame(std::function<void(void)> updateFunc) {$/;"	f	class:GameClock	signature:(std::function<void(void)> updateFunc)
GameClock::~GameClock	include/system/GameClock.hpp	/^		~GameClock();$/;"	p	class:GameClock	access:public	signature:()
GameClock::~GameClock	source/system/GameClock.cpp	/^GameClock::~GameClock() {$/;"	f	class:GameClock	signature:()
GamePad	include/input/GamePad.hpp	/^		GamePad();$/;"	p	class:GamePad	access:public	signature:()
GamePad	include/input/GamePad.hpp	/^class GamePad {$/;"	c
GamePad	source/input/GamePad.cpp	/^GamePad::GamePad() {$/;"	f	class:GamePad	signature:()
GamePad::A	include/input/GamePad.hpp	/^			A,$/;"	e	enum:GamePad::Key
GamePad::B	include/input/GamePad.hpp	/^			B,$/;"	e	enum:GamePad::Key
GamePad::Down	include/input/GamePad.hpp	/^			Down,$/;"	e	enum:GamePad::Key
GamePad::GamePad	include/input/GamePad.hpp	/^		GamePad();$/;"	p	class:GamePad	access:public	signature:()
GamePad::GamePad	source/input/GamePad.cpp	/^GamePad::GamePad() {$/;"	f	class:GamePad	signature:()
GamePad::Key	include/input/GamePad.hpp	/^		enum Key {$/;"	g	class:GamePad	access:public
GamePad::Left	include/input/GamePad.hpp	/^			Left,$/;"	e	enum:GamePad::Key
GamePad::Right	include/input/GamePad.hpp	/^			Right,$/;"	e	enum:GamePad::Key
GamePad::Select	include/input/GamePad.hpp	/^			Select$/;"	e	enum:GamePad::Key
GamePad::Start	include/input/GamePad.hpp	/^			Start,$/;"	e	enum:GamePad::Key
GamePad::Up	include/input/GamePad.hpp	/^			Up,$/;"	e	enum:GamePad::Key
GamePad::getInstance	include/input/GamePad.hpp	/^		static GamePad &getInstance() {$/;"	f	class:GamePad	access:public	signature:()
GamePad::isKeyPressed	include/input/GamePad.hpp	/^		bool isKeyPressed(Key key);$/;"	p	class:GamePad	access:public	signature:(Key key)
GamePad::isKeyPressed	source/input/GamePad.cpp	/^bool GamePad::isKeyPressed(Key key) {$/;"	f	class:GamePad	signature:(Key key)
GamePad::m_inputHandler	include/input/GamePad.hpp	/^		std::unique_ptr<InputHandler> m_inputHandler;$/;"	m	class:GamePad	access:private
GamePad::update	include/input/GamePad.hpp	/^		void update();$/;"	p	class:GamePad	access:public	signature:()
GamePad::update	source/input/GamePad.cpp	/^void GamePad::update() {$/;"	f	class:GamePad	signature:()
GamePad::~GamePad	include/input/GamePad.hpp	/^		~GamePad();$/;"	p	class:GamePad	access:public	signature:()
GamePad::~GamePad	source/input/GamePad.cpp	/^GamePad::~GamePad() {$/;"	f	class:GamePad	signature:()
GameState	include/core/GameState.hpp	/^		GameState();$/;"	p	class:GameState	access:public	signature:()
GameState	include/core/GameState.hpp	/^class GameState {$/;"	c
GameState	source/core/GameState.cpp	/^GameState::GameState() {$/;"	f	class:GameState	signature:()
GameState::GameState	include/core/GameState.hpp	/^		GameState();$/;"	p	class:GameState	access:public	signature:()
GameState::GameState	source/core/GameState.cpp	/^GameState::GameState() {$/;"	f	class:GameState	signature:()
GameState::currentMap	include/core/GameState.hpp	/^		AnimatedMap &currentMap() { return *m_currentMap; }$/;"	f	class:GameState	access:public	signature:()
GameState::getInstance	include/core/GameState.hpp	/^		static GameState &getInstance() {$/;"	f	class:GameState	access:public	signature:()
GameState::m_currentMap	include/core/GameState.hpp	/^		AnimatedMap *m_currentMap;$/;"	m	class:GameState	access:private
GameState::m_playerRupees	include/core/GameState.hpp	/^		u16 m_playerRupees;$/;"	m	class:GameState	access:private
GameState::playerRupees	include/core/GameState.hpp	/^		u16 playerRupees() const { return m_playerRupees; }$/;"	f	class:GameState	access:public	signature:() const
GameState::setCurrentMap	include/core/GameState.hpp	/^		void setCurrentMap(u8 mapX, u8 mapY);$/;"	p	class:GameState	access:public	signature:(u8 mapX, u8 mapY)
GameState::setCurrentMap	source/core/GameState.cpp	/^void GameState::setCurrentMap(u8 mapX, u8 mapY) {$/;"	f	class:GameState	signature:(u8 mapX, u8 mapY)
GameState::~GameState	include/core/GameState.hpp	/^		~GameState();$/;"	p	class:GameState	access:public	signature:()
GameState::~GameState	source/core/GameState.cpp	/^GameState::~GameState() {$/;"	f	class:GameState	signature:()
GetCharacterRef	external/tinyxml2.cpp	/^const char* XMLUtil::GetCharacterRef( const char* p, char* value, int* length )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* p, char* value, int* length )
GetCharacterRef	external/tinyxml2.hpp	/^    static const char* GetCharacterRef( const char* p, char* value, int* length );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, char* value, int* length )
GetDocument	external/tinyxml2.hpp	/^    XMLDocument* GetDocument()				{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
GetDocument	external/tinyxml2.hpp	/^    const XMLDocument* GetDocument() const	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
GetErrorStr1	external/tinyxml2.hpp	/^    const char* GetErrorStr1() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
GetErrorStr2	external/tinyxml2.hpp	/^    const char* GetErrorStr2() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
GetStr	external/tinyxml2.cpp	/^const char* StrPair::GetStr()$/;"	f	class:tinyxml2::StrPair	signature:()
GetStr	external/tinyxml2.hpp	/^    const char* GetStr();$/;"	p	class:tinyxml2::StrPair	access:public	signature:()
GetText	external/tinyxml2.cpp	/^const char* XMLElement::GetText() const$/;"	f	class:tinyxml2::XMLElement	signature:() const
GetText	external/tinyxml2.hpp	/^    const char* GetText() const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:() const
GrassTile	include/data/TilesData.hpp	/^		GrassTile		= 14,$/;"	e	enum:TilesData::TileType
HEADERFILES	Makefile	/^HEADERFILES	:=	$(foreach dir,$(INCLUDES),$(wildcard $(dir)\/*.h)) \\$/;"	m
HasBOM	external/tinyxml2.hpp	/^    bool HasBOM() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
IMAGE_HPP_	include/display/Image.hpp	19;"	d
INCLUDE	Makefile	/^export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)\/$(dir))$/;"	m
INCLUDES	Makefile	/^INCLUDES	:=	include external $(wildcard include\/*)$/;"	m
INPUTHANDLER_HPP_	include/input/InputHandler.hpp	19;"	d
Identify	external/tinyxml2.cpp	/^char* XMLDocument::Identify( char* p, XMLNode** node )$/;"	f	class:tinyxml2::XMLDocument	signature:( char* p, XMLNode** node )
Identify	external/tinyxml2.hpp	/^    char* Identify( char* p, XMLNode** node );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( char* p, XMLNode** node )
Image	include/display/Image.hpp	/^		Image();$/;"	p	class:Image	access:public	signature:()
Image	include/display/Image.hpp	/^		Image(std::string filename);$/;"	p	class:Image	access:public	signature:(std::string filename)
Image	include/display/Image.hpp	/^class Image : public sf::Sprite {$/;"	c	inherits:sf::Sprite
Image	source/display/Image.cpp	/^Image::Image() {$/;"	f	class:Image	signature:()
Image	source/display/Image.cpp	/^Image::Image(std::string filename) {$/;"	f	class:Image	signature:(std::string filename)
Image::Image	include/display/Image.hpp	/^		Image();$/;"	p	class:Image	access:public	signature:()
Image::Image	include/display/Image.hpp	/^		Image(std::string filename);$/;"	p	class:Image	access:public	signature:(std::string filename)
Image::Image	source/display/Image.cpp	/^Image::Image() {$/;"	f	class:Image	signature:()
Image::Image	source/display/Image.cpp	/^Image::Image(std::string filename) {$/;"	f	class:Image	signature:(std::string filename)
Image::draw	include/display/Image.hpp	/^		void draw();$/;"	p	class:Image	access:public	signature:()
Image::draw	include/display/Image.hpp	/^		void draw(float x, float y, s16 width = -1, s16 height = -1);$/;"	p	class:Image	access:public	signature:(float x, float y, s16 width = -1, s16 height = -1)
Image::draw	source/display/Image.cpp	/^void Image::draw() {$/;"	f	class:Image	signature:()
Image::draw	source/display/Image.cpp	/^void Image::draw(float x, float y, s16 width, s16 height) {$/;"	f	class:Image	signature:(float x, float y, s16 width, s16 height)
Image::height	include/display/Image.hpp	/^		u16 height() const { return m_texture->getSize().y; }$/;"	f	class:Image	access:public	signature:() const
Image::load	include/display/Image.hpp	/^		void load(std::string filename);$/;"	p	class:Image	access:public	signature:(std::string filename)
Image::load	source/display/Image.cpp	/^void Image::load(std::string filename) {$/;"	f	class:Image	signature:(std::string filename)
Image::m_texture	include/display/Image.hpp	/^		sf::Texture *m_texture;$/;"	m	class:Image	access:private
Image::setClipRect	include/display/Image.hpp	/^		void setClipRect(s16 x, s16 y, u16 width, u16 height);$/;"	p	class:Image	access:public	signature:(s16 x, s16 y, u16 width, u16 height)
Image::setClipRect	source/display/Image.cpp	/^void Image::setClipRect(s16 x, s16 y, u16 width, u16 height) {$/;"	f	class:Image	signature:(s16 x, s16 y, u16 width, u16 height)
Image::width	include/display/Image.hpp	/^		u16 width() const { return m_texture->getSize().x; }$/;"	f	class:Image	access:public	signature:() const
Image::~Image	include/display/Image.hpp	/^		~Image();$/;"	p	class:Image	access:public	signature:()
Image::~Image	source/display/Image.cpp	/^Image::~Image() {$/;"	f	class:Image	signature:()
InputHandler	include/input/InputHandler.hpp	/^		InputHandler();$/;"	p	class:InputHandler	access:public	signature:()
InputHandler	include/input/InputHandler.hpp	/^class InputHandler {$/;"	c
InputHandler	source/input/InputHandler.cpp	/^InputHandler::InputHandler() {$/;"	f	class:InputHandler	signature:()
InputHandler::InputHandler	include/input/InputHandler.hpp	/^		InputHandler();$/;"	p	class:InputHandler	access:public	signature:()
InputHandler::InputHandler	source/input/InputHandler.cpp	/^InputHandler::InputHandler() {$/;"	f	class:InputHandler	signature:()
InputHandler::isKeyPressed	include/input/InputHandler.hpp	/^		virtual bool isKeyPressed(GamePad::Key key) = 0;$/;"	p	class:InputHandler	access:public	signature:(GamePad::Key key)
InputHandler::update	include/input/InputHandler.hpp	/^		virtual void update() = 0;$/;"	p	class:InputHandler	access:public	signature:()
InputHandler::~InputHandler	include/input/InputHandler.hpp	/^		~InputHandler();$/;"	p	class:InputHandler	access:public	signature:()
InputHandler::~InputHandler	source/input/InputHandler.cpp	/^InputHandler::~InputHandler() {$/;"	f	class:InputHandler	signature:()
InsertAfterChild	external/tinyxml2.cpp	/^XMLNode* XMLNode::InsertAfterChild( XMLNode* afterThis, XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* afterThis, XMLNode* addThis )
InsertAfterChild	external/tinyxml2.hpp	/^    XMLNode* InsertAfterChild( XMLNode* afterThis, XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* afterThis, XMLNode* addThis )
InsertEndChild	external/tinyxml2.cpp	/^XMLNode* XMLNode::InsertEndChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* addThis )
InsertEndChild	external/tinyxml2.hpp	/^    XMLNode* InsertEndChild( XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
InsertFirstChild	external/tinyxml2.cpp	/^XMLNode* XMLNode::InsertFirstChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* addThis )
InsertFirstChild	external/tinyxml2.hpp	/^    XMLNode* InsertFirstChild( XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
IntAttribute	external/tinyxml2.hpp	/^    int		 IntAttribute( const char* name ) const		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
IntValue	external/tinyxml2.hpp	/^    int		 IntValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
IsNameChar	external/tinyxml2.hpp	/^    inline static bool IsNameChar( unsigned char ch ) {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char ch )
IsNameStartChar	external/tinyxml2.hpp	/^    inline static bool IsNameStartChar( unsigned char ch ) {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char ch )
IsUTF8Continuation	external/tinyxml2.hpp	/^    inline static int IsUTF8Continuation( const char p ) {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char p )
IsWhiteSpace	external/tinyxml2.hpp	/^    static bool IsWhiteSpace( char p )					{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( char p )
ItemSize	external/tinyxml2.hpp	/^    virtual int ItemSize() const	{$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
ItemSize	external/tinyxml2.hpp	/^    virtual int ItemSize() const = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:() const
KEYBOARDHANDLER_HPP_	include/input/KeyboardHandler.hpp	19;"	d
KEYBOARDMOVEMENT_HPP_	include/movements/KeyboardMovement.hpp	19;"	d
Key	include/input/GamePad.hpp	/^		enum Key {$/;"	g	class:GamePad	access:public
KeyboardHandler	include/input/KeyboardHandler.hpp	/^		KeyboardHandler();$/;"	p	class:KeyboardHandler	access:public	signature:()
KeyboardHandler	include/input/KeyboardHandler.hpp	/^class KeyboardHandler : public InputHandler {$/;"	c	inherits:InputHandler
KeyboardHandler	source/input/KeyboardHandler.cpp	/^KeyboardHandler::KeyboardHandler() {$/;"	f	class:KeyboardHandler	signature:()
KeyboardHandler::KeyboardHandler	include/input/KeyboardHandler.hpp	/^		KeyboardHandler();$/;"	p	class:KeyboardHandler	access:public	signature:()
KeyboardHandler::KeyboardHandler	source/input/KeyboardHandler.cpp	/^KeyboardHandler::KeyboardHandler() {$/;"	f	class:KeyboardHandler	signature:()
KeyboardHandler::isKeyPressed	include/input/KeyboardHandler.hpp	/^		bool isKeyPressed(GamePad::Key key);$/;"	p	class:KeyboardHandler	access:public	signature:(GamePad::Key key)
KeyboardHandler::isKeyPressed	source/input/KeyboardHandler.cpp	/^bool KeyboardHandler::isKeyPressed(GamePad::Key key) {$/;"	f	class:KeyboardHandler	signature:(GamePad::Key key)
KeyboardHandler::m_keys	include/input/KeyboardHandler.hpp	/^		std::map<GamePad::Key, sf::Keyboard::Key> m_keys;$/;"	m	class:KeyboardHandler	access:private
KeyboardHandler::update	include/input/KeyboardHandler.hpp	/^		void update();$/;"	p	class:KeyboardHandler	access:public	signature:()
KeyboardHandler::update	source/input/KeyboardHandler.cpp	/^void KeyboardHandler::update() {$/;"	f	class:KeyboardHandler	signature:()
KeyboardHandler::~KeyboardHandler	include/input/KeyboardHandler.hpp	/^		~KeyboardHandler();$/;"	p	class:KeyboardHandler	access:public	signature:()
KeyboardHandler::~KeyboardHandler	source/input/KeyboardHandler.cpp	/^KeyboardHandler::~KeyboardHandler() {$/;"	f	class:KeyboardHandler	signature:()
KeyboardMovement	include/movements/KeyboardMovement.hpp	/^		KeyboardMovement();$/;"	p	class:KeyboardMovement	access:public	signature:()
KeyboardMovement	include/movements/KeyboardMovement.hpp	/^class KeyboardMovement : public Movement {$/;"	c	inherits:Movement
KeyboardMovement	source/movements/KeyboardMovement.cpp	/^KeyboardMovement::KeyboardMovement() {$/;"	f	class:KeyboardMovement	signature:()
KeyboardMovement::KeyboardMovement	include/movements/KeyboardMovement.hpp	/^		KeyboardMovement();$/;"	p	class:KeyboardMovement	access:public	signature:()
KeyboardMovement::KeyboardMovement	source/movements/KeyboardMovement.cpp	/^KeyboardMovement::KeyboardMovement() {$/;"	f	class:KeyboardMovement	signature:()
KeyboardMovement::doMovement	include/movements/KeyboardMovement.hpp	/^		void doMovement(Movable &movable);$/;"	p	class:KeyboardMovement	access:public	signature:(Movable &movable)
KeyboardMovement::doMovement	source/movements/KeyboardMovement.cpp	/^void KeyboardMovement::doMovement(Movable &movable) {$/;"	f	class:KeyboardMovement	signature:(Movable &movable)
KeyboardMovement::~KeyboardMovement	include/movements/KeyboardMovement.hpp	/^		~KeyboardMovement();$/;"	p	class:KeyboardMovement	access:public	signature:()
KeyboardMovement::~KeyboardMovement	source/movements/KeyboardMovement.cpp	/^KeyboardMovement::~KeyboardMovement() {$/;"	f	class:KeyboardMovement	signature:()
LD	Makefile	/^	export LD	:=	$(CC)$/;"	m
LD	Makefile	/^	export LD	:=	$(CXX)$/;"	m
LDFLAGS	Makefile	/^LDFLAGS	:=	-g$/;"	m
LF	external/tinyxml2.cpp	/^static const char LF = LINE_FEED;$/;"	v	file:
LIBDIRS	Makefile	/^LIBDIRS		:= 	$/;"	m
LIBPATHS	Makefile	/^export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(CURDIR)\/$(dir))$/;"	m
LIBS	Makefile	/^LIBS	:=	-lsfml-graphics -lsfml-audio -lsfml-window -lsfml-system$/;"	m
LINE_FEED	external/tinyxml2.cpp	/^static const char LINE_FEED				= (char)0x0a;			\/\/ all line endings are normalized to LF$/;"	v	file:
LastChild	external/tinyxml2.hpp	/^    XMLHandle LastChild()													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
LastChild	external/tinyxml2.hpp	/^    XMLNode*		LastChild()								{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
LastChild	external/tinyxml2.hpp	/^    const XMLConstHandle LastChild()	const										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
LastChild	external/tinyxml2.hpp	/^    const XMLNode*	LastChild() const						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
LastChildElement	external/tinyxml2.cpp	/^const XMLElement* XMLNode::LastChildElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
LastChildElement	external/tinyxml2.hpp	/^    XMLElement* LastChildElement( const char* value=0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
LastChildElement	external/tinyxml2.hpp	/^    XMLHandle LastChildElement( const char* _value=0 )						{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value=0 )
LastChildElement	external/tinyxml2.hpp	/^    const XMLConstHandle LastChildElement( const char* _value=0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value=0 ) const
LastChildElement	external/tinyxml2.hpp	/^    const XMLElement* LastChildElement( const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
Left	include/input/GamePad.hpp	/^			Left,$/;"	e	enum:GamePad::Key
Left	include/mapObjects/Movable.hpp	/^			Left,$/;"	e	enum:Movable::Direction
LinkEndChild	external/tinyxml2.hpp	/^    XMLNode* LinkEndChild( XMLNode* addThis )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
LoadFile	external/tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( FILE* fp )$/;"	f	class:tinyxml2::XMLDocument	signature:( FILE* fp )
LoadFile	external/tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( const char* filename )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* filename )
LoadFile	external/tinyxml2.hpp	/^    XMLError LoadFile( FILE* );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* )
LoadFile	external/tinyxml2.hpp	/^    XMLError LoadFile( const char* filename );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename )
LowGrassTile	include/data/TilesData.hpp	/^		LowGrassTile	= 12,$/;"	e	enum:TilesData::TileType
LowWaterTile	include/data/TilesData.hpp	/^		LowWaterTile	= 13,$/;"	e	enum:TilesData::TileType
MAPSTATE_HPP_	include/states/MapState.hpp	19;"	d
MOVABLE_HPP_	include/mapObjects/Movable.hpp	19;"	d
MOVEMENT_HPP_	include/movements/Movement.hpp	19;"	d
MapState	include/states/MapState.hpp	/^		MapState();$/;"	p	class:MapState	access:public	signature:()
MapState	include/states/MapState.hpp	/^class MapState : public ApplicationState {$/;"	c	inherits:ApplicationState
MapState	source/states/MapState.cpp	/^MapState::MapState() : m_statsBar(StatsBar::getInstance()) {$/;"	f	class:MapState	signature:()
MapState::MapState	include/states/MapState.hpp	/^		MapState();$/;"	p	class:MapState	access:public	signature:()
MapState::MapState	source/states/MapState.cpp	/^MapState::MapState() : m_statsBar(StatsBar::getInstance()) {$/;"	f	class:MapState	signature:()
MapState::draw	include/states/MapState.hpp	/^		void draw();$/;"	p	class:MapState	access:public	signature:()
MapState::draw	source/states/MapState.cpp	/^void MapState::draw() {$/;"	f	class:MapState	signature:()
MapState::m_link	include/states/MapState.hpp	/^		Player *m_link;$/;"	m	class:MapState	access:private
MapState::m_map	include/states/MapState.hpp	/^		AnimatedMap *m_map;$/;"	m	class:MapState	access:private
MapState::m_statsBar	include/states/MapState.hpp	/^		StatsBar &m_statsBar;$/;"	m	class:MapState	access:private
MapState::update	include/states/MapState.hpp	/^		void update();$/;"	p	class:MapState	access:public	signature:()
MapState::update	source/states/MapState.cpp	/^void MapState::update() {$/;"	f	class:MapState	signature:()
MapState::~MapState	include/states/MapState.hpp	/^		~MapState();$/;"	p	class:MapState	access:public	signature:()
MapState::~MapState	source/states/MapState.cpp	/^MapState::~MapState() {$/;"	f	class:MapState	signature:()
Mem	external/tinyxml2.hpp	/^    T* Mem()							{$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
Mem	external/tinyxml2.hpp	/^    const T* Mem() const				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
MemPool	external/tinyxml2.hpp	/^    MemPool() {}$/;"	f	class:tinyxml2::MemPool	access:public	signature:()
MemPool	external/tinyxml2.hpp	/^class MemPool$/;"	c	namespace:tinyxml2
MemPoolT	external/tinyxml2.hpp	/^    MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
MemPoolT	external/tinyxml2.hpp	/^class MemPoolT : public MemPool$/;"	c	namespace:tinyxml2	inherits:MemPool
Movable	include/mapObjects/Movable.hpp	/^		Movable();$/;"	p	class:Movable	access:public	signature:()
Movable	include/mapObjects/Movable.hpp	/^		Movable(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement);$/;"	p	class:Movable	access:public	signature:(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement)
Movable	include/mapObjects/Movable.hpp	/^class Movable : public Sprite {$/;"	c	inherits:Sprite
Movable	source/mapObjects/Movable.cpp	/^Movable::Movable() {$/;"	f	class:Movable	signature:()
Movable	source/mapObjects/Movable.cpp	/^Movable::Movable(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement) {$/;"	f	class:Movable	signature:(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement)
Movable::Direction	include/mapObjects/Movable.hpp	/^		enum Direction {$/;"	g	class:Movable	access:public
Movable::Down	include/mapObjects/Movable.hpp	/^			Down,$/;"	e	enum:Movable::Direction
Movable::Left	include/mapObjects/Movable.hpp	/^			Left,$/;"	e	enum:Movable::Direction
Movable::Movable	include/mapObjects/Movable.hpp	/^		Movable();$/;"	p	class:Movable	access:public	signature:()
Movable::Movable	include/mapObjects/Movable.hpp	/^		Movable(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement);$/;"	p	class:Movable	access:public	signature:(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement)
Movable::Movable	source/mapObjects/Movable.cpp	/^Movable::Movable() {$/;"	f	class:Movable	signature:()
Movable::Movable	source/mapObjects/Movable.cpp	/^Movable::Movable(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement) {$/;"	f	class:Movable	signature:(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement)
Movable::Right	include/mapObjects/Movable.hpp	/^			Right,$/;"	e	enum:Movable::Direction
Movable::Up	include/mapObjects/Movable.hpp	/^			Up$/;"	e	enum:Movable::Direction
Movable::addCollisionHandler	include/mapObjects/Movable.hpp	/^		void addCollisionHandler(std::function<void(void)> collisionHandler);$/;"	p	class:Movable	access:public	signature:(std::function<void(void)> collisionHandler)
Movable::addCollisionHandler	source/mapObjects/Movable.cpp	/^void Movable::addCollisionHandler(std::function<void(void)> collisionHandler) {$/;"	f	class:Movable	signature:(std::function<void(void)> collisionHandler)
Movable::draw	include/mapObjects/Movable.hpp	/^		void draw();$/;"	p	class:Movable	access:public	signature:()
Movable::draw	source/mapObjects/Movable.cpp	/^void Movable::draw() {$/;"	f	class:Movable	signature:()
Movable::load	include/mapObjects/Movable.hpp	/^		void load(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement);$/;"	p	class:Movable	access:public	signature:(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement)
Movable::load	source/mapObjects/Movable.cpp	/^void Movable::load(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement) {$/;"	f	class:Movable	signature:(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement)
Movable::m_blocked	include/mapObjects/Movable.hpp	/^		bool m_blocked;$/;"	m	class:Movable	access:protected
Movable::m_collisionHandlers	include/mapObjects/Movable.hpp	/^		std::vector<std::function<void(void)>> m_collisionHandlers;$/;"	m	class:Movable	access:protected
Movable::m_direction	include/mapObjects/Movable.hpp	/^		u8 m_direction;$/;"	m	class:Movable	access:protected
Movable::m_movement	include/mapObjects/Movable.hpp	/^		std::unique_ptr<Movement> m_movement;$/;"	m	class:Movable	access:private
Movable::m_moving	include/mapObjects/Movable.hpp	/^		bool m_moving;$/;"	m	class:Movable	access:private
Movable::m_speed	include/mapObjects/Movable.hpp	/^		float m_speed;$/;"	m	class:Movable	access:private
Movable::m_vx	include/mapObjects/Movable.hpp	/^		float m_vx;$/;"	m	class:Movable	access:protected
Movable::m_vy	include/mapObjects/Movable.hpp	/^		float m_vy;$/;"	m	class:Movable	access:protected
Movable::move	include/mapObjects/Movable.hpp	/^		void move();$/;"	p	class:Movable	access:public	signature:()
Movable::move	source/mapObjects/Movable.cpp	/^void Movable::move() {$/;"	f	class:Movable	signature:()
Movable::setDirection	include/mapObjects/Movable.hpp	/^		void setDirection(u8 direction) { m_direction = direction; }$/;"	f	class:Movable	access:public	signature:(u8 direction)
Movable::setVelocity	include/mapObjects/Movable.hpp	/^		void setVelocity(float vx, float vy) { m_vx = vx; m_vy = vy; }$/;"	f	class:Movable	access:public	signature:(float vx, float vy)
Movable::~Movable	include/mapObjects/Movable.hpp	/^		~Movable();$/;"	p	class:Movable	access:public	signature:()
Movable::~Movable	source/mapObjects/Movable.cpp	/^Movable::~Movable() {$/;"	f	class:Movable	signature:()
Movement	include/movements/Movement.hpp	/^		Movement() {}$/;"	f	class:Movement	access:public	signature:()
Movement	include/movements/Movement.hpp	/^class Movement {$/;"	c
Movement::Movement	include/movements/Movement.hpp	/^		Movement() {}$/;"	f	class:Movement	access:public	signature:()
Movement::doMovement	include/movements/Movement.hpp	/^		virtual void doMovement(Movable &movable) = 0;$/;"	p	class:Movement	access:public	signature:(Movable &movable)
Movement::~Movement	include/movements/Movement.hpp	/^		virtual ~Movement() {}$/;"	f	class:Movement	access:public	signature:()
NEEDS_DELETE	external/tinyxml2.hpp	/^        NEEDS_DELETE = 0x200$/;"	e	enum:tinyxml2::StrPair::__anon2
NEEDS_ENTITY_PROCESSING	external/tinyxml2.hpp	/^        NEEDS_ENTITY_PROCESSING			= 0x01,$/;"	e	enum:tinyxml2::StrPair::__anon1
NEEDS_FLUSH	external/tinyxml2.hpp	/^        NEEDS_FLUSH = 0x100,$/;"	e	enum:tinyxml2::StrPair::__anon2
NEEDS_NEWLINE_NORMALIZATION	external/tinyxml2.hpp	/^        NEEDS_NEWLINE_NORMALIZATION		= 0x02,$/;"	e	enum:tinyxml2::StrPair::__anon1
NUM_ENTITIES	external/tinyxml2.cpp	/^static const int NUM_ENTITIES = 5;$/;"	m	namespace:tinyxml2	file:
Name	external/tinyxml2.cpp	/^const char* XMLAttribute::Name() const $/;"	f	class:tinyxml2::XMLAttribute	signature:() const
Name	external/tinyxml2.hpp	/^    const char* Name() const		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
Name	external/tinyxml2.hpp	/^    const char* Name() const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:() const
NewComment	external/tinyxml2.cpp	/^XMLComment* XMLDocument::NewComment( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
NewComment	external/tinyxml2.hpp	/^    XMLComment* NewComment( const char* comment );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* comment )
NewDeclaration	external/tinyxml2.cpp	/^XMLDeclaration* XMLDocument::NewDeclaration( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
NewDeclaration	external/tinyxml2.hpp	/^    XMLDeclaration* NewDeclaration( const char* text=0 );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text=0 )
NewElement	external/tinyxml2.cpp	/^XMLElement* XMLDocument::NewElement( const char* name )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* name )
NewElement	external/tinyxml2.hpp	/^    XMLElement* NewElement( const char* name );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* name )
NewText	external/tinyxml2.cpp	/^XMLText* XMLDocument::NewText( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
NewText	external/tinyxml2.hpp	/^    XMLText* NewText( const char* text );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
NewUnknown	external/tinyxml2.cpp	/^XMLUnknown* XMLDocument::NewUnknown( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
NewUnknown	external/tinyxml2.hpp	/^    XMLUnknown* NewUnknown( const char* text );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
Next	external/tinyxml2.hpp	/^    const XMLAttribute* Next() const {$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
NextSibling	external/tinyxml2.hpp	/^    XMLHandle NextSibling()													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
NextSibling	external/tinyxml2.hpp	/^    XMLNode*	NextSibling()								{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
NextSibling	external/tinyxml2.hpp	/^    const XMLConstHandle NextSibling() const										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
NextSibling	external/tinyxml2.hpp	/^    const XMLNode*	NextSibling() const						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
NextSiblingElement	external/tinyxml2.cpp	/^const XMLElement* XMLNode::NextSiblingElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
NextSiblingElement	external/tinyxml2.hpp	/^    XMLElement*	NextSiblingElement( const char* value=0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
NextSiblingElement	external/tinyxml2.hpp	/^    XMLHandle NextSiblingElement( const char* _value=0 )					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value=0 )
NextSiblingElement	external/tinyxml2.hpp	/^    const XMLConstHandle NextSiblingElement( const char* _value=0 ) const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value=0 ) const
NextSiblingElement	external/tinyxml2.hpp	/^    const XMLElement*	NextSiblingElement( const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
NoChildren	external/tinyxml2.hpp	/^    bool NoChildren() const					{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
NonPassable	include/data/TilesData.hpp	/^		NonPassable		= 1,$/;"	e	enum:TilesData::SubTileType
OFILES	Makefile	/^export OFILES	:=	$(CPPFILES:.cpp=.o) $(CFILES:.c=.o)$/;"	m
OPEN	external/tinyxml2.hpp	/^        OPEN,		\/\/ <foo>$/;"	e	enum:tinyxml2::XMLElement::__anon5
OUTPUT	Makefile	/^export OUTPUT	:=	$(CURDIR)\/$(TARGET)$/;"	m
OpenElement	external/tinyxml2.cpp	/^void XMLPrinter::OpenElement( const char* name, bool compactMode )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, bool compactMode )
OpenElement	external/tinyxml2.hpp	/^    void OpenElement( const char* name, bool compactMode );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, bool compactMode )
OpenedChest	include/data/TilesData.hpp	/^		OpenedChest		= 17$/;"	e	enum:TilesData::TileType
PLAYER_HPP_	include/mapObjects/Player.hpp	19;"	d
PRESERVE_WHITESPACE	external/tinyxml2.hpp	/^    PRESERVE_WHITESPACE,$/;"	e	enum:tinyxml2::Whitespace
Parent	external/tinyxml2.hpp	/^    XMLNode* Parent()						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
Parent	external/tinyxml2.hpp	/^    const XMLNode*	Parent() const			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
Parse	external/tinyxml2.cpp	/^XMLError XMLDocument::Parse( const char* p, size_t len )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* p, size_t len )
Parse	external/tinyxml2.hpp	/^    XMLError Parse( const char* xml, size_t nBytes=(size_t)(-1) );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* xml, size_t nBytes=(size_t)(-1) )
ParseAttributes	external/tinyxml2.cpp	/^char* XMLElement::ParseAttributes( char* p )$/;"	f	class:tinyxml2::XMLElement	signature:( char* p )
ParseAttributes	external/tinyxml2.hpp	/^    char* ParseAttributes( char* p );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( char* p )
ParseDeep	external/tinyxml2.cpp	/^char* XMLAttribute::ParseDeep( char* p, bool processEntities )$/;"	f	class:tinyxml2::XMLAttribute	signature:( char* p, bool processEntities )
ParseDeep	external/tinyxml2.cpp	/^char* XMLComment::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLComment	signature:( char* p, StrPair* )
ParseDeep	external/tinyxml2.cpp	/^char* XMLDeclaration::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLDeclaration	signature:( char* p, StrPair* )
ParseDeep	external/tinyxml2.cpp	/^char* XMLElement::ParseDeep( char* p, StrPair* strPair )$/;"	f	class:tinyxml2::XMLElement	signature:( char* p, StrPair* strPair )
ParseDeep	external/tinyxml2.cpp	/^char* XMLNode::ParseDeep( char* p, StrPair* parentEnd )$/;"	f	class:tinyxml2::XMLNode	signature:( char* p, StrPair* parentEnd )
ParseDeep	external/tinyxml2.cpp	/^char* XMLText::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLText	signature:( char* p, StrPair* )
ParseDeep	external/tinyxml2.cpp	/^char* XMLUnknown::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLUnknown	signature:( char* p, StrPair* )
ParseDeep	external/tinyxml2.hpp	/^    char* ParseDeep( char* p, StrPair* endTag );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( char* p, StrPair* endTag )
ParseDeep	external/tinyxml2.hpp	/^    char* ParseDeep( char* p, bool processEntities );$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( char* p, bool processEntities )
ParseDeep	external/tinyxml2.hpp	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( char*, StrPair* endTag )
ParseDeep	external/tinyxml2.hpp	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( char*, StrPair* endTag )
ParseDeep	external/tinyxml2.hpp	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLText	access:public	signature:( char*, StrPair* endTag )
ParseDeep	external/tinyxml2.hpp	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( char*, StrPair* endTag )
ParseDeep	external/tinyxml2.hpp	/^    virtual char* ParseDeep( char*, StrPair* );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( char*, StrPair* )
ParseName	external/tinyxml2.cpp	/^char* StrPair::ParseName( char* p )$/;"	f	class:tinyxml2::StrPair	signature:( char* p )
ParseName	external/tinyxml2.hpp	/^    char* ParseName( char* in );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( char* in )
ParseText	external/tinyxml2.cpp	/^char* StrPair::ParseText( char* p, const char* endTag, int strFlags )$/;"	f	class:tinyxml2::StrPair	signature:( char* p, const char* endTag, int strFlags )
ParseText	external/tinyxml2.hpp	/^    char* ParseText( char* in, const char* endTag, int strFlags );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( char* in, const char* endTag, int strFlags )
Passable	include/data/TilesData.hpp	/^		Passable		= 0,$/;"	e	enum:TilesData::SubTileType
PeekTop	external/tinyxml2.hpp	/^    const T& PeekTop() const                            {$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
Player	include/mapObjects/Player.hpp	/^		Player();$/;"	p	class:Player	access:public	signature:()
Player	include/mapObjects/Player.hpp	/^class Player : public Movable {$/;"	c	inherits:Movable
Player	source/mapObjects/Player.cpp	/^Player::Player() {$/;"	f	class:Player	signature:()
Player::Player	include/mapObjects/Player.hpp	/^		Player();$/;"	p	class:Player	access:public	signature:()
Player::Player	source/mapObjects/Player.cpp	/^Player::Player() {$/;"	f	class:Player	signature:()
Player::getInstance	include/mapObjects/Player.hpp	/^		static Player &getInstance() {$/;"	f	class:Player	access:public	signature:()
Player::life	include/mapObjects/Player.hpp	/^		s16 life() const { return m_life; }$/;"	f	class:Player	access:public	signature:() const
Player::m_life	include/mapObjects/Player.hpp	/^		s16 m_life;$/;"	m	class:Player	access:private
Player::m_maxLife	include/mapObjects/Player.hpp	/^		u16 m_maxLife;$/;"	m	class:Player	access:private
Player::mapCollisions	include/mapObjects/Player.hpp	/^		void mapCollisions();$/;"	p	class:Player	access:public	signature:()
Player::mapCollisions	source/mapObjects/Player.cpp	/^void Player::mapCollisions() {$/;"	f	class:Player	signature:()
Player::maxLife	include/mapObjects/Player.hpp	/^		u16 maxLife() const { return m_maxLife; }$/;"	f	class:Player	access:public	signature:() const
Player::~Player	include/mapObjects/Player.hpp	/^		~Player();$/;"	p	class:Player	access:public	signature:()
Player::~Player	source/mapObjects/Player.cpp	/^Player::~Player() {$/;"	f	class:Player	signature:()
Pop	external/tinyxml2.hpp	/^    T Pop() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
PopArr	external/tinyxml2.hpp	/^    void PopArr( int count ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( int count )
PreviousSibling	external/tinyxml2.hpp	/^    XMLHandle PreviousSibling()												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
PreviousSibling	external/tinyxml2.hpp	/^    XMLNode*	PreviousSibling()							{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
PreviousSibling	external/tinyxml2.hpp	/^    const XMLConstHandle PreviousSibling() const									{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
PreviousSibling	external/tinyxml2.hpp	/^    const XMLNode*	PreviousSibling() const					{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
PreviousSiblingElement	external/tinyxml2.cpp	/^const XMLElement* XMLNode::PreviousSiblingElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
PreviousSiblingElement	external/tinyxml2.hpp	/^    XMLElement*	PreviousSiblingElement( const char* value=0 ) {$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
PreviousSiblingElement	external/tinyxml2.hpp	/^    XMLHandle PreviousSiblingElement( const char* _value=0 )				{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value=0 )
PreviousSiblingElement	external/tinyxml2.hpp	/^    const XMLConstHandle PreviousSiblingElement( const char* _value=0 ) const		{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value=0 ) const
PreviousSiblingElement	external/tinyxml2.hpp	/^    const XMLElement*	PreviousSiblingElement( const char* value=0 ) const ;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
Print	external/tinyxml2.cpp	/^void XMLDocument::Print( XMLPrinter* streamer ) const$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLPrinter* streamer ) const
Print	external/tinyxml2.cpp	/^void XMLPrinter::Print( const char* format, ... )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* format, ... )
Print	external/tinyxml2.hpp	/^    void Print( XMLPrinter* streamer=0 ) const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLPrinter* streamer=0 ) const
Print	external/tinyxml2.hpp	/^    void Print( const char* format, ... );$/;"	p	class:tinyxml2::XMLPrinter	access:protected	signature:( const char* format, ... )
PrintError	external/tinyxml2.cpp	/^void XMLDocument::PrintError() const$/;"	f	class:tinyxml2::XMLDocument	signature:() const
PrintError	external/tinyxml2.hpp	/^    void PrintError() const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:() const
PrintSpace	external/tinyxml2.cpp	/^void XMLPrinter::PrintSpace( int depth )$/;"	f	class:tinyxml2::XMLPrinter	signature:( int depth )
PrintSpace	external/tinyxml2.hpp	/^    virtual void PrintSpace( int depth );$/;"	p	class:tinyxml2::XMLPrinter	access:protected	signature:( int depth )
PrintString	external/tinyxml2.cpp	/^void XMLPrinter::PrintString( const char* p, bool restricted )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* p, bool restricted )
PrintString	external/tinyxml2.hpp	/^    void PrintString( const char*, bool restrictedEntitySet );	\/\/ prints out, after detecting entities.$/;"	p	class:tinyxml2::XMLPrinter	access:private	signature:( const char*, bool restrictedEntitySet )
ProcessEntities	external/tinyxml2.hpp	/^    bool ProcessEntities() const		{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
Push	external/tinyxml2.hpp	/^    void Push( T t ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( T t )
PushArr	external/tinyxml2.hpp	/^    T* PushArr( int count ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( int count )
PushAttribute	external/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, bool v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, bool v )
PushAttribute	external/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, const char* value )
PushAttribute	external/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, double v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, double v )
PushAttribute	external/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, int v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, int v )
PushAttribute	external/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, unsigned v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, unsigned v )
PushAttribute	external/tinyxml2.hpp	/^    void PushAttribute( const char* name, bool value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, bool value )
PushAttribute	external/tinyxml2.hpp	/^    void PushAttribute( const char* name, const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, const char* value )
PushAttribute	external/tinyxml2.hpp	/^    void PushAttribute( const char* name, double value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, double value )
PushAttribute	external/tinyxml2.hpp	/^    void PushAttribute( const char* name, int value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, int value )
PushAttribute	external/tinyxml2.hpp	/^    void PushAttribute( const char* name, unsigned value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, unsigned value )
PushComment	external/tinyxml2.cpp	/^void XMLPrinter::PushComment( const char* comment )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* comment )
PushComment	external/tinyxml2.hpp	/^    void PushComment( const char* comment );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* comment )
PushDeclaration	external/tinyxml2.cpp	/^void XMLPrinter::PushDeclaration( const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* value )
PushDeclaration	external/tinyxml2.hpp	/^    void PushDeclaration( const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
PushHeader	external/tinyxml2.cpp	/^void XMLPrinter::PushHeader( bool writeBOM, bool writeDec )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool writeBOM, bool writeDec )
PushHeader	external/tinyxml2.hpp	/^    void PushHeader( bool writeBOM, bool writeDeclaration );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool writeBOM, bool writeDeclaration )
PushText	external/tinyxml2.cpp	/^void XMLPrinter::PushText( bool value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool value )
PushText	external/tinyxml2.cpp	/^void XMLPrinter::PushText( const char* text, bool cdata )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* text, bool cdata )
PushText	external/tinyxml2.cpp	/^void XMLPrinter::PushText( double value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( double value )
PushText	external/tinyxml2.cpp	/^void XMLPrinter::PushText( float value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( float value )
PushText	external/tinyxml2.cpp	/^void XMLPrinter::PushText( int value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( int value )
PushText	external/tinyxml2.cpp	/^void XMLPrinter::PushText( unsigned value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( unsigned value )
PushText	external/tinyxml2.hpp	/^    void PushText( bool value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool value )
PushText	external/tinyxml2.hpp	/^    void PushText( const char* text, bool cdata=false );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* text, bool cdata=false )
PushText	external/tinyxml2.hpp	/^    void PushText( double value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( double value )
PushText	external/tinyxml2.hpp	/^    void PushText( float value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( float value )
PushText	external/tinyxml2.hpp	/^    void PushText( int value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( int value )
PushText	external/tinyxml2.hpp	/^    void PushText( unsigned value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( unsigned value )
PushUnknown	external/tinyxml2.cpp	/^void XMLPrinter::PushUnknown( const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* value )
PushUnknown	external/tinyxml2.hpp	/^    void PushUnknown( const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
QueryAttribute	external/tinyxml2.hpp	/^	int QueryAttribute( const char* name, bool* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool* value ) const
QueryAttribute	external/tinyxml2.hpp	/^	int QueryAttribute( const char* name, double* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double* value ) const
QueryAttribute	external/tinyxml2.hpp	/^	int QueryAttribute( const char* name, float* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float* value ) const
QueryAttribute	external/tinyxml2.hpp	/^	int QueryAttribute( const char* name, int* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int* value ) const
QueryAttribute	external/tinyxml2.hpp	/^	int QueryAttribute( const char* name, unsigned int* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned int* value ) const
QueryBoolAttribute	external/tinyxml2.hpp	/^    XMLError QueryBoolAttribute( const char* name, bool* value ) const				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool* value ) const
QueryBoolText	external/tinyxml2.cpp	/^XMLError XMLElement::QueryBoolText( bool* bval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( bool* bval ) const
QueryBoolText	external/tinyxml2.hpp	/^    XMLError QueryBoolText( bool* bval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( bool* bval ) const
QueryBoolValue	external/tinyxml2.cpp	/^XMLError XMLAttribute::QueryBoolValue( bool* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( bool* value ) const
QueryBoolValue	external/tinyxml2.hpp	/^    XMLError QueryBoolValue( bool* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( bool* value ) const
QueryDoubleAttribute	external/tinyxml2.hpp	/^    XMLError QueryDoubleAttribute( const char* name, double* value ) const			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double* value ) const
QueryDoubleText	external/tinyxml2.cpp	/^XMLError XMLElement::QueryDoubleText( double* dval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( double* dval ) const
QueryDoubleText	external/tinyxml2.hpp	/^    XMLError QueryDoubleText( double* dval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( double* dval ) const
QueryDoubleValue	external/tinyxml2.cpp	/^XMLError XMLAttribute::QueryDoubleValue( double* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( double* value ) const
QueryDoubleValue	external/tinyxml2.hpp	/^    XMLError QueryDoubleValue( double* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( double* value ) const
QueryFloatAttribute	external/tinyxml2.hpp	/^    XMLError QueryFloatAttribute( const char* name, float* value ) const			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float* value ) const
QueryFloatText	external/tinyxml2.cpp	/^XMLError XMLElement::QueryFloatText( float* fval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( float* fval ) const
QueryFloatText	external/tinyxml2.hpp	/^    XMLError QueryFloatText( float* fval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( float* fval ) const
QueryFloatValue	external/tinyxml2.cpp	/^XMLError XMLAttribute::QueryFloatValue( float* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( float* value ) const
QueryFloatValue	external/tinyxml2.hpp	/^    XMLError QueryFloatValue( float* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( float* value ) const
QueryIntAttribute	external/tinyxml2.hpp	/^    XMLError QueryIntAttribute( const char* name, int* value ) const				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int* value ) const
QueryIntText	external/tinyxml2.cpp	/^XMLError XMLElement::QueryIntText( int* ival ) const$/;"	f	class:tinyxml2::XMLElement	signature:( int* ival ) const
QueryIntText	external/tinyxml2.hpp	/^    XMLError QueryIntText( int* ival ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( int* ival ) const
QueryIntValue	external/tinyxml2.cpp	/^XMLError XMLAttribute::QueryIntValue( int* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( int* value ) const
QueryIntValue	external/tinyxml2.hpp	/^    XMLError QueryIntValue( int* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( int* value ) const
QueryUnsignedAttribute	external/tinyxml2.hpp	/^    XMLError QueryUnsignedAttribute( const char* name, unsigned int* value ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned int* value ) const
QueryUnsignedText	external/tinyxml2.cpp	/^XMLError XMLElement::QueryUnsignedText( unsigned* uval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( unsigned* uval ) const
QueryUnsignedText	external/tinyxml2.hpp	/^    XMLError QueryUnsignedText( unsigned* uval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( unsigned* uval ) const
QueryUnsignedValue	external/tinyxml2.cpp	/^XMLError XMLAttribute::QueryUnsignedValue( unsigned int* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( unsigned int* value ) const
QueryUnsignedValue	external/tinyxml2.hpp	/^    XMLError QueryUnsignedValue( unsigned int* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned int* value ) const
RESOURCEHANDLER_HPP_	include/core/ResourceHandler.hpp	19;"	d
ReadBOM	external/tinyxml2.cpp	/^const char* XMLUtil::ReadBOM( const char* p, bool* bom )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* p, bool* bom )
ReadBOM	external/tinyxml2.hpp	/^    static const char* ReadBOM( const char* p, bool* hasBOM );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, bool* hasBOM )
Red	include/core/Debug.hpp	/^		Red = 31,$/;"	e	enum:Debug::TextColor
Reset	external/tinyxml2.cpp	/^void StrPair::Reset()$/;"	f	class:tinyxml2::StrPair	signature:()
Reset	external/tinyxml2.hpp	/^    void Reset();$/;"	p	class:tinyxml2::StrPair	access:private	signature:()
ResourceHandler	include/core/ResourceHandler.hpp	/^		ResourceHandler();$/;"	p	class:ResourceHandler	access:public	signature:()
ResourceHandler	include/core/ResourceHandler.hpp	/^class ResourceHandler {$/;"	c
ResourceHandler	source/core/ResourceHandler.cpp	/^ResourceHandler::ResourceHandler() {$/;"	f	class:ResourceHandler	signature:()
ResourceHandler::ResourceHandler	include/core/ResourceHandler.hpp	/^		ResourceHandler();$/;"	p	class:ResourceHandler	access:public	signature:()
ResourceHandler::ResourceHandler	source/core/ResourceHandler.cpp	/^ResourceHandler::ResourceHandler() {$/;"	f	class:ResourceHandler	signature:()
ResourceHandler::add	include/core/ResourceHandler.hpp	/^		void add(std::string name, Args... args) {$/;"	f	class:ResourceHandler	access:public	signature:(std::string name, Args... args)
ResourceHandler::get	include/core/ResourceHandler.hpp	/^		T &get(std::string name) {$/;"	f	class:ResourceHandler	access:public	signature:(std::string name)
ResourceHandler::getInstance	include/core/ResourceHandler.hpp	/^		static ResourceHandler &getInstance() {$/;"	f	class:ResourceHandler	access:public	signature:()
ResourceHandler::loadResources	include/core/ResourceHandler.hpp	/^		void loadResources();$/;"	p	class:ResourceHandler	access:public	signature:()
ResourceHandler::loadResources	source/core/ResourceHandler.cpp	/^void ResourceHandler::loadResources() {$/;"	f	class:ResourceHandler	signature:()
ResourceHandler::m_resources	include/core/ResourceHandler.hpp	/^		std::map<std::string, std::shared_ptr<void>> m_resources;$/;"	m	class:ResourceHandler	access:private
ResourceHandler::~ResourceHandler	include/core/ResourceHandler.hpp	/^		~ResourceHandler();$/;"	p	class:ResourceHandler	access:public	signature:()
ResourceHandler::~ResourceHandler	source/core/ResourceHandler.cpp	/^ResourceHandler::~ResourceHandler() {$/;"	f	class:ResourceHandler	signature:()
Right	include/input/GamePad.hpp	/^			Right,$/;"	e	enum:GamePad::Key
Right	include/mapObjects/Movable.hpp	/^			Right,$/;"	e	enum:Movable::Direction
RootElement	external/tinyxml2.hpp	/^    XMLElement* RootElement()				{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:()
RootElement	external/tinyxml2.hpp	/^    const XMLElement* RootElement() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
SINGLE_QUOTE	external/tinyxml2.cpp	/^static const char SINGLE_QUOTE			= '\\'';$/;"	v	file:
SOURCEFILES	Makefile	/^SOURCEFILES	:=	$(foreach dir,$(SOURCES),$(wildcard $(dir)\/*.c)) \\$/;"	m
SOURCES	Makefile	/^SOURCES		:=	source external $(wildcard source\/*)$/;"	m
SPRITEANIMATION_HPP_	include/display/SpriteAnimation.hpp	19;"	d
SPRITE_HPP_	include/display/Sprite.hpp	19;"	d
STATSBAR_HPP_	include/interface/StatsBar.hpp	19;"	d
SaveFile	external/tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( FILE* fp, bool compact )$/;"	f	class:tinyxml2::XMLDocument	signature:( FILE* fp, bool compact )
SaveFile	external/tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( const char* filename, bool compact )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* filename, bool compact )
SaveFile	external/tinyxml2.hpp	/^    XMLError SaveFile( FILE* fp, bool compact = false );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* fp, bool compact = false )
SaveFile	external/tinyxml2.hpp	/^    XMLError SaveFile( const char* filename, bool compact = false );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename, bool compact = false )
SealElement	external/tinyxml2.cpp	/^void XMLPrinter::SealElement()$/;"	f	class:tinyxml2::XMLPrinter	signature:()
SealElement	external/tinyxml2.hpp	/^	void SealElement();$/;"	p	class:tinyxml2::XMLPrinter	access:protected	signature:()
Select	include/input/GamePad.hpp	/^			Select$/;"	e	enum:GamePad::Key
Set	external/tinyxml2.hpp	/^    void Set( char* start, char* end, int flags ) {$/;"	f	class:tinyxml2::StrPair	access:public	signature:( char* start, char* end, int flags )
SetAttribute	external/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( bool v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( bool v )
SetAttribute	external/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( const char* v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( const char* v )
SetAttribute	external/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( double v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( double v )
SetAttribute	external/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( float v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( float v )
SetAttribute	external/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( int v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( int v )
SetAttribute	external/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( unsigned v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( unsigned v )
SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( bool value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( bool value )
SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( const char* name, bool value )			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool value )
SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( const char* name, const char* value )	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value )
SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( const char* name, double value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double value )
SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( const char* name, float value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float value )
SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( const char* name, int value )			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int value )
SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( const char* name, unsigned value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned value )
SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( const char* value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( const char* value )
SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( double value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( double value )
SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( float value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( float value )
SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( int value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( int value )
SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( unsigned value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned value )
SetBOM	external/tinyxml2.hpp	/^    void SetBOM( bool useBOM ) {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( bool useBOM )
SetCData	external/tinyxml2.hpp	/^    void SetCData( bool isCData )			{$/;"	f	class:tinyxml2::XMLText	access:public	signature:( bool isCData )
SetError	external/tinyxml2.cpp	/^void XMLDocument::SetError( XMLError error, const char* str1, const char* str2 )$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLError error, const char* str1, const char* str2 )
SetError	external/tinyxml2.hpp	/^    void SetError( XMLError error, const char* str1, const char* str2 );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLError error, const char* str1, const char* str2 )
SetInternedStr	external/tinyxml2.hpp	/^    void SetInternedStr( const char* str ) {$/;"	f	class:tinyxml2::StrPair	access:public	signature:( const char* str )
SetName	external/tinyxml2.cpp	/^void XMLAttribute::SetName( const char* n )$/;"	f	class:tinyxml2::XMLAttribute	signature:( const char* n )
SetName	external/tinyxml2.hpp	/^    void SetName( const char* name );$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const char* name )
SetName	external/tinyxml2.hpp	/^    void SetName( const char* str, bool staticMem=false )	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* str, bool staticMem=false )
SetStr	external/tinyxml2.cpp	/^void StrPair::SetStr( const char* str, int flags )$/;"	f	class:tinyxml2::StrPair	signature:( const char* str, int flags )
SetStr	external/tinyxml2.hpp	/^    void SetStr( const char* str, int flags=0 );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( const char* str, int flags=0 )
SetText	external/tinyxml2.cpp	/^void	XMLElement::SetText( const char* inText )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* inText )
SetText	external/tinyxml2.cpp	/^void XMLElement::SetText( bool v ) $/;"	f	class:tinyxml2::XMLElement	signature:( bool v )
SetText	external/tinyxml2.cpp	/^void XMLElement::SetText( double v ) $/;"	f	class:tinyxml2::XMLElement	signature:( double v )
SetText	external/tinyxml2.cpp	/^void XMLElement::SetText( float v ) $/;"	f	class:tinyxml2::XMLElement	signature:( float v )
SetText	external/tinyxml2.cpp	/^void XMLElement::SetText( int v ) $/;"	f	class:tinyxml2::XMLElement	signature:( int v )
SetText	external/tinyxml2.cpp	/^void XMLElement::SetText( unsigned v ) $/;"	f	class:tinyxml2::XMLElement	signature:( unsigned v )
SetText	external/tinyxml2.hpp	/^	void SetText( const char* inText );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* inText )
SetText	external/tinyxml2.hpp	/^    void SetText( bool value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( bool value )
SetText	external/tinyxml2.hpp	/^    void SetText( double value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( double value )
SetText	external/tinyxml2.hpp	/^    void SetText( float value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( float value )
SetText	external/tinyxml2.hpp	/^    void SetText( int value );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( int value )
SetText	external/tinyxml2.hpp	/^    void SetText( unsigned value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( unsigned value )
SetTracked	external/tinyxml2.hpp	/^    virtual void SetTracked() = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:()
SetTracked	external/tinyxml2.hpp	/^    void SetTracked() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
SetValue	external/tinyxml2.cpp	/^void XMLNode::SetValue( const char* str, bool staticMem )$/;"	f	class:tinyxml2::XMLNode	signature:( const char* str, bool staticMem )
SetValue	external/tinyxml2.hpp	/^    void SetValue( const char* val, bool staticMem=false );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* val, bool staticMem=false )
ShallowClone	external/tinyxml2.cpp	/^XMLNode* XMLComment::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLComment	signature:( XMLDocument* doc ) const
ShallowClone	external/tinyxml2.cpp	/^XMLNode* XMLDeclaration::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLDocument* doc ) const
ShallowClone	external/tinyxml2.cpp	/^XMLNode* XMLElement::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLElement	signature:( XMLDocument* doc ) const
ShallowClone	external/tinyxml2.cpp	/^XMLNode* XMLText::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLText	signature:( XMLDocument* doc ) const
ShallowClone	external/tinyxml2.cpp	/^XMLNode* XMLUnknown::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLDocument* doc ) const
ShallowClone	external/tinyxml2.hpp	/^    virtual XMLNode* ShallowClone( XMLDocument* \/*document*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( XMLDocument* ) const
ShallowClone	external/tinyxml2.hpp	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLDocument* document ) const
ShallowClone	external/tinyxml2.hpp	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( XMLDocument* document ) const
ShallowClone	external/tinyxml2.hpp	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLDocument* document ) const
ShallowClone	external/tinyxml2.hpp	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( XMLDocument* document ) const
ShallowClone	external/tinyxml2.hpp	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( XMLDocument* document ) const
ShallowClone	external/tinyxml2.hpp	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLDocument* document ) const
ShallowEqual	external/tinyxml2.cpp	/^bool XMLComment::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLComment	signature:( const XMLNode* compare ) const
ShallowEqual	external/tinyxml2.cpp	/^bool XMLDeclaration::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( const XMLNode* compare ) const
ShallowEqual	external/tinyxml2.cpp	/^bool XMLElement::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const XMLNode* compare ) const
ShallowEqual	external/tinyxml2.cpp	/^bool XMLText::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLText	signature:( const XMLNode* compare ) const
ShallowEqual	external/tinyxml2.cpp	/^bool XMLUnknown::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( const XMLNode* compare ) const
ShallowEqual	external/tinyxml2.hpp	/^    virtual bool ShallowEqual( const XMLNode* \/*compare*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( const XMLNode* ) const
ShallowEqual	external/tinyxml2.hpp	/^    virtual bool ShallowEqual( const XMLNode* compare ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	external/tinyxml2.hpp	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	external/tinyxml2.hpp	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	external/tinyxml2.hpp	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	external/tinyxml2.hpp	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	external/tinyxml2.hpp	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( const XMLNode* compare ) const
Size	external/tinyxml2.hpp	/^    int Size() const					{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
SkipWhiteSpace	external/tinyxml2.hpp	/^    static char* SkipWhiteSpace( char* p )				{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( char* p )
SkipWhiteSpace	external/tinyxml2.hpp	/^    static const char* SkipWhiteSpace( const char* p )	{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p )
SlowingTile	include/data/TilesData.hpp	/^		SlowingTile		= 11,$/;"	e	enum:TilesData::TileType
Sprite	include/display/Sprite.hpp	/^		Sprite();$/;"	p	class:Sprite	access:public	signature:()
Sprite	include/display/Sprite.hpp	/^		Sprite(std::string filename, u16 frameWidth, u16 frameHeight);$/;"	p	class:Sprite	access:public	signature:(std::string filename, u16 frameWidth, u16 frameHeight)
Sprite	include/display/Sprite.hpp	/^class Sprite : public Image {$/;"	c	inherits:Image
Sprite	source/display/Sprite.cpp	/^Sprite::Sprite() {$/;"	f	class:Sprite	signature:()
Sprite	source/display/Sprite.cpp	/^Sprite::Sprite(std::string filename, u16 frameWidth, u16 frameHeight) {$/;"	f	class:Sprite	signature:(std::string filename, u16 frameWidth, u16 frameHeight)
Sprite::Sprite	include/display/Sprite.hpp	/^		Sprite();$/;"	p	class:Sprite	access:public	signature:()
Sprite::Sprite	include/display/Sprite.hpp	/^		Sprite(std::string filename, u16 frameWidth, u16 frameHeight);$/;"	p	class:Sprite	access:public	signature:(std::string filename, u16 frameWidth, u16 frameHeight)
Sprite::Sprite	source/display/Sprite.cpp	/^Sprite::Sprite() {$/;"	f	class:Sprite	signature:()
Sprite::Sprite	source/display/Sprite.cpp	/^Sprite::Sprite(std::string filename, u16 frameWidth, u16 frameHeight) {$/;"	f	class:Sprite	signature:(std::string filename, u16 frameWidth, u16 frameHeight)
Sprite::addAnimation	include/display/Sprite.hpp	/^		void addAnimation(std::initializer_list<u16> frames, u16 delay);$/;"	p	class:Sprite	access:public	signature:(std::initializer_list<u16> frames, u16 delay)
Sprite::addAnimation	source/display/Sprite.cpp	/^void Sprite::addAnimation(std::initializer_list<u16> frames, u16 delay) {$/;"	f	class:Sprite	signature:(std::initializer_list<u16> frames, u16 delay)
Sprite::animationAtEnd	include/display/Sprite.hpp	/^		bool animationAtEnd(u16 anim);$/;"	p	class:Sprite	access:public	signature:(u16 anim)
Sprite::animationAtEnd	source/display/Sprite.cpp	/^bool Sprite::animationAtEnd(u16 anim) {$/;"	f	class:Sprite	signature:(u16 anim)
Sprite::animationCurrentFrame	include/display/Sprite.hpp	/^		u16 animationCurrentFrame(u16 anim);$/;"	p	class:Sprite	access:public	signature:(u16 anim)
Sprite::animationCurrentFrame	source/display/Sprite.cpp	/^u16 Sprite::animationCurrentFrame(u16 anim) {$/;"	f	class:Sprite	signature:(u16 anim)
Sprite::currentAnimation	include/display/Sprite.hpp	/^		s16 currentAnimation() const { return m_currentAnimation; }$/;"	f	class:Sprite	access:public	signature:() const
Sprite::drawFrame	include/display/Sprite.hpp	/^		virtual void drawFrame(u16 frame);$/;"	p	class:Sprite	access:public	signature:(u16 frame)
Sprite::drawFrame	include/display/Sprite.hpp	/^		void drawFrame(float x, float y, u16 frame);$/;"	p	class:Sprite	access:public	signature:(float x, float y, u16 frame)
Sprite::drawFrame	source/display/Sprite.cpp	/^void Sprite::drawFrame(float x, float y, u16 frame) {$/;"	f	class:Sprite	signature:(float x, float y, u16 frame)
Sprite::drawFrame	source/display/Sprite.cpp	/^void Sprite::drawFrame(u16 frame) {$/;"	f	class:Sprite	signature:(u16 frame)
Sprite::load	include/display/Sprite.hpp	/^		void load(std::string filename, u16 frameWidth, u16 frameHeight);$/;"	p	class:Sprite	access:public	signature:(std::string filename, u16 frameWidth, u16 frameHeight)
Sprite::load	source/display/Sprite.cpp	/^void Sprite::load(std::string filename, u16 frameWidth, u16 frameHeight) {$/;"	f	class:Sprite	signature:(std::string filename, u16 frameWidth, u16 frameHeight)
Sprite::m_animations	include/display/Sprite.hpp	/^		std::vector<SpriteAnimation> m_animations;$/;"	m	class:Sprite	access:protected
Sprite::m_currentAnimation	include/display/Sprite.hpp	/^		s16 m_currentAnimation;$/;"	m	class:Sprite	access:protected
Sprite::m_frameHeight	include/display/Sprite.hpp	/^		u16 m_frameHeight;$/;"	m	class:Sprite	access:protected
Sprite::m_frameWidth	include/display/Sprite.hpp	/^		u16 m_frameWidth;$/;"	m	class:Sprite	access:protected
Sprite::m_lastFrameDisplayed	include/display/Sprite.hpp	/^		u16 m_lastFrameDisplayed;$/;"	m	class:Sprite	access:protected
Sprite::pause	include/display/Sprite.hpp	/^		static bool pause;$/;"	m	class:Sprite	access:public
Sprite::pause	source/display/Sprite.cpp	/^bool Sprite::pause = false;$/;"	m	class:Sprite	file:
Sprite::playAnimation	include/display/Sprite.hpp	/^		void playAnimation(float x, float y, u16 anim);$/;"	p	class:Sprite	access:public	signature:(float x, float y, u16 anim)
Sprite::playAnimation	include/display/Sprite.hpp	/^		void playAnimation(u16 anim);$/;"	p	class:Sprite	access:public	signature:(u16 anim)
Sprite::playAnimation	source/display/Sprite.cpp	/^void Sprite::playAnimation(float x, float y, u16 anim) {$/;"	f	class:Sprite	signature:(float x, float y, u16 anim)
Sprite::playAnimation	source/display/Sprite.cpp	/^void Sprite::playAnimation(u16 anim) {$/;"	f	class:Sprite	signature:(u16 anim)
Sprite::resetAnimation	include/display/Sprite.hpp	/^		void resetAnimation(u16 anim, u16 frame = 0);$/;"	p	class:Sprite	access:public	signature:(u16 anim, u16 frame = 0)
Sprite::resetAnimation	source/display/Sprite.cpp	/^void Sprite::resetAnimation(u16 anim, u16 frame) {$/;"	f	class:Sprite	signature:(u16 anim, u16 frame)
Sprite::startAnimation	include/display/Sprite.hpp	/^		void startAnimation(u16 anim);$/;"	p	class:Sprite	access:public	signature:(u16 anim)
Sprite::startAnimation	source/display/Sprite.cpp	/^void Sprite::startAnimation(u16 anim) {$/;"	f	class:Sprite	signature:(u16 anim)
Sprite::stopAnimation	include/display/Sprite.hpp	/^		void stopAnimation(u16 anim);$/;"	p	class:Sprite	access:public	signature:(u16 anim)
Sprite::stopAnimation	source/display/Sprite.cpp	/^void Sprite::stopAnimation(u16 anim) {$/;"	f	class:Sprite	signature:(u16 anim)
Sprite::~Sprite	include/display/Sprite.hpp	/^		~Sprite();$/;"	p	class:Sprite	access:public	signature:()
Sprite::~Sprite	source/display/Sprite.cpp	/^Sprite::~Sprite() {$/;"	f	class:Sprite	signature:()
SpriteAnimation	include/display/SpriteAnimation.hpp	/^	SpriteAnimation(u16 _delay) :$/;"	f	struct:SpriteAnimation	access:public	signature:(u16 _delay)
SpriteAnimation	include/display/SpriteAnimation.hpp	/^struct SpriteAnimation {$/;"	s
SpriteAnimation::SpriteAnimation	include/display/SpriteAnimation.hpp	/^	SpriteAnimation(u16 _delay) :$/;"	f	struct:SpriteAnimation	access:public	signature:(u16 _delay)
SpriteAnimation::delay	include/display/SpriteAnimation.hpp	/^	u16 delay;$/;"	m	struct:SpriteAnimation	access:public
SpriteAnimation::frames	include/display/SpriteAnimation.hpp	/^	std::vector<u16> frames;$/;"	m	struct:SpriteAnimation	access:public
SpriteAnimation::isPlaying	include/display/SpriteAnimation.hpp	/^	bool isPlaying;$/;"	m	struct:SpriteAnimation	access:public
SpriteAnimation::timer	include/display/SpriteAnimation.hpp	/^	Timer timer;$/;"	m	struct:SpriteAnimation	access:public
Start	include/input/GamePad.hpp	/^			Start,$/;"	e	enum:GamePad::Key
StatsBar	include/interface/StatsBar.hpp	/^		StatsBar();$/;"	p	class:StatsBar	access:public	signature:()
StatsBar	include/interface/StatsBar.hpp	/^class StatsBar {$/;"	c
StatsBar	source/interface/StatsBar.cpp	/^StatsBar::StatsBar() {$/;"	f	class:StatsBar	signature:()
StatsBar::StatsBar	include/interface/StatsBar.hpp	/^		StatsBar();$/;"	p	class:StatsBar	access:public	signature:()
StatsBar::StatsBar	source/interface/StatsBar.cpp	/^StatsBar::StatsBar() {$/;"	f	class:StatsBar	signature:()
StatsBar::draw	include/interface/StatsBar.hpp	/^		void draw();$/;"	p	class:StatsBar	access:public	signature:()
StatsBar::draw	source/interface/StatsBar.cpp	/^void StatsBar::draw() {$/;"	f	class:StatsBar	signature:()
StatsBar::getInstance	include/interface/StatsBar.hpp	/^		static StatsBar &getInstance() {$/;"	f	class:StatsBar	access:public	signature:()
StatsBar::m_background	include/interface/StatsBar.hpp	/^		Image m_background;$/;"	m	class:StatsBar	access:private
StatsBar::m_hearts	include/interface/StatsBar.hpp	/^		Sprite m_hearts;$/;"	m	class:StatsBar	access:private
StatsBar::m_numbers	include/interface/StatsBar.hpp	/^		Sprite m_numbers;$/;"	m	class:StatsBar	access:private
StatsBar::~StatsBar	include/interface/StatsBar.hpp	/^		~StatsBar();$/;"	p	class:StatsBar	access:public	signature:()
StatsBar::~StatsBar	source/interface/StatsBar.cpp	/^StatsBar::~StatsBar() {$/;"	f	class:StatsBar	signature:()
StrPair	external/tinyxml2.hpp	/^    StrPair() : _flags( 0 ), _start( 0 ), _end( 0 ) {}$/;"	f	class:tinyxml2::StrPair	access:public	signature:()
StrPair	external/tinyxml2.hpp	/^class StrPair$/;"	c	namespace:tinyxml2
StringEqual	external/tinyxml2.hpp	/^    inline static bool StringEqual( const char* p, const char* q, int nChar=INT_MAX )  {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, const char* q, int nChar=INT_MAX )
SubTileType	include/data/TilesData.hpp	/^	enum SubTileType {$/;"	g	namespace:TilesData
TARGET	Makefile	/^TARGET		:=  $(shell basename $(CURDIR))$/;"	m
TEXT_ELEMENT	external/tinyxml2.hpp	/^        TEXT_ELEMENT		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
TEXT_ELEMENT_LEAVE_ENTITIES	external/tinyxml2.hpp	/^        TEXT_ELEMENT_LEAVE_ENTITIES		= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
TILEANIMATION_HPP_	include/display/TileAnimation.hpp	19;"	d
TILEMAP_HPP_	include/display/TileMap.hpp	19;"	d
TILESDATA_HPP_	include/data/TilesData.hpp	19;"	d
TILESET_HPP_	include/display/Tileset.hpp	19;"	d
TILE_NB	include/data/TilesData.hpp	23;"	d
TIMER_HPP_	include/system/Timer.hpp	19;"	d
TINYXML2_INCLUDED	external/tinyxml2.hpp	26;"	d
TINYXML2_LIB	external/tinyxml2.hpp	68;"	d
TINYXML2_LIB	external/tinyxml2.hpp	70;"	d
TINYXML2_LIB	external/tinyxml2.hpp	72;"	d
TINYXML2_LIB	external/tinyxml2.hpp	75;"	d
TIXML2_MAJOR_VERSION	external/tinyxml2.hpp	/^static const int TIXML2_MAJOR_VERSION = 2;$/;"	v
TIXML2_MINOR_VERSION	external/tinyxml2.hpp	/^static const int TIXML2_MINOR_VERSION = 0;$/;"	v
TIXML2_PATCH_VERSION	external/tinyxml2.hpp	/^static const int TIXML2_PATCH_VERSION = 2;$/;"	v
TIXMLASSERT	external/tinyxml2.hpp	81;"	d
TIXMLASSERT	external/tinyxml2.hpp	84;"	d
TIXMLASSERT	external/tinyxml2.hpp	87;"	d
TIXMLASSERT	external/tinyxml2.hpp	90;"	d
TIXML_SNPRINTF	external/tinyxml2.hpp	/^inline int TIXML_SNPRINTF( char* buffer, size_t size, const char* format, ... )$/;"	f	signature:( char* buffer, size_t size, const char* format, ... )
TIXML_SNPRINTF	external/tinyxml2.hpp	115;"	d
TIXML_SSCANF	external/tinyxml2.hpp	111;"	d
TIXML_SSCANF	external/tinyxml2.hpp	116;"	d
TIXML_UTF_LEAD_0	external/tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	v	file:
TIXML_UTF_LEAD_1	external/tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	v	file:
TIXML_UTF_LEAD_2	external/tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	v	file:
TRANSITIONSTATE_HPP_	include/states/TransitionState.hpp	19;"	d
TYPES_HPP_	include/system/Types.hpp	19;"	d
TextColor	include/core/Debug.hpp	/^	enum TextColor {$/;"	g	namespace:Debug
TileAnimation	include/display/TileAnimation.hpp	/^	TileAnimation(u16 _delay) : delay(_delay) {}$/;"	f	struct:TileAnimation	access:public	signature:(u16 _delay)
TileAnimation	include/display/TileAnimation.hpp	/^struct TileAnimation {$/;"	s
TileAnimation::TileAnimation	include/display/TileAnimation.hpp	/^	TileAnimation(u16 _delay) : delay(_delay) {}$/;"	f	struct:TileAnimation	access:public	signature:(u16 _delay)
TileAnimation::delay	include/display/TileAnimation.hpp	/^	u16 delay;$/;"	m	struct:TileAnimation	access:public
TileAnimation::frames	include/display/TileAnimation.hpp	/^	std::vector<u16> frames;$/;"	m	struct:TileAnimation	access:public
TileMap	include/display/TileMap.hpp	/^		TileMap();$/;"	p	class:TileMap	access:public	signature:()
TileMap	include/display/TileMap.hpp	/^		TileMap(std::string filename, std::string textureName);$/;"	p	class:TileMap	access:public	signature:(std::string filename, std::string textureName)
TileMap	include/display/TileMap.hpp	/^class TileMap : public sf::Drawable, public sf::Transformable {$/;"	c	inherits:sf::Drawable,sf::Transformable
TileMap	source/display/TileMap.cpp	/^TileMap::TileMap() {$/;"	f	class:TileMap	signature:()
TileMap	source/display/TileMap.cpp	/^TileMap::TileMap(std::string filename, std::string tilesetName) {$/;"	f	class:TileMap	signature:(std::string filename, std::string tilesetName)
TileMap::TileMap	include/display/TileMap.hpp	/^		TileMap();$/;"	p	class:TileMap	access:public	signature:()
TileMap::TileMap	include/display/TileMap.hpp	/^		TileMap(std::string filename, std::string textureName);$/;"	p	class:TileMap	access:public	signature:(std::string filename, std::string textureName)
TileMap::TileMap	source/display/TileMap.cpp	/^TileMap::TileMap() {$/;"	f	class:TileMap	signature:()
TileMap::TileMap	source/display/TileMap.cpp	/^TileMap::TileMap(std::string filename, std::string tilesetName) {$/;"	f	class:TileMap	signature:(std::string filename, std::string tilesetName)
TileMap::draw	include/display/TileMap.hpp	/^		virtual void draw(sf::RenderTarget &target, sf::RenderStates states) const;$/;"	p	class:TileMap	access:private	signature:(sf::RenderTarget &target, sf::RenderStates states) const
TileMap::draw	include/display/TileMap.hpp	/^		void draw();$/;"	p	class:TileMap	access:public	signature:()
TileMap::draw	source/display/TileMap.cpp	/^void TileMap::draw() {$/;"	f	class:TileMap	signature:()
TileMap::draw	source/display/TileMap.cpp	/^void TileMap::draw(sf::RenderTarget &target, sf::RenderStates states) const {$/;"	f	class:TileMap	signature:(sf::RenderTarget &target, sf::RenderStates states) const
TileMap::getTile	include/display/TileMap.hpp	/^		s16 getTile(s16 tileX, s16 tileY);$/;"	p	class:TileMap	access:public	signature:(s16 tileX, s16 tileY)
TileMap::getTile	source/display/TileMap.cpp	/^s16 TileMap::getTile(s16 tileX, s16 tileY) {$/;"	f	class:TileMap	signature:(s16 tileX, s16 tileY)
TileMap::load	include/display/TileMap.hpp	/^		void load(std::string filename, std::string textureName);$/;"	p	class:TileMap	access:public	signature:(std::string filename, std::string textureName)
TileMap::load	source/display/TileMap.cpp	/^void TileMap::load(std::string filename, std::string tilesetName) {$/;"	f	class:TileMap	signature:(std::string filename, std::string tilesetName)
TileMap::m_data	include/display/TileMap.hpp	/^		std::vector<s16> m_data;$/;"	m	class:TileMap	access:protected
TileMap::m_height	include/display/TileMap.hpp	/^		u16 m_height;$/;"	m	class:TileMap	access:protected
TileMap::m_tileHeight	include/display/TileMap.hpp	/^		u16 m_tileHeight;$/;"	m	class:TileMap	access:protected
TileMap::m_tileWidth	include/display/TileMap.hpp	/^		u16 m_tileWidth;$/;"	m	class:TileMap	access:protected
TileMap::m_tileset	include/display/TileMap.hpp	/^		Tileset *m_tileset;$/;"	m	class:TileMap	access:protected
TileMap::m_vertices	include/display/TileMap.hpp	/^		sf::VertexArray m_vertices;$/;"	m	class:TileMap	access:private
TileMap::m_width	include/display/TileMap.hpp	/^		u16 m_width;$/;"	m	class:TileMap	access:protected
TileMap::passable	include/display/TileMap.hpp	/^		bool passable(float x, float y);$/;"	p	class:TileMap	access:public	signature:(float x, float y)
TileMap::passable	source/display/TileMap.cpp	/^bool TileMap::passable(float x, float y) {$/;"	f	class:TileMap	signature:(float x, float y)
TileMap::setTile	include/display/TileMap.hpp	/^		void setTile(u16 tileX, u16 tileY, u16 tile);$/;"	p	class:TileMap	access:public	signature:(u16 tileX, u16 tileY, u16 tile)
TileMap::setTile	source/display/TileMap.cpp	/^void TileMap::setTile(u16 tileX, u16 tileY, u16 tile) {$/;"	f	class:TileMap	signature:(u16 tileX, u16 tileY, u16 tile)
TileMap::updateTile	include/display/TileMap.hpp	/^		virtual void updateTile(u16 tileX, u16 tileY);$/;"	p	class:TileMap	access:public	signature:(u16 tileX, u16 tileY)
TileMap::updateTile	source/display/TileMap.cpp	/^void TileMap::updateTile(u16 tileX, u16 tileY) {$/;"	f	class:TileMap	signature:(u16 tileX, u16 tileY)
TileMap::updateTiles	include/display/TileMap.hpp	/^		void updateTiles();$/;"	p	class:TileMap	access:public	signature:()
TileMap::updateTiles	source/display/TileMap.cpp	/^void TileMap::updateTiles() {$/;"	f	class:TileMap	signature:()
TileMap::view	include/display/TileMap.hpp	/^		static sf::View view;$/;"	m	class:TileMap	access:public
TileMap::~TileMap	include/display/TileMap.hpp	/^		~TileMap();$/;"	p	class:TileMap	access:public	signature:()
TileMap::~TileMap	source/display/TileMap.cpp	/^TileMap::~TileMap() {$/;"	f	class:TileMap	signature:()
TileType	include/data/TilesData.hpp	/^	enum TileType {$/;"	g	namespace:TilesData
TilesData	include/data/TilesData.hpp	/^namespace TilesData {$/;"	n
TilesData::Button	include/data/TilesData.hpp	/^		Button			= 15,$/;"	e	enum:TilesData::TileType
TilesData::ChangeMap	include/data/TilesData.hpp	/^		ChangeMap		= 2$/;"	e	enum:TilesData::SubTileType
TilesData::ClosedChest	include/data/TilesData.hpp	/^		ClosedChest		= 16,$/;"	e	enum:TilesData::TileType
TilesData::GrassTile	include/data/TilesData.hpp	/^		GrassTile		= 14,$/;"	e	enum:TilesData::TileType
TilesData::LowGrassTile	include/data/TilesData.hpp	/^		LowGrassTile	= 12,$/;"	e	enum:TilesData::TileType
TilesData::LowWaterTile	include/data/TilesData.hpp	/^		LowWaterTile	= 13,$/;"	e	enum:TilesData::TileType
TilesData::NonPassable	include/data/TilesData.hpp	/^		NonPassable		= 1,$/;"	e	enum:TilesData::SubTileType
TilesData::OpenedChest	include/data/TilesData.hpp	/^		OpenedChest		= 17$/;"	e	enum:TilesData::TileType
TilesData::Passable	include/data/TilesData.hpp	/^		Passable		= 0,$/;"	e	enum:TilesData::SubTileType
TilesData::SlowingTile	include/data/TilesData.hpp	/^		SlowingTile		= 11,$/;"	e	enum:TilesData::TileType
TilesData::SubTileType	include/data/TilesData.hpp	/^	enum SubTileType {$/;"	g	namespace:TilesData
TilesData::TileType	include/data/TilesData.hpp	/^	enum TileType {$/;"	g	namespace:TilesData
TilesData::infos	source/data/TilesData.cpp	/^u16 TilesData::infos[TILE_NB][4] = {$/;"	m	class:TilesData	file:
Tileset	include/display/Tileset.hpp	/^		Tileset();$/;"	p	class:Tileset	access:public	signature:()
Tileset	include/display/Tileset.hpp	/^		Tileset(std::string name);$/;"	p	class:Tileset	access:public	signature:(std::string name)
Tileset	include/display/Tileset.hpp	/^class Tileset {$/;"	c
Tileset	source/display/Tileset.cpp	/^Tileset::Tileset() {$/;"	f	class:Tileset	signature:()
Tileset	source/display/Tileset.cpp	/^Tileset::Tileset(std::string name) {$/;"	f	class:Tileset	signature:(std::string name)
Tileset::Tileset	include/display/Tileset.hpp	/^		Tileset();$/;"	p	class:Tileset	access:public	signature:()
Tileset::Tileset	include/display/Tileset.hpp	/^		Tileset(std::string name);$/;"	p	class:Tileset	access:public	signature:(std::string name)
Tileset::Tileset	source/display/Tileset.cpp	/^Tileset::Tileset() {$/;"	f	class:Tileset	signature:()
Tileset::Tileset	source/display/Tileset.cpp	/^Tileset::Tileset(std::string name) {$/;"	f	class:Tileset	signature:(std::string name)
Tileset::addAnimation	include/display/Tileset.hpp	/^		void addAnimation(std::initializer_list<u16> frames, u16 delay);$/;"	p	class:Tileset	access:public	signature:(std::initializer_list<u16> frames, u16 delay)
Tileset::addAnimation	source/display/Tileset.cpp	/^void Tileset::addAnimation(std::initializer_list<u16> frames, u16 delay) {$/;"	f	class:Tileset	signature:(std::initializer_list<u16> frames, u16 delay)
Tileset::anims	include/display/Tileset.hpp	/^		std::vector<TileAnimation> &anims() { return m_anims; }$/;"	f	class:Tileset	access:public	signature:()
Tileset::info	include/display/Tileset.hpp	/^		std::vector<u16> &info() { return m_info; }$/;"	f	class:Tileset	access:public	signature:()
Tileset::load	include/display/Tileset.hpp	/^		void load(std::string name);$/;"	p	class:Tileset	access:public	signature:(std::string name)
Tileset::load	source/display/Tileset.cpp	/^void Tileset::load(std::string name) {$/;"	f	class:Tileset	signature:(std::string name)
Tileset::m_anims	include/display/Tileset.hpp	/^		std::vector<TileAnimation> m_anims;$/;"	m	class:Tileset	access:private
Tileset::m_info	include/display/Tileset.hpp	/^		std::vector<u16> m_info;$/;"	m	class:Tileset	access:private
Tileset::m_texture	include/display/Tileset.hpp	/^		sf::Texture m_texture;$/;"	m	class:Tileset	access:private
Tileset::texture	include/display/Tileset.hpp	/^		sf::Texture &texture() { return m_texture; }$/;"	f	class:Tileset	access:public	signature:()
Timer	include/system/Timer.hpp	/^		Timer(bool useRealTime = false);$/;"	p	class:Timer	access:public	signature:(bool useRealTime = false)
Timer	include/system/Timer.hpp	/^class Timer {$/;"	c
Timer	source/system/Timer.cpp	/^Timer::Timer(bool useRealTime) {$/;"	f	class:Timer	signature:(bool useRealTime)
Timer::Timer	include/system/Timer.hpp	/^		Timer(bool useRealTime = false);$/;"	p	class:Timer	access:public	signature:(bool useRealTime = false)
Timer::Timer	source/system/Timer.cpp	/^Timer::Timer(bool useRealTime) {$/;"	f	class:Timer	signature:(bool useRealTime)
Timer::isStarted	include/system/Timer.hpp	/^		bool isStarted() const { return m_isStarted; }$/;"	f	class:Timer	access:public	signature:() const
Timer::m_isStarted	include/system/Timer.hpp	/^		bool m_isStarted;$/;"	m	class:Timer	access:private
Timer::m_t	include/system/Timer.hpp	/^		u32 m_t;$/;"	m	class:Timer	access:private
Timer::m_tick	include/system/Timer.hpp	/^		u32 m_tick;$/;"	m	class:Timer	access:private
Timer::m_useRealTime	include/system/Timer.hpp	/^		bool m_useRealTime;$/;"	m	class:Timer	access:private
Timer::reset	include/system/Timer.hpp	/^		void reset();$/;"	p	class:Timer	access:public	signature:()
Timer::reset	source/system/Timer.cpp	/^void Timer::reset() {$/;"	f	class:Timer	signature:()
Timer::setTime	include/system/Timer.hpp	/^		void setTime(u32 time);$/;"	p	class:Timer	access:public	signature:(u32 time)
Timer::setTime	source/system/Timer.cpp	/^void Timer::setTime(u32 time) {$/;"	f	class:Timer	signature:(u32 time)
Timer::start	include/system/Timer.hpp	/^		void start();$/;"	p	class:Timer	access:public	signature:()
Timer::start	source/system/Timer.cpp	/^void Timer::start() {$/;"	f	class:Timer	signature:()
Timer::stop	include/system/Timer.hpp	/^		void stop();$/;"	p	class:Timer	access:public	signature:()
Timer::stop	source/system/Timer.cpp	/^void Timer::stop() {$/;"	f	class:Timer	signature:()
Timer::time	include/system/Timer.hpp	/^		u32 time();$/;"	p	class:Timer	access:public	signature:()
Timer::time	source/system/Timer.cpp	/^u32 Timer::time() {$/;"	f	class:Timer	signature:()
Timer::~Timer	include/system/Timer.hpp	/^		~Timer();$/;"	p	class:Timer	access:public	signature:()
Timer::~Timer	source/system/Timer.cpp	/^Timer::~Timer() {$/;"	f	class:Timer	signature:()
ToBool	external/tinyxml2.cpp	/^bool XMLUtil::ToBool( const char* str, bool* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, bool* value )
ToBool	external/tinyxml2.hpp	/^    static bool	ToBool( const char* str, bool* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, bool* value )
ToComment	external/tinyxml2.hpp	/^    virtual XMLComment*		ToComment()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToComment	external/tinyxml2.hpp	/^    virtual XMLComment*	ToComment()					{$/;"	f	class:tinyxml2::XMLComment	access:public	signature:()
ToComment	external/tinyxml2.hpp	/^    virtual const XMLComment*		ToComment() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToComment	external/tinyxml2.hpp	/^    virtual const XMLComment* ToComment() const		{$/;"	f	class:tinyxml2::XMLComment	access:public	signature:() const
ToDeclaration	external/tinyxml2.hpp	/^    XMLDeclaration* ToDeclaration() 			{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
ToDeclaration	external/tinyxml2.hpp	/^    const XMLDeclaration* ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToDeclaration	external/tinyxml2.hpp	/^    virtual XMLDeclaration*	ToDeclaration()					{$/;"	f	class:tinyxml2::XMLDeclaration	access:public	signature:()
ToDeclaration	external/tinyxml2.hpp	/^    virtual XMLDeclaration*	ToDeclaration()	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToDeclaration	external/tinyxml2.hpp	/^    virtual const XMLDeclaration*	ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToDeclaration	external/tinyxml2.hpp	/^    virtual const XMLDeclaration* ToDeclaration() const		{$/;"	f	class:tinyxml2::XMLDeclaration	access:public	signature:() const
ToDocument	external/tinyxml2.hpp	/^    virtual XMLDocument*	ToDocument()	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToDocument	external/tinyxml2.hpp	/^    virtual XMLDocument* ToDocument()				{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:()
ToDocument	external/tinyxml2.hpp	/^    virtual const XMLDocument*		ToDocument() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToDocument	external/tinyxml2.hpp	/^    virtual const XMLDocument* ToDocument() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
ToDouble	external/tinyxml2.cpp	/^bool XMLUtil::ToDouble( const char* str, double* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, double* value )
ToDouble	external/tinyxml2.hpp	/^    static bool ToDouble( const char* str, double* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, double* value )
ToElement	external/tinyxml2.hpp	/^    XMLElement* ToElement() 					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
ToElement	external/tinyxml2.hpp	/^    const XMLElement* ToElement() const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToElement	external/tinyxml2.hpp	/^    virtual XMLElement*		ToElement()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToElement	external/tinyxml2.hpp	/^    virtual XMLElement* ToElement()				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:()
ToElement	external/tinyxml2.hpp	/^    virtual const XMLElement*		ToElement() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToElement	external/tinyxml2.hpp	/^    virtual const XMLElement* ToElement() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
ToFloat	external/tinyxml2.cpp	/^bool XMLUtil::ToFloat( const char* str, float* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, float* value )
ToFloat	external/tinyxml2.hpp	/^    static bool	ToFloat( const char* str, float* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, float* value )
ToInt	external/tinyxml2.cpp	/^bool XMLUtil::ToInt( const char* str, int* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, int* value )
ToInt	external/tinyxml2.hpp	/^    static bool	ToInt( const char* str, int* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, int* value )
ToNode	external/tinyxml2.hpp	/^    XMLNode* ToNode()							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
ToNode	external/tinyxml2.hpp	/^    const XMLNode* ToNode() const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToStr	external/tinyxml2.cpp	/^void XMLUtil::ToStr( bool v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( bool v, char* buffer, int bufferSize )
ToStr	external/tinyxml2.cpp	/^void XMLUtil::ToStr( double v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( double v, char* buffer, int bufferSize )
ToStr	external/tinyxml2.cpp	/^void XMLUtil::ToStr( float v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( float v, char* buffer, int bufferSize )
ToStr	external/tinyxml2.cpp	/^void XMLUtil::ToStr( int v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( int v, char* buffer, int bufferSize )
ToStr	external/tinyxml2.cpp	/^void XMLUtil::ToStr( unsigned v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( unsigned v, char* buffer, int bufferSize )
ToStr	external/tinyxml2.hpp	/^    static void ToStr( bool v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( bool v, char* buffer, int bufferSize )
ToStr	external/tinyxml2.hpp	/^    static void ToStr( double v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( double v, char* buffer, int bufferSize )
ToStr	external/tinyxml2.hpp	/^    static void ToStr( float v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( float v, char* buffer, int bufferSize )
ToStr	external/tinyxml2.hpp	/^    static void ToStr( int v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( int v, char* buffer, int bufferSize )
ToStr	external/tinyxml2.hpp	/^    static void ToStr( unsigned v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned v, char* buffer, int bufferSize )
ToText	external/tinyxml2.hpp	/^    XMLText* ToText() 							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
ToText	external/tinyxml2.hpp	/^    const XMLText* ToText() const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToText	external/tinyxml2.hpp	/^    virtual XMLText*		ToText()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToText	external/tinyxml2.hpp	/^    virtual XMLText* ToText()			{$/;"	f	class:tinyxml2::XMLText	access:public	signature:()
ToText	external/tinyxml2.hpp	/^    virtual const XMLText*			ToText() const			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToText	external/tinyxml2.hpp	/^    virtual const XMLText* ToText() const	{$/;"	f	class:tinyxml2::XMLText	access:public	signature:() const
ToUnknown	external/tinyxml2.hpp	/^    XMLUnknown* ToUnknown() 					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
ToUnknown	external/tinyxml2.hpp	/^    const XMLUnknown* ToUnknown() const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToUnknown	external/tinyxml2.hpp	/^    virtual XMLUnknown*		ToUnknown()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToUnknown	external/tinyxml2.hpp	/^    virtual XMLUnknown*	ToUnknown()					{$/;"	f	class:tinyxml2::XMLUnknown	access:public	signature:()
ToUnknown	external/tinyxml2.hpp	/^    virtual const XMLUnknown*		ToUnknown() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToUnknown	external/tinyxml2.hpp	/^    virtual const XMLUnknown* ToUnknown() const		{$/;"	f	class:tinyxml2::XMLUnknown	access:public	signature:() const
ToUnsigned	external/tinyxml2.cpp	/^bool XMLUtil::ToUnsigned( const char* str, unsigned *value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, unsigned *value )
ToUnsigned	external/tinyxml2.hpp	/^    static bool ToUnsigned( const char* str, unsigned* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, unsigned* value )
Trace	external/tinyxml2.hpp	/^    void Trace( const char* name ) {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:( const char* name )
TransitionState	include/states/TransitionState.hpp	/^		TransitionState(Transition *transition);$/;"	p	class:TransitionState	access:public	signature:(Transition *transition)
TransitionState	include/states/TransitionState.hpp	/^class TransitionState : public ApplicationState {$/;"	c	inherits:ApplicationState
TransitionState	source/states/TransitionState.cpp	/^TransitionState::TransitionState(Transition *transition) {$/;"	f	class:TransitionState	signature:(Transition *transition)
TransitionState::TransitionState	include/states/TransitionState.hpp	/^		TransitionState(Transition *transition);$/;"	p	class:TransitionState	access:public	signature:(Transition *transition)
TransitionState::TransitionState	source/states/TransitionState.cpp	/^TransitionState::TransitionState(Transition *transition) {$/;"	f	class:TransitionState	signature:(Transition *transition)
TransitionState::draw	include/states/TransitionState.hpp	/^		void draw();$/;"	p	class:TransitionState	access:public	signature:()
TransitionState::draw	source/states/TransitionState.cpp	/^void TransitionState::draw() {$/;"	f	class:TransitionState	signature:()
TransitionState::m_transition	include/states/TransitionState.hpp	/^		std::unique_ptr<Transition> m_transition;$/;"	m	class:TransitionState	access:private
TransitionState::update	include/states/TransitionState.hpp	/^		void update();$/;"	p	class:TransitionState	access:public	signature:()
TransitionState::update	source/states/TransitionState.cpp	/^void TransitionState::update() {$/;"	f	class:TransitionState	signature:()
TransitionState::~TransitionState	include/states/TransitionState.hpp	/^		~TransitionState();$/;"	p	class:TransitionState	access:public	signature:()
TransitionState::~TransitionState	source/states/TransitionState.cpp	/^TransitionState::~TransitionState() {$/;"	f	class:TransitionState	signature:()
Unlink	external/tinyxml2.cpp	/^void XMLNode::Unlink( XMLNode* child )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* child )
Unlink	external/tinyxml2.hpp	/^    void Unlink( XMLNode* child );$/;"	p	class:tinyxml2::XMLNode	access:private	signature:( XMLNode* child )
UnsignedAttribute	external/tinyxml2.hpp	/^    unsigned UnsignedAttribute( const char* name ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
UnsignedValue	external/tinyxml2.hpp	/^    unsigned UnsignedValue() const			{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
Untracked	external/tinyxml2.hpp	/^    int Untracked() const {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
Up	include/input/GamePad.hpp	/^			Up,$/;"	e	enum:GamePad::Key
Up	include/mapObjects/Movable.hpp	/^			Up$/;"	e	enum:Movable::Direction
VPATH	Makefile	/^export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)\/$(dir))$/;"	m
Value	external/tinyxml2.cpp	/^const char* XMLAttribute::Value() const $/;"	f	class:tinyxml2::XMLAttribute	signature:() const
Value	external/tinyxml2.cpp	/^const char* XMLNode::Value() const $/;"	f	class:tinyxml2::XMLNode	signature:() const
Value	external/tinyxml2.hpp	/^    const char* Value() const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:() const
Value	external/tinyxml2.hpp	/^    const char* Value() const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:() const
Visit	external/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLComment& comment )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLComment& comment )
Visit	external/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLDeclaration& declaration )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLDeclaration& declaration )
Visit	external/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLText& text )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLText& text )
Visit	external/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLUnknown& unknown )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLUnknown& unknown )
Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLComment& \/*comment*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLComment& )
Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLComment& comment );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLComment& comment )
Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLDeclaration& \/*declaration*\/ )		{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDeclaration& )
Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLDeclaration& declaration );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDeclaration& declaration )
Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLText& \/*text*\/ )					{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLText& )
Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLText& text );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLText& text )
Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLUnknown& \/*unknown*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLUnknown& )
Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLUnknown& unknown );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLUnknown& unknown )
VisitEnter	external/tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLDocument& doc )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLDocument& doc )
VisitEnter	external/tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLElement& element, const XMLAttribute* attribute )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLElement& element, const XMLAttribute* attribute )
VisitEnter	external/tinyxml2.hpp	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
VisitEnter	external/tinyxml2.hpp	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
VisitEnter	external/tinyxml2.hpp	/^    virtual bool VisitEnter( const XMLElement& \/*element*\/, const XMLAttribute* \/*firstAttribute*\/ )	{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& , const XMLAttribute* )
VisitEnter	external/tinyxml2.hpp	/^    virtual bool VisitEnter( const XMLElement& element, const XMLAttribute* attribute );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element, const XMLAttribute* attribute )
VisitExit	external/tinyxml2.cpp	/^bool XMLPrinter::VisitExit( const XMLElement& element )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLElement& element )
VisitExit	external/tinyxml2.hpp	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
VisitExit	external/tinyxml2.hpp	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
VisitExit	external/tinyxml2.hpp	/^    virtual bool VisitExit( const XMLElement& \/*element*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& )
VisitExit	external/tinyxml2.hpp	/^    virtual bool VisitExit( const XMLElement& element );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element )
White	include/core/Debug.hpp	/^		White = 0,$/;"	e	enum:Debug::TextColor
Whitespace	external/tinyxml2.hpp	/^enum Whitespace {$/;"	g	namespace:tinyxml2
WhitespaceMode	external/tinyxml2.hpp	/^    Whitespace WhitespaceMode() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
XMLAttribute	external/tinyxml2.hpp	/^    XMLAttribute( const XMLAttribute& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
XMLAttribute	external/tinyxml2.hpp	/^    XMLAttribute() : _next( 0 ), _memPool( 0 ) {}$/;"	f	class:tinyxml2::XMLAttribute	access:private	signature:()
XMLAttribute	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLAttribute$/;"	c	namespace:tinyxml2
XMLComment	external/tinyxml2.cpp	/^XMLComment::XMLComment( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLComment	signature:( XMLDocument* doc )
XMLComment	external/tinyxml2.hpp	/^    XMLComment( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( XMLDocument* doc )
XMLComment	external/tinyxml2.hpp	/^    XMLComment( const XMLComment& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( const XMLComment& )
XMLComment	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLComment : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLConstHandle	external/tinyxml2.hpp	/^    XMLConstHandle( const XMLConstHandle& ref )										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
XMLConstHandle	external/tinyxml2.hpp	/^    XMLConstHandle( const XMLNode& node )											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode& node )
XMLConstHandle	external/tinyxml2.hpp	/^    XMLConstHandle( const XMLNode* node )											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode* node )
XMLConstHandle	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLConstHandle$/;"	c	namespace:tinyxml2
XMLDeclaration	external/tinyxml2.cpp	/^XMLDeclaration::XMLDeclaration( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLDocument* doc )
XMLDeclaration	external/tinyxml2.hpp	/^    XMLDeclaration( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( XMLDocument* doc )
XMLDeclaration	external/tinyxml2.hpp	/^    XMLDeclaration( const XMLDeclaration& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( const XMLDeclaration& )
XMLDeclaration	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLDeclaration : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLDocument	external/tinyxml2.cpp	/^XMLDocument::XMLDocument( bool processEntities, Whitespace whitespace ) :$/;"	f	class:tinyxml2::XMLDocument	signature:( bool processEntities, Whitespace whitespace )
XMLDocument	external/tinyxml2.hpp	/^    XMLDocument( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE )
XMLDocument	external/tinyxml2.hpp	/^    XMLDocument( const XMLDocument& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
XMLDocument	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLDocument : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLElement	external/tinyxml2.cpp	/^XMLElement::XMLElement( XMLDocument* doc ) : XMLNode( doc ),$/;"	f	class:tinyxml2::XMLElement	signature:( XMLDocument* doc )
XMLElement	external/tinyxml2.hpp	/^    XMLElement( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( XMLDocument* doc )
XMLElement	external/tinyxml2.hpp	/^    XMLElement( const XMLElement& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
XMLElement	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLElement : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLError	external/tinyxml2.hpp	/^enum XMLError {$/;"	g	namespace:tinyxml2
XMLFILE_HPP_	include/core/XMLFile.hpp	19;"	d
XMLFile	include/core/XMLFile.hpp	/^		XMLFile(std::string filename);$/;"	p	class:XMLFile	access:public	signature:(std::string filename)
XMLFile	include/core/XMLFile.hpp	/^class XMLFile {$/;"	c
XMLFile	source/core/XMLFile.cpp	/^XMLFile::XMLFile(std::string filename) {$/;"	f	class:XMLFile	signature:(std::string filename)
XMLFile::FirstChildElement	include/core/XMLFile.hpp	/^		XMLHandle FirstChildElement(const char *element) { return m_doc->FirstChildElement(element); }$/;"	f	class:XMLFile	access:public	signature:(const char *element)
XMLFile::XMLFile	include/core/XMLFile.hpp	/^		XMLFile(std::string filename);$/;"	p	class:XMLFile	access:public	signature:(std::string filename)
XMLFile::XMLFile	source/core/XMLFile.cpp	/^XMLFile::XMLFile(std::string filename) {$/;"	f	class:XMLFile	signature:(std::string filename)
XMLFile::m_doc	include/core/XMLFile.hpp	/^		XMLHandle *m_doc;$/;"	m	class:XMLFile	access:private
XMLFile::m_xml	include/core/XMLFile.hpp	/^		XMLDocument m_xml;$/;"	m	class:XMLFile	access:private
XMLFile::~XMLFile	include/core/XMLFile.hpp	/^		~XMLFile();$/;"	p	class:XMLFile	access:public	signature:()
XMLFile::~XMLFile	source/core/XMLFile.cpp	/^XMLFile::~XMLFile() {$/;"	f	class:XMLFile	signature:()
XMLHandle	external/tinyxml2.hpp	/^    XMLHandle( XMLNode& node )												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode& node )
XMLHandle	external/tinyxml2.hpp	/^    XMLHandle( XMLNode* node )												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode* node )
XMLHandle	external/tinyxml2.hpp	/^    XMLHandle( const XMLHandle& ref )										{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
XMLHandle	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLHandle$/;"	c	namespace:tinyxml2
XMLNode	external/tinyxml2.cpp	/^XMLNode::XMLNode( XMLDocument* doc ) :$/;"	f	class:tinyxml2::XMLNode	signature:( XMLDocument* doc )
XMLNode	external/tinyxml2.hpp	/^    XMLNode( XMLDocument* );$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( XMLDocument* )
XMLNode	external/tinyxml2.hpp	/^    XMLNode( const XMLNode& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( const XMLNode& )
XMLNode	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLNode$/;"	c	namespace:tinyxml2
XMLPrinter	external/tinyxml2.cpp	/^XMLPrinter::XMLPrinter( FILE* file, bool compact, int depth ) :$/;"	f	class:tinyxml2::XMLPrinter	signature:( FILE* file, bool compact, int depth )
XMLPrinter	external/tinyxml2.hpp	/^    XMLPrinter( FILE* file=0, bool compact = false, int depth = 0 );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( FILE* file=0, bool compact = false, int depth = 0 )
XMLPrinter	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLPrinter : public XMLVisitor$/;"	c	namespace:tinyxml2	inherits:XMLVisitor
XMLText	external/tinyxml2.hpp	/^    XMLText( XMLDocument* doc )	: XMLNode( doc ), _isCData( false )	{}$/;"	f	class:tinyxml2::XMLText	access:protected	signature:( XMLDocument* doc )
XMLText	external/tinyxml2.hpp	/^    XMLText( const XMLText& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLText	access:protected	signature:( const XMLText& )
XMLText	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLText : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLUnknown	external/tinyxml2.cpp	/^XMLUnknown::XMLUnknown( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLDocument* doc )
XMLUnknown	external/tinyxml2.hpp	/^    XMLUnknown( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( XMLDocument* doc )
XMLUnknown	external/tinyxml2.hpp	/^    XMLUnknown( const XMLUnknown& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( const XMLUnknown& )
XMLUnknown	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLUnknown : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLUtil	external/tinyxml2.hpp	/^class XMLUtil$/;"	c	namespace:tinyxml2
XMLVisitor	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLVisitor$/;"	c	namespace:tinyxml2
XML_CAN_NOT_CONVERT_TEXT	external/tinyxml2.hpp	/^    XML_CAN_NOT_CONVERT_TEXT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_ELEMENT_MISMATCH	external/tinyxml2.hpp	/^    XML_ERROR_ELEMENT_MISMATCH,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_EMPTY_DOCUMENT	external/tinyxml2.hpp	/^    XML_ERROR_EMPTY_DOCUMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_COULD_NOT_BE_OPENED	external/tinyxml2.hpp	/^    XML_ERROR_FILE_COULD_NOT_BE_OPENED,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_NOT_FOUND	external/tinyxml2.hpp	/^    XML_ERROR_FILE_NOT_FOUND,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_READ_ERROR	external/tinyxml2.hpp	/^    XML_ERROR_FILE_READ_ERROR,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_IDENTIFYING_TAG	external/tinyxml2.hpp	/^    XML_ERROR_IDENTIFYING_TAG,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_MISMATCHED_ELEMENT	external/tinyxml2.hpp	/^    XML_ERROR_MISMATCHED_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING	external/tinyxml2.hpp	/^    XML_ERROR_PARSING,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ATTRIBUTE	external/tinyxml2.hpp	/^    XML_ERROR_PARSING_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_CDATA	external/tinyxml2.hpp	/^    XML_ERROR_PARSING_CDATA,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_COMMENT	external/tinyxml2.hpp	/^    XML_ERROR_PARSING_COMMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_DECLARATION	external/tinyxml2.hpp	/^    XML_ERROR_PARSING_DECLARATION,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ELEMENT	external/tinyxml2.hpp	/^    XML_ERROR_PARSING_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_TEXT	external/tinyxml2.hpp	/^    XML_ERROR_PARSING_TEXT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_UNKNOWN	external/tinyxml2.hpp	/^    XML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:tinyxml2::XMLError
XML_NO_ATTRIBUTE	external/tinyxml2.hpp	/^    XML_NO_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
XML_NO_ERROR	external/tinyxml2.hpp	/^    XML_NO_ERROR = 0,$/;"	e	enum:tinyxml2::XMLError
XML_NO_TEXT_NODE	external/tinyxml2.hpp	/^    XML_NO_TEXT_NODE$/;"	e	enum:tinyxml2::XMLError
XML_SUCCESS	external/tinyxml2.hpp	/^    XML_SUCCESS = 0,$/;"	e	enum:tinyxml2::XMLError
XML_WRONG_ATTRIBUTE_TYPE	external/tinyxml2.hpp	/^    XML_WRONG_ATTRIBUTE_TYPE,$/;"	e	enum:tinyxml2::XMLError
_FILE	include/core/Debug.hpp	31;"	d
_accumulator	external/tinyxml2.hpp	/^    DynArray< char, 20 > _accumulator;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_allocated	external/tinyxml2.hpp	/^    int _allocated;		\/\/ objects allocated$/;"	m	class:tinyxml2::DynArray	access:private
_attributePool	external/tinyxml2.hpp	/^    MemPoolT< sizeof(XMLAttribute) > _attributePool;$/;"	m	class:tinyxml2::XMLDocument	access:private
_blockPtrs	external/tinyxml2.hpp	/^    DynArray< Block*, 10 > _blockPtrs;$/;"	m	class:tinyxml2::MemPoolT	access:private
_buffer	external/tinyxml2.hpp	/^    DynArray< char, 20 > _buffer;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_charBuffer	external/tinyxml2.hpp	/^    char*       _charBuffer;$/;"	m	class:tinyxml2::XMLDocument	access:private
_closingType	external/tinyxml2.hpp	/^    int _closingType;$/;"	m	class:tinyxml2::XMLElement	access:private
_commentPool	external/tinyxml2.hpp	/^    MemPoolT< sizeof(XMLComment) >	 _commentPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
_compactMode	external/tinyxml2.hpp	/^	bool _compactMode;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_currentAllocs	external/tinyxml2.hpp	/^    int _currentAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
_depth	external/tinyxml2.hpp	/^    int _depth;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_document	external/tinyxml2.hpp	/^    XMLDocument*	_document;$/;"	m	class:tinyxml2::XMLNode	access:protected
_elementJustOpened	external/tinyxml2.hpp	/^    bool _elementJustOpened;$/;"	m	class:tinyxml2::XMLPrinter	access:protected
_elementPool	external/tinyxml2.hpp	/^    MemPoolT< sizeof(XMLElement) >	 _elementPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
_end	external/tinyxml2.hpp	/^    char*   _end;$/;"	m	class:tinyxml2::StrPair	access:private
_entityFlag	external/tinyxml2.hpp	/^    bool _entityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter	access:private
_errorID	external/tinyxml2.hpp	/^    XMLError    _errorID;$/;"	m	class:tinyxml2::XMLDocument	access:private
_errorStr1	external/tinyxml2.hpp	/^    const char* _errorStr1;$/;"	m	class:tinyxml2::XMLDocument	access:private
_errorStr2	external/tinyxml2.hpp	/^    const char* _errorStr2;$/;"	m	class:tinyxml2::XMLDocument	access:private
_firstChild	external/tinyxml2.hpp	/^    XMLNode*		_firstChild;$/;"	m	class:tinyxml2::XMLNode	access:protected
_firstElement	external/tinyxml2.hpp	/^    bool _firstElement;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_flags	external/tinyxml2.hpp	/^    int     _flags;$/;"	m	class:tinyxml2::StrPair	access:private
_fp	external/tinyxml2.hpp	/^    FILE* _fp;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_isCData	external/tinyxml2.hpp	/^    bool _isCData;$/;"	m	class:tinyxml2::XMLText	access:private
_lastChild	external/tinyxml2.hpp	/^    XMLNode*		_lastChild;$/;"	m	class:tinyxml2::XMLNode	access:protected
_maxAllocs	external/tinyxml2.hpp	/^    int _maxAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
_mem	external/tinyxml2.hpp	/^    T*  _mem;$/;"	m	class:tinyxml2::DynArray	access:private
_memPool	external/tinyxml2.hpp	/^    MemPool*		_memPool;$/;"	m	class:tinyxml2::XMLNode	access:private
_memPool	external/tinyxml2.hpp	/^    MemPool*        _memPool;$/;"	m	class:tinyxml2::XMLAttribute	access:private
_nAllocs	external/tinyxml2.hpp	/^    int _nAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
_nUntracked	external/tinyxml2.hpp	/^    int _nUntracked;$/;"	m	class:tinyxml2::MemPoolT	access:private
_name	external/tinyxml2.hpp	/^    mutable StrPair _name;$/;"	m	class:tinyxml2::XMLAttribute	access:private
_next	external/tinyxml2.hpp	/^    XMLAttribute*   _next;$/;"	m	class:tinyxml2::XMLAttribute	access:private
_next	external/tinyxml2.hpp	/^    XMLNode*		_next;$/;"	m	class:tinyxml2::XMLNode	access:protected
_node	external/tinyxml2.hpp	/^    XMLNode* _node;$/;"	m	class:tinyxml2::XMLHandle	access:private
_node	external/tinyxml2.hpp	/^    const XMLNode* _node;$/;"	m	class:tinyxml2::XMLConstHandle	access:private
_parent	external/tinyxml2.hpp	/^    XMLNode*		_parent;$/;"	m	class:tinyxml2::XMLNode	access:protected
_pool	external/tinyxml2.hpp	/^    T   _pool[INIT];$/;"	m	class:tinyxml2::DynArray	access:private
_prev	external/tinyxml2.hpp	/^    XMLNode*		_prev;$/;"	m	class:tinyxml2::XMLNode	access:protected
_processEntities	external/tinyxml2.hpp	/^    bool        _processEntities;$/;"	m	class:tinyxml2::XMLDocument	access:private
_processEntities	external/tinyxml2.hpp	/^    bool _processEntities;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_restrictedEntityFlag	external/tinyxml2.hpp	/^    bool _restrictedEntityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter	access:private
_root	external/tinyxml2.hpp	/^    Chunk* _root;$/;"	m	class:tinyxml2::MemPoolT	access:private
_rootAttribute	external/tinyxml2.hpp	/^    XMLAttribute* _rootAttribute;$/;"	m	class:tinyxml2::XMLElement	access:private
_size	external/tinyxml2.hpp	/^    int _size;			\/\/ number objects in use$/;"	m	class:tinyxml2::DynArray	access:private
_stack	external/tinyxml2.hpp	/^    DynArray< const char*, 10 > _stack;$/;"	m	class:tinyxml2::XMLPrinter	access:protected
_start	external/tinyxml2.hpp	/^    char*   _start;$/;"	m	class:tinyxml2::StrPair	access:private
_textDepth	external/tinyxml2.hpp	/^    int _textDepth;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_textPool	external/tinyxml2.hpp	/^    MemPoolT< sizeof(XMLText) >		 _textPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
_value	external/tinyxml2.hpp	/^    mutable StrPair	_value;$/;"	m	class:tinyxml2::XMLNode	access:protected
_value	external/tinyxml2.hpp	/^    mutable StrPair _value;$/;"	m	class:tinyxml2::XMLAttribute	access:private
_whitespace	external/tinyxml2.hpp	/^    Whitespace  _whitespace;$/;"	m	class:tinyxml2::XMLDocument	access:private
_writeBOM	external/tinyxml2.hpp	/^    bool        _writeBOM;$/;"	m	class:tinyxml2::XMLDocument	access:private
add	include/core/ResourceHandler.hpp	/^		void add(std::string name, Args... args) {$/;"	f	class:ResourceHandler	access:public	signature:(std::string name, Args... args)
addAnimation	include/display/Sprite.hpp	/^		void addAnimation(std::initializer_list<u16> frames, u16 delay);$/;"	p	class:Sprite	access:public	signature:(std::initializer_list<u16> frames, u16 delay)
addAnimation	include/display/Tileset.hpp	/^		void addAnimation(std::initializer_list<u16> frames, u16 delay);$/;"	p	class:Tileset	access:public	signature:(std::initializer_list<u16> frames, u16 delay)
addAnimation	source/display/Sprite.cpp	/^void Sprite::addAnimation(std::initializer_list<u16> frames, u16 delay) {$/;"	f	class:Sprite	signature:(std::initializer_list<u16> frames, u16 delay)
addAnimation	source/display/Tileset.cpp	/^void Tileset::addAnimation(std::initializer_list<u16> frames, u16 delay) {$/;"	f	class:Tileset	signature:(std::initializer_list<u16> frames, u16 delay)
addCollisionHandler	include/mapObjects/Movable.hpp	/^		void addCollisionHandler(std::function<void(void)> collisionHandler);$/;"	p	class:Movable	access:public	signature:(std::function<void(void)> collisionHandler)
addCollisionHandler	source/mapObjects/Movable.cpp	/^void Movable::addCollisionHandler(std::function<void(void)> collisionHandler) {$/;"	f	class:Movable	signature:(std::function<void(void)> collisionHandler)
anim	include/display/AnimatedTile.hpp	/^	TileAnimation &anim;$/;"	m	struct:AnimatedTile	access:public
animationAtEnd	include/display/Sprite.hpp	/^		bool animationAtEnd(u16 anim);$/;"	p	class:Sprite	access:public	signature:(u16 anim)
animationAtEnd	source/display/Sprite.cpp	/^bool Sprite::animationAtEnd(u16 anim) {$/;"	f	class:Sprite	signature:(u16 anim)
animationCurrentFrame	include/display/Sprite.hpp	/^		u16 animationCurrentFrame(u16 anim);$/;"	p	class:Sprite	access:public	signature:(u16 anim)
animationCurrentFrame	source/display/Sprite.cpp	/^u16 Sprite::animationCurrentFrame(u16 anim) {$/;"	f	class:Sprite	signature:(u16 anim)
anims	include/display/Tileset.hpp	/^		std::vector<TileAnimation> &anims() { return m_anims; }$/;"	f	class:Tileset	access:public	signature:()
chunk	external/tinyxml2.hpp	/^        Chunk chunk[COUNT];$/;"	m	struct:tinyxml2::MemPoolT::Block	access:public
clock	include/system/GameClock.hpp	/^		static sf::Clock clock;$/;"	m	class:GameClock	access:private
clock	source/system/GameClock.cpp	/^sf::Clock GameClock::clock;$/;"	m	class:GameClock	file:
currentAnimation	include/display/Sprite.hpp	/^		s16 currentAnimation() const { return m_currentAnimation; }$/;"	f	class:Sprite	access:public	signature:() const
currentMap	include/core/GameState.hpp	/^		AnimatedMap &currentMap() { return *m_currentMap; }$/;"	f	class:GameState	access:public	signature:()
delay	include/display/SpriteAnimation.hpp	/^	u16 delay;$/;"	m	struct:SpriteAnimation	access:public
delay	include/display/TileAnimation.hpp	/^	u16 delay;$/;"	m	struct:TileAnimation	access:public
doMovement	include/movements/KeyboardMovement.hpp	/^		void doMovement(Movable &movable);$/;"	p	class:KeyboardMovement	access:public	signature:(Movable &movable)
doMovement	include/movements/Movement.hpp	/^		virtual void doMovement(Movable &movable) = 0;$/;"	p	class:Movement	access:public	signature:(Movable &movable)
doMovement	source/movements/KeyboardMovement.cpp	/^void KeyboardMovement::doMovement(Movable &movable) {$/;"	f	class:KeyboardMovement	signature:(Movable &movable)
draw	include/display/Image.hpp	/^		void draw();$/;"	p	class:Image	access:public	signature:()
draw	include/display/Image.hpp	/^		void draw(float x, float y, s16 width = -1, s16 height = -1);$/;"	p	class:Image	access:public	signature:(float x, float y, s16 width = -1, s16 height = -1)
draw	include/display/TileMap.hpp	/^		virtual void draw(sf::RenderTarget &target, sf::RenderStates states) const;$/;"	p	class:TileMap	access:private	signature:(sf::RenderTarget &target, sf::RenderStates states) const
draw	include/display/TileMap.hpp	/^		void draw();$/;"	p	class:TileMap	access:public	signature:()
draw	include/interface/StatsBar.hpp	/^		void draw();$/;"	p	class:StatsBar	access:public	signature:()
draw	include/mapObjects/Movable.hpp	/^		void draw();$/;"	p	class:Movable	access:public	signature:()
draw	include/states/ApplicationState.hpp	/^		virtual void draw() = 0;$/;"	p	class:ApplicationState	access:public	signature:()
draw	include/states/MapState.hpp	/^		void draw();$/;"	p	class:MapState	access:public	signature:()
draw	include/states/TransitionState.hpp	/^		void draw();$/;"	p	class:TransitionState	access:public	signature:()
draw	source/display/Image.cpp	/^void Image::draw() {$/;"	f	class:Image	signature:()
draw	source/display/Image.cpp	/^void Image::draw(float x, float y, s16 width, s16 height) {$/;"	f	class:Image	signature:(float x, float y, s16 width, s16 height)
draw	source/display/TileMap.cpp	/^void TileMap::draw() {$/;"	f	class:TileMap	signature:()
draw	source/display/TileMap.cpp	/^void TileMap::draw(sf::RenderTarget &target, sf::RenderStates states) const {$/;"	f	class:TileMap	signature:(sf::RenderTarget &target, sf::RenderStates states) const
draw	source/interface/StatsBar.cpp	/^void StatsBar::draw() {$/;"	f	class:StatsBar	signature:()
draw	source/mapObjects/Movable.cpp	/^void Movable::draw() {$/;"	f	class:Movable	signature:()
draw	source/states/MapState.cpp	/^void MapState::draw() {$/;"	f	class:MapState	signature:()
draw	source/states/TransitionState.cpp	/^void TransitionState::draw() {$/;"	f	class:TransitionState	signature:()
drawFrame	include/display/Sprite.hpp	/^		virtual void drawFrame(u16 frame);$/;"	p	class:Sprite	access:public	signature:(u16 frame)
drawFrame	include/display/Sprite.hpp	/^		void drawFrame(float x, float y, u16 frame);$/;"	p	class:Sprite	access:public	signature:(float x, float y, u16 frame)
drawFrame	source/display/Sprite.cpp	/^void Sprite::drawFrame(float x, float y, u16 frame) {$/;"	f	class:Sprite	signature:(float x, float y, u16 frame)
drawFrame	source/display/Sprite.cpp	/^void Sprite::drawFrame(u16 frame) {$/;"	f	class:Sprite	signature:(u16 frame)
drawGame	include/system/GameClock.hpp	/^		void drawGame(std::function<void(void)> drawFunc);$/;"	p	class:GameClock	access:public	signature:(std::function<void(void)> drawFunc)
drawGame	source/system/GameClock.cpp	/^void GameClock::drawGame(std::function<void(void)> drawFunc) {$/;"	f	class:GameClock	signature:(std::function<void(void)> drawFunc)
entities	external/tinyxml2.cpp	/^static const Entity entities[NUM_ENTITIES] = {$/;"	m	namespace:tinyxml2	file:
frames	include/display/SpriteAnimation.hpp	/^	std::vector<u16> frames;$/;"	m	struct:SpriteAnimation	access:public
frames	include/display/TileAnimation.hpp	/^	std::vector<u16> frames;$/;"	m	struct:TileAnimation	access:public
get	include/core/ResourceHandler.hpp	/^		T &get(std::string name) {$/;"	f	class:ResourceHandler	access:public	signature:(std::string name)
getApplicationStateStack	include/states/ApplicationState.hpp	/^		ApplicationStateStack &getApplicationStateStack();$/;"	p	class:ApplicationState	access:public	signature:()
getApplicationStateStack	source/states/ApplicationState.cpp	/^ApplicationStateStack &ApplicationState::getApplicationStateStack() {$/;"	f	class:ApplicationState	signature:()
getInstance	include/core/Application.hpp	/^		static Application &getInstance() {$/;"	f	class:Application	access:public	signature:()
getInstance	include/core/ApplicationStateStack.hpp	/^		static ApplicationStateStack &getInstance();$/;"	p	class:ApplicationStateStack	access:public	signature:()
getInstance	include/core/GameState.hpp	/^		static GameState &getInstance() {$/;"	f	class:GameState	access:public	signature:()
getInstance	include/core/ResourceHandler.hpp	/^		static ResourceHandler &getInstance() {$/;"	f	class:ResourceHandler	access:public	signature:()
getInstance	include/input/GamePad.hpp	/^		static GamePad &getInstance() {$/;"	f	class:GamePad	access:public	signature:()
getInstance	include/interface/StatsBar.hpp	/^		static StatsBar &getInstance() {$/;"	f	class:StatsBar	access:public	signature:()
getInstance	include/mapObjects/Player.hpp	/^		static Player &getInstance() {$/;"	f	class:Player	access:public	signature:()
getInstance	source/core/ApplicationStateStack.cpp	/^ApplicationStateStack &ApplicationStateStack::getInstance() {$/;"	f	class:ApplicationStateStack	signature:()
getTicks	include/system/GameClock.hpp	/^		static u32 getTicks(bool realTime = false);$/;"	p	class:GameClock	access:public	signature:(bool realTime = false)
getTicks	source/system/GameClock.cpp	/^u32 GameClock::getTicks(bool realTime) {$/;"	f	class:GameClock	signature:(bool realTime)
getTile	include/display/TileMap.hpp	/^		s16 getTile(s16 tileX, s16 tileY);$/;"	p	class:TileMap	access:public	signature:(s16 tileX, s16 tileY)
getTile	source/display/TileMap.cpp	/^s16 TileMap::getTile(s16 tileX, s16 tileY) {$/;"	f	class:TileMap	signature:(s16 tileX, s16 tileY)
handleEvents	include/core/Application.hpp	/^		void handleEvents();$/;"	p	class:Application	access:public	signature:()
handleEvents	source/core/Application.cpp	/^void Application::handleEvents() {$/;"	f	class:Application	signature:()
height	include/display/Image.hpp	/^		u16 height() const { return m_texture->getSize().y; }$/;"	f	class:Image	access:public	signature:() const
info	include/display/Tileset.hpp	/^		std::vector<u16> &info() { return m_info; }$/;"	f	class:Tileset	access:public	signature:()
infos	source/data/TilesData.cpp	/^u16 TilesData::infos[TILE_NB][4] = {$/;"	m	class:TilesData	file:
isKeyPressed	include/input/GamePad.hpp	/^		bool isKeyPressed(Key key);$/;"	p	class:GamePad	access:public	signature:(Key key)
isKeyPressed	include/input/InputHandler.hpp	/^		virtual bool isKeyPressed(GamePad::Key key) = 0;$/;"	p	class:InputHandler	access:public	signature:(GamePad::Key key)
isKeyPressed	include/input/KeyboardHandler.hpp	/^		bool isKeyPressed(GamePad::Key key);$/;"	p	class:KeyboardHandler	access:public	signature:(GamePad::Key key)
isKeyPressed	source/input/GamePad.cpp	/^bool GamePad::isKeyPressed(Key key) {$/;"	f	class:GamePad	signature:(Key key)
isKeyPressed	source/input/KeyboardHandler.cpp	/^bool KeyboardHandler::isKeyPressed(GamePad::Key key) {$/;"	f	class:KeyboardHandler	signature:(GamePad::Key key)
isPlaying	include/display/SpriteAnimation.hpp	/^	bool isPlaying;$/;"	m	struct:SpriteAnimation	access:public
isStarted	include/system/Timer.hpp	/^		bool isStarted() const { return m_isStarted; }$/;"	f	class:Timer	access:public	signature:() const
length	external/tinyxml2.cpp	/^    int length;$/;"	m	struct:tinyxml2::Entity	file:	access:public
life	include/mapObjects/Player.hpp	/^		s16 life() const { return m_life; }$/;"	f	class:Player	access:public	signature:() const
load	include/display/Image.hpp	/^		void load(std::string filename);$/;"	p	class:Image	access:public	signature:(std::string filename)
load	include/display/Sprite.hpp	/^		void load(std::string filename, u16 frameWidth, u16 frameHeight);$/;"	p	class:Sprite	access:public	signature:(std::string filename, u16 frameWidth, u16 frameHeight)
load	include/display/TileMap.hpp	/^		void load(std::string filename, std::string textureName);$/;"	p	class:TileMap	access:public	signature:(std::string filename, std::string textureName)
load	include/display/Tileset.hpp	/^		void load(std::string name);$/;"	p	class:Tileset	access:public	signature:(std::string name)
load	include/mapObjects/Movable.hpp	/^		void load(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement);$/;"	p	class:Movable	access:public	signature:(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement)
load	source/display/Image.cpp	/^void Image::load(std::string filename) {$/;"	f	class:Image	signature:(std::string filename)
load	source/display/Sprite.cpp	/^void Sprite::load(std::string filename, u16 frameWidth, u16 frameHeight) {$/;"	f	class:Sprite	signature:(std::string filename, u16 frameWidth, u16 frameHeight)
load	source/display/TileMap.cpp	/^void TileMap::load(std::string filename, std::string tilesetName) {$/;"	f	class:TileMap	signature:(std::string filename, std::string tilesetName)
load	source/display/Tileset.cpp	/^void Tileset::load(std::string name) {$/;"	f	class:Tileset	signature:(std::string name)
load	source/mapObjects/Movable.cpp	/^void Movable::load(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement) {$/;"	f	class:Movable	signature:(std::string filename, u16 frameWidth, u16 frameHeight, Movement *movement)
loadResources	include/core/ResourceHandler.hpp	/^		void loadResources();$/;"	p	class:ResourceHandler	access:public	signature:()
loadResources	source/core/ResourceHandler.cpp	/^void ResourceHandler::loadResources() {$/;"	f	class:ResourceHandler	signature:()
m_animatedTiles	include/display/AnimatedMap.hpp	/^		std::vector<AnimatedTile> m_animatedTiles;$/;"	m	class:AnimatedMap	access:private
m_animations	include/display/Sprite.hpp	/^		std::vector<SpriteAnimation> m_animations;$/;"	m	class:Sprite	access:protected
m_anims	include/display/Tileset.hpp	/^		std::vector<TileAnimation> m_anims;$/;"	m	class:Tileset	access:private
m_applicationStateStack	include/core/Application.hpp	/^		ApplicationStateStack *m_applicationStateStack;$/;"	m	class:Application	access:private
m_background	include/interface/StatsBar.hpp	/^		Image m_background;$/;"	m	class:StatsBar	access:private
m_blocked	include/mapObjects/Movable.hpp	/^		bool m_blocked;$/;"	m	class:Movable	access:protected
m_clock	include/core/Application.hpp	/^		GameClock m_clock;$/;"	m	class:Application	access:private
m_collisionHandlers	include/mapObjects/Movable.hpp	/^		std::vector<std::function<void(void)>> m_collisionHandlers;$/;"	m	class:Movable	access:protected
m_currentAnimation	include/display/Sprite.hpp	/^		s16 m_currentAnimation;$/;"	m	class:Sprite	access:protected
m_currentMap	include/core/GameState.hpp	/^		AnimatedMap *m_currentMap;$/;"	m	class:GameState	access:private
m_data	include/display/TileMap.hpp	/^		std::vector<s16> m_data;$/;"	m	class:TileMap	access:protected
m_defaultView	include/core/Application.hpp	/^		sf::View m_defaultView;$/;"	m	class:Application	access:private
m_direction	include/mapObjects/Movable.hpp	/^		u8 m_direction;$/;"	m	class:Movable	access:protected
m_doc	include/core/XMLFile.hpp	/^		XMLHandle *m_doc;$/;"	m	class:XMLFile	access:private
m_errorMsg	include/system/Exception.hpp	/^		std::string m_errorMsg;$/;"	m	class:Exception	access:private
m_filename	include/system/Exception.hpp	/^		std::string m_filename;$/;"	m	class:Exception	access:private
m_frameHeight	include/display/Sprite.hpp	/^		u16 m_frameHeight;$/;"	m	class:Sprite	access:protected
m_frameWidth	include/display/Sprite.hpp	/^		u16 m_frameWidth;$/;"	m	class:Sprite	access:protected
m_hearts	include/interface/StatsBar.hpp	/^		Sprite m_hearts;$/;"	m	class:StatsBar	access:private
m_height	include/display/TileMap.hpp	/^		u16 m_height;$/;"	m	class:TileMap	access:protected
m_info	include/display/Tileset.hpp	/^		std::vector<u16> m_info;$/;"	m	class:Tileset	access:private
m_inputHandler	include/input/GamePad.hpp	/^		std::unique_ptr<InputHandler> m_inputHandler;$/;"	m	class:GamePad	access:private
m_isStarted	include/system/Timer.hpp	/^		bool m_isStarted;$/;"	m	class:Timer	access:private
m_keys	include/input/KeyboardHandler.hpp	/^		std::map<GamePad::Key, sf::Keyboard::Key> m_keys;$/;"	m	class:KeyboardHandler	access:private
m_lag	include/system/GameClock.hpp	/^		u32 m_lag;$/;"	m	class:GameClock	access:private
m_lastFrameDate	include/system/GameClock.hpp	/^		u32 m_lastFrameDate;$/;"	m	class:GameClock	access:private
m_lastFrameDisplayed	include/display/Sprite.hpp	/^		u16 m_lastFrameDisplayed;$/;"	m	class:Sprite	access:protected
m_lastFrameDuration	include/system/GameClock.hpp	/^		u32 m_lastFrameDuration;$/;"	m	class:GameClock	access:private
m_life	include/mapObjects/Player.hpp	/^		s16 m_life;$/;"	m	class:Player	access:private
m_line	include/system/Exception.hpp	/^		u16 m_line;$/;"	m	class:Exception	access:private
m_link	include/states/MapState.hpp	/^		Player *m_link;$/;"	m	class:MapState	access:private
m_map	include/states/MapState.hpp	/^		AnimatedMap *m_map;$/;"	m	class:MapState	access:private
m_maxLife	include/mapObjects/Player.hpp	/^		u16 m_maxLife;$/;"	m	class:Player	access:private
m_movement	include/mapObjects/Movable.hpp	/^		std::unique_ptr<Movement> m_movement;$/;"	m	class:Movable	access:private
m_moving	include/mapObjects/Movable.hpp	/^		bool m_moving;$/;"	m	class:Movable	access:private
m_now	include/system/GameClock.hpp	/^		u32 m_now;$/;"	m	class:GameClock	access:private
m_numUpdates	include/system/GameClock.hpp	/^		u8 m_numUpdates;$/;"	m	class:GameClock	access:private
m_numbers	include/interface/StatsBar.hpp	/^		Sprite m_numbers;$/;"	m	class:StatsBar	access:private
m_playerRupees	include/core/GameState.hpp	/^		u16 m_playerRupees;$/;"	m	class:GameState	access:private
m_resources	include/core/ResourceHandler.hpp	/^		std::map<std::string, std::shared_ptr<void>> m_resources;$/;"	m	class:ResourceHandler	access:private
m_speed	include/mapObjects/Movable.hpp	/^		float m_speed;$/;"	m	class:Movable	access:private
m_stack	include/core/ApplicationStateStack.hpp	/^		std::stack<std::unique_ptr<ApplicationState>> m_stack;$/;"	m	class:ApplicationStateStack	access:private
m_statsBar	include/states/MapState.hpp	/^		StatsBar &m_statsBar;$/;"	m	class:MapState	access:private
m_t	include/system/Timer.hpp	/^		u32 m_t;$/;"	m	class:Timer	access:private
m_texture	include/display/Image.hpp	/^		sf::Texture *m_texture;$/;"	m	class:Image	access:private
m_texture	include/display/Tileset.hpp	/^		sf::Texture m_texture;$/;"	m	class:Tileset	access:private
m_tick	include/system/Timer.hpp	/^		u32 m_tick;$/;"	m	class:Timer	access:private
m_tileHeight	include/display/TileMap.hpp	/^		u16 m_tileHeight;$/;"	m	class:TileMap	access:protected
m_tileWidth	include/display/TileMap.hpp	/^		u16 m_tileWidth;$/;"	m	class:TileMap	access:protected
m_tileset	include/display/TileMap.hpp	/^		Tileset *m_tileset;$/;"	m	class:TileMap	access:protected
m_timeDropped	include/system/GameClock.hpp	/^		u32 m_timeDropped;$/;"	m	class:GameClock	access:private
m_timestep	include/system/GameClock.hpp	/^		u32 m_timestep;$/;"	m	class:GameClock	access:private
m_transition	include/states/TransitionState.hpp	/^		std::unique_ptr<Transition> m_transition;$/;"	m	class:TransitionState	access:private
m_useRealTime	include/system/Timer.hpp	/^		bool m_useRealTime;$/;"	m	class:Timer	access:private
m_vertices	include/display/TileMap.hpp	/^		sf::VertexArray m_vertices;$/;"	m	class:TileMap	access:private
m_vx	include/mapObjects/Movable.hpp	/^		float m_vx;$/;"	m	class:Movable	access:protected
m_vy	include/mapObjects/Movable.hpp	/^		float m_vy;$/;"	m	class:Movable	access:protected
m_width	include/display/TileMap.hpp	/^		u16 m_width;$/;"	m	class:TileMap	access:protected
m_window	include/core/Application.hpp	/^		sf::RenderWindow m_window;$/;"	m	class:Application	access:private
m_xml	include/core/XMLFile.hpp	/^		XMLDocument m_xml;$/;"	m	class:XMLFile	access:private
main	source/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
makeString	include/core/Debug.hpp	/^	std::string makeString(std::stringstream &stream, T value) {$/;"	f	namespace:Debug	signature:(std::stringstream &stream, T value)
makeString	include/core/Debug.hpp	/^	std::string makeString(std::stringstream &stream, T value, Args... args) {$/;"	f	namespace:Debug	signature:(std::stringstream &stream, T value, Args... args)
mapCollisions	include/mapObjects/Player.hpp	/^		void mapCollisions();$/;"	p	class:Player	access:public	signature:()
mapCollisions	source/mapObjects/Player.cpp	/^void Player::mapCollisions() {$/;"	f	class:Player	signature:()
maxLife	include/mapObjects/Player.hpp	/^		u16 maxLife() const { return m_maxLife; }$/;"	f	class:Player	access:public	signature:() const
measureLastFrameDuration	include/system/GameClock.hpp	/^		void measureLastFrameDuration();$/;"	p	class:GameClock	access:public	signature:()
measureLastFrameDuration	source/system/GameClock.cpp	/^void GameClock::measureLastFrameDuration() {$/;"	f	class:GameClock	signature:()
mem	external/tinyxml2.hpp	/^        char    mem[SIZE];$/;"	m	union:tinyxml2::MemPoolT::Chunk	access:public
move	include/mapObjects/Movable.hpp	/^		void move();$/;"	p	class:Movable	access:public	signature:()
move	source/mapObjects/Movable.cpp	/^void Movable::move() {$/;"	f	class:Movable	signature:()
next	external/tinyxml2.hpp	/^        Chunk*  next;$/;"	m	union:tinyxml2::MemPoolT::Chunk	access:public
nextFrame	include/display/AnimatedTile.hpp	/^	u16 nextFrame;$/;"	m	struct:AnimatedTile	access:public
operator =	external/tinyxml2.hpp	/^    XMLComment& operator=( const XMLComment& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( const XMLComment& )
operator =	external/tinyxml2.hpp	/^    XMLConstHandle& operator=( const XMLConstHandle& ref )							{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
operator =	external/tinyxml2.hpp	/^    XMLDeclaration& operator=( const XMLDeclaration& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( const XMLDeclaration& )
operator =	external/tinyxml2.hpp	/^    XMLHandle& operator=( const XMLHandle& ref )							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
operator =	external/tinyxml2.hpp	/^    XMLNode& operator=( const XMLNode& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( const XMLNode& )
operator =	external/tinyxml2.hpp	/^    XMLText& operator=( const XMLText& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLText	access:protected	signature:( const XMLText& )
operator =	external/tinyxml2.hpp	/^    XMLUnknown& operator=( const XMLUnknown& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( const XMLUnknown& )
operator =	external/tinyxml2.hpp	/^    void operator=( const XMLAttribute& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
operator =	external/tinyxml2.hpp	/^    void operator=( const XMLDocument& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
operator =	external/tinyxml2.hpp	/^    void operator=( const XMLElement& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
operator []	external/tinyxml2.hpp	/^    T& operator[](int i)				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:(int i)
operator []	external/tinyxml2.hpp	/^    const T& operator[](int i) const	{$/;"	f	class:tinyxml2::DynArray	access:public	signature:(int i) const
override	include/display/AnimatedMap.hpp	/^		virtual void updateTile(u16 tileX, u16 tileY) override;$/;"	m	class:AnimatedMap	access:public
passable	include/display/TileMap.hpp	/^		bool passable(float x, float y);$/;"	p	class:TileMap	access:public	signature:(float x, float y)
passable	source/display/TileMap.cpp	/^bool TileMap::passable(float x, float y) {$/;"	f	class:TileMap	signature:(float x, float y)
pattern	external/tinyxml2.cpp	/^    const char* pattern;$/;"	m	struct:tinyxml2::Entity	file:	access:public
pause	include/display/Sprite.hpp	/^		static bool pause;$/;"	m	class:Sprite	access:public
pause	source/display/Sprite.cpp	/^bool Sprite::pause = false;$/;"	m	class:Sprite	file:
playAnimation	include/display/Sprite.hpp	/^		void playAnimation(float x, float y, u16 anim);$/;"	p	class:Sprite	access:public	signature:(float x, float y, u16 anim)
playAnimation	include/display/Sprite.hpp	/^		void playAnimation(u16 anim);$/;"	p	class:Sprite	access:public	signature:(u16 anim)
playAnimation	source/display/Sprite.cpp	/^void Sprite::playAnimation(float x, float y, u16 anim) {$/;"	f	class:Sprite	signature:(float x, float y, u16 anim)
playAnimation	source/display/Sprite.cpp	/^void Sprite::playAnimation(u16 anim) {$/;"	f	class:Sprite	signature:(u16 anim)
playerRupees	include/core/GameState.hpp	/^		u16 playerRupees() const { return m_playerRupees; }$/;"	f	class:GameState	access:public	signature:() const
pop	include/core/ApplicationStateStack.hpp	/^		void pop() { m_stack.pop(); }$/;"	f	class:ApplicationStateStack	access:public	signature:()
print	include/core/Debug.hpp	/^	void print(Args... args) {$/;"	f	namespace:Debug	signature:(Args.... args)
push	include/core/ApplicationStateStack.hpp	/^		void push(ApplicationState *state) { m_stack.push(std::unique_ptr<ApplicationState>(state)); }$/;"	f	class:ApplicationStateStack	access:public	signature:(ApplicationState *state)
reset	include/system/Timer.hpp	/^		void reset();$/;"	p	class:Timer	access:public	signature:()
reset	source/system/Timer.cpp	/^void Timer::reset() {$/;"	f	class:Timer	signature:()
resetAnimation	include/display/Sprite.hpp	/^		void resetAnimation(u16 anim, u16 frame = 0);$/;"	p	class:Sprite	access:public	signature:(u16 anim, u16 frame = 0)
resetAnimation	source/display/Sprite.cpp	/^void Sprite::resetAnimation(u16 anim, u16 frame) {$/;"	f	class:Sprite	signature:(u16 anim, u16 frame)
resetView	include/core/Application.hpp	/^		void resetView() { m_window.setView(m_defaultView); }$/;"	f	class:Application	access:public	signature:()
run	include/core/Application.hpp	/^		void run();$/;"	p	class:Application	access:public	signature:()
run	source/core/Application.cpp	/^void Application::run() {$/;"	f	class:Application	signature:()
s16	include/system/Types.hpp	/^typedef signed short s16;$/;"	t
s32	include/system/Types.hpp	/^typedef signed long s32;$/;"	t
s8	include/system/Types.hpp	/^typedef signed char s8;$/;"	t
setClipRect	include/display/Image.hpp	/^		void setClipRect(s16 x, s16 y, u16 width, u16 height);$/;"	p	class:Image	access:public	signature:(s16 x, s16 y, u16 width, u16 height)
setClipRect	source/display/Image.cpp	/^void Image::setClipRect(s16 x, s16 y, u16 width, u16 height) {$/;"	f	class:Image	signature:(s16 x, s16 y, u16 width, u16 height)
setCurrentMap	include/core/GameState.hpp	/^		void setCurrentMap(u8 mapX, u8 mapY);$/;"	p	class:GameState	access:public	signature:(u8 mapX, u8 mapY)
setCurrentMap	source/core/GameState.cpp	/^void GameState::setCurrentMap(u8 mapX, u8 mapY) {$/;"	f	class:GameState	signature:(u8 mapX, u8 mapY)
setDirection	include/mapObjects/Movable.hpp	/^		void setDirection(u8 direction) { m_direction = direction; }$/;"	f	class:Movable	access:public	signature:(u8 direction)
setTile	include/display/TileMap.hpp	/^		void setTile(u16 tileX, u16 tileY, u16 tile);$/;"	p	class:TileMap	access:public	signature:(u16 tileX, u16 tileY, u16 tile)
setTile	source/display/TileMap.cpp	/^void TileMap::setTile(u16 tileX, u16 tileY, u16 tile) {$/;"	f	class:TileMap	signature:(u16 tileX, u16 tileY, u16 tile)
setTime	include/system/Timer.hpp	/^		void setTime(u32 time);$/;"	p	class:Timer	access:public	signature:(u32 time)
setTime	source/system/Timer.cpp	/^void Timer::setTime(u32 time) {$/;"	f	class:Timer	signature:(u32 time)
setVelocity	include/mapObjects/Movable.hpp	/^		void setVelocity(float vx, float vy) { m_vx = vx; m_vy = vy; }$/;"	f	class:Movable	access:public	signature:(float vx, float vy)
start	include/system/Timer.hpp	/^		void start();$/;"	p	class:Timer	access:public	signature:()
start	source/system/Timer.cpp	/^void Timer::start() {$/;"	f	class:Timer	signature:()
startAnimation	include/display/Sprite.hpp	/^		void startAnimation(u16 anim);$/;"	p	class:Sprite	access:public	signature:(u16 anim)
startAnimation	source/display/Sprite.cpp	/^void Sprite::startAnimation(u16 anim) {$/;"	f	class:Sprite	signature:(u16 anim)
stop	include/system/Timer.hpp	/^		void stop();$/;"	p	class:Timer	access:public	signature:()
stop	source/system/Timer.cpp	/^void Timer::stop() {$/;"	f	class:Timer	signature:()
stopAnimation	include/display/Sprite.hpp	/^		void stopAnimation(u16 anim);$/;"	p	class:Sprite	access:public	signature:(u16 anim)
stopAnimation	source/display/Sprite.cpp	/^void Sprite::stopAnimation(u16 anim) {$/;"	f	class:Sprite	signature:(u16 anim)
textColor	include/core/Debug.hpp	/^	inline std::string textColor(u8 color = TextColor::White, bool bold = false) {$/;"	f	namespace:Debug	signature:(u8 color = TextColor::White, bool bold = false)
texture	include/display/Tileset.hpp	/^		sf::Texture &texture() { return m_texture; }$/;"	f	class:Tileset	access:public	signature:()
ticks	include/system/GameClock.hpp	/^		static u32 ticks;$/;"	m	class:GameClock	access:private
ticks	source/system/GameClock.cpp	/^u32 GameClock::ticks = 0;$/;"	m	class:GameClock	file:
tileX	include/display/AnimatedTile.hpp	/^	u16 tileX;$/;"	m	struct:AnimatedTile	access:public
tileY	include/display/AnimatedTile.hpp	/^	u16 tileY;$/;"	m	struct:AnimatedTile	access:public
time	include/system/Timer.hpp	/^		u32 time();$/;"	p	class:Timer	access:public	signature:()
time	source/system/Timer.cpp	/^u32 Timer::time() {$/;"	f	class:Timer	signature:()
timer	include/display/AnimatedTile.hpp	/^	Timer timer;$/;"	m	struct:AnimatedTile	access:public
timer	include/display/SpriteAnimation.hpp	/^	Timer timer;$/;"	m	struct:SpriteAnimation	access:public
tinyxml2	external/tinyxml2.cpp	/^namespace tinyxml2$/;"	n	file:
tinyxml2	external/tinyxml2.hpp	/^namespace tinyxml2$/;"	n
tinyxml2::COLLAPSE_WHITESPACE	external/tinyxml2.hpp	/^    COLLAPSE_WHITESPACE$/;"	e	enum:tinyxml2::Whitespace
tinyxml2::DynArray	external/tinyxml2.hpp	/^class DynArray$/;"	c	namespace:tinyxml2
tinyxml2::DynArray::Capacity	external/tinyxml2.hpp	/^    int Capacity() const				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::Clear	external/tinyxml2.hpp	/^    void Clear() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::DynArray::DynArray	external/tinyxml2.hpp	/^    DynArray< T, INIT >() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::DynArray::Empty	external/tinyxml2.hpp	/^    bool Empty() const					{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::EnsureCapacity	external/tinyxml2.hpp	/^    void EnsureCapacity( int cap ) {$/;"	f	class:tinyxml2::DynArray	access:private	signature:( int cap )
tinyxml2::DynArray::Mem	external/tinyxml2.hpp	/^    T* Mem()							{$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::DynArray::Mem	external/tinyxml2.hpp	/^    const T* Mem() const				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::PeekTop	external/tinyxml2.hpp	/^    const T& PeekTop() const                            {$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::Pop	external/tinyxml2.hpp	/^    T Pop() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::DynArray::PopArr	external/tinyxml2.hpp	/^    void PopArr( int count ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( int count )
tinyxml2::DynArray::Push	external/tinyxml2.hpp	/^    void Push( T t ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( T t )
tinyxml2::DynArray::PushArr	external/tinyxml2.hpp	/^    T* PushArr( int count ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( int count )
tinyxml2::DynArray::Size	external/tinyxml2.hpp	/^    int Size() const					{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::_allocated	external/tinyxml2.hpp	/^    int _allocated;		\/\/ objects allocated$/;"	m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::_mem	external/tinyxml2.hpp	/^    T*  _mem;$/;"	m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::_pool	external/tinyxml2.hpp	/^    T   _pool[INIT];$/;"	m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::_size	external/tinyxml2.hpp	/^    int _size;			\/\/ number objects in use$/;"	m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::operator []	external/tinyxml2.hpp	/^    T& operator[](int i)				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:(int i)
tinyxml2::DynArray::operator []	external/tinyxml2.hpp	/^    const T& operator[](int i) const	{$/;"	f	class:tinyxml2::DynArray	access:public	signature:(int i) const
tinyxml2::DynArray::~DynArray	external/tinyxml2.hpp	/^    ~DynArray() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::Entity	external/tinyxml2.cpp	/^struct Entity {$/;"	s	namespace:tinyxml2	file:
tinyxml2::Entity::length	external/tinyxml2.cpp	/^    int length;$/;"	m	struct:tinyxml2::Entity	file:	access:public
tinyxml2::Entity::pattern	external/tinyxml2.cpp	/^    const char* pattern;$/;"	m	struct:tinyxml2::Entity	file:	access:public
tinyxml2::Entity::value	external/tinyxml2.cpp	/^    char value;$/;"	m	struct:tinyxml2::Entity	file:	access:public
tinyxml2::MemPool	external/tinyxml2.hpp	/^class MemPool$/;"	c	namespace:tinyxml2
tinyxml2::MemPool::Alloc	external/tinyxml2.hpp	/^    virtual void* Alloc() = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPool::Free	external/tinyxml2.hpp	/^    virtual void Free( void* ) = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:( void* )
tinyxml2::MemPool::ItemSize	external/tinyxml2.hpp	/^    virtual int ItemSize() const = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:() const
tinyxml2::MemPool::MemPool	external/tinyxml2.hpp	/^    MemPool() {}$/;"	f	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPool::SetTracked	external/tinyxml2.hpp	/^    virtual void SetTracked() = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPool::~MemPool	external/tinyxml2.hpp	/^    virtual ~MemPool() {}$/;"	f	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPoolT	external/tinyxml2.hpp	/^class MemPoolT : public MemPool$/;"	c	namespace:tinyxml2	inherits:MemPool
tinyxml2::MemPoolT::Alloc	external/tinyxml2.hpp	/^    virtual void* Alloc() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::MemPoolT::Block	external/tinyxml2.hpp	/^    struct Block {$/;"	s	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::Block::chunk	external/tinyxml2.hpp	/^        Chunk chunk[COUNT];$/;"	m	struct:tinyxml2::MemPoolT::Block	access:public
tinyxml2::MemPoolT::COUNT	external/tinyxml2.hpp	/^    enum { COUNT = (4*1024)\/SIZE }; \/\/ Some compilers do not accept to use COUNT in private part if COUNT is private$/;"	e	enum:tinyxml2::MemPoolT::__anon3
tinyxml2::MemPoolT::Chunk	external/tinyxml2.hpp	/^    union Chunk {$/;"	u	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::Chunk::mem	external/tinyxml2.hpp	/^        char    mem[SIZE];$/;"	m	union:tinyxml2::MemPoolT::Chunk	access:public
tinyxml2::MemPoolT::Chunk::next	external/tinyxml2.hpp	/^        Chunk*  next;$/;"	m	union:tinyxml2::MemPoolT::Chunk	access:public
tinyxml2::MemPoolT::CurrentAllocs	external/tinyxml2.hpp	/^    int CurrentAllocs() const		{$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
tinyxml2::MemPoolT::Free	external/tinyxml2.hpp	/^    virtual void Free( void* mem ) {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:( void* mem )
tinyxml2::MemPoolT::ItemSize	external/tinyxml2.hpp	/^    virtual int ItemSize() const	{$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
tinyxml2::MemPoolT::MemPoolT	external/tinyxml2.hpp	/^    MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::MemPoolT::SetTracked	external/tinyxml2.hpp	/^    void SetTracked() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::MemPoolT::Trace	external/tinyxml2.hpp	/^    void Trace( const char* name ) {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:( const char* name )
tinyxml2::MemPoolT::Untracked	external/tinyxml2.hpp	/^    int Untracked() const {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
tinyxml2::MemPoolT::_blockPtrs	external/tinyxml2.hpp	/^    DynArray< Block*, 10 > _blockPtrs;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_currentAllocs	external/tinyxml2.hpp	/^    int _currentAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_maxAllocs	external/tinyxml2.hpp	/^    int _maxAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_nAllocs	external/tinyxml2.hpp	/^    int _nAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_nUntracked	external/tinyxml2.hpp	/^    int _nUntracked;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_root	external/tinyxml2.hpp	/^    Chunk* _root;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::~MemPoolT	external/tinyxml2.hpp	/^    ~MemPoolT() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::NUM_ENTITIES	external/tinyxml2.cpp	/^static const int NUM_ENTITIES = 5;$/;"	m	namespace:tinyxml2	file:
tinyxml2::PRESERVE_WHITESPACE	external/tinyxml2.hpp	/^    PRESERVE_WHITESPACE,$/;"	e	enum:tinyxml2::Whitespace
tinyxml2::StrPair	external/tinyxml2.hpp	/^class StrPair$/;"	c	namespace:tinyxml2
tinyxml2::StrPair::ATTRIBUTE_NAME	external/tinyxml2.hpp	/^        ATTRIBUTE_NAME		            	= 0,$/;"	e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::ATTRIBUTE_VALUE	external/tinyxml2.hpp	/^        ATTRIBUTE_VALUE		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::ATTRIBUTE_VALUE_LEAVE_ENTITIES	external/tinyxml2.hpp	/^        ATTRIBUTE_VALUE_LEAVE_ENTITIES  	= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::COLLAPSE_WHITESPACE	external/tinyxml2.hpp	/^        COLLAPSE_WHITESPACE	                = 0x04,$/;"	e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::COMMENT	external/tinyxml2.hpp	/^        COMMENT				        = NEEDS_NEWLINE_NORMALIZATION$/;"	e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::CollapseWhitespace	external/tinyxml2.cpp	/^void StrPair::CollapseWhitespace()$/;"	f	class:tinyxml2::StrPair	signature:()
tinyxml2::StrPair::CollapseWhitespace	external/tinyxml2.hpp	/^    void CollapseWhitespace();$/;"	p	class:tinyxml2::StrPair	access:private	signature:()
tinyxml2::StrPair::Empty	external/tinyxml2.hpp	/^    bool Empty() const {$/;"	f	class:tinyxml2::StrPair	access:public	signature:() const
tinyxml2::StrPair::GetStr	external/tinyxml2.cpp	/^const char* StrPair::GetStr()$/;"	f	class:tinyxml2::StrPair	signature:()
tinyxml2::StrPair::GetStr	external/tinyxml2.hpp	/^    const char* GetStr();$/;"	p	class:tinyxml2::StrPair	access:public	signature:()
tinyxml2::StrPair::NEEDS_DELETE	external/tinyxml2.hpp	/^        NEEDS_DELETE = 0x200$/;"	e	enum:tinyxml2::StrPair::__anon2
tinyxml2::StrPair::NEEDS_ENTITY_PROCESSING	external/tinyxml2.hpp	/^        NEEDS_ENTITY_PROCESSING			= 0x01,$/;"	e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::NEEDS_FLUSH	external/tinyxml2.hpp	/^        NEEDS_FLUSH = 0x100,$/;"	e	enum:tinyxml2::StrPair::__anon2
tinyxml2::StrPair::NEEDS_NEWLINE_NORMALIZATION	external/tinyxml2.hpp	/^        NEEDS_NEWLINE_NORMALIZATION		= 0x02,$/;"	e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::ParseName	external/tinyxml2.cpp	/^char* StrPair::ParseName( char* p )$/;"	f	class:tinyxml2::StrPair	signature:( char* p )
tinyxml2::StrPair::ParseName	external/tinyxml2.hpp	/^    char* ParseName( char* in );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( char* in )
tinyxml2::StrPair::ParseText	external/tinyxml2.cpp	/^char* StrPair::ParseText( char* p, const char* endTag, int strFlags )$/;"	f	class:tinyxml2::StrPair	signature:( char* p, const char* endTag, int strFlags )
tinyxml2::StrPair::ParseText	external/tinyxml2.hpp	/^    char* ParseText( char* in, const char* endTag, int strFlags );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( char* in, const char* endTag, int strFlags )
tinyxml2::StrPair::Reset	external/tinyxml2.cpp	/^void StrPair::Reset()$/;"	f	class:tinyxml2::StrPair	signature:()
tinyxml2::StrPair::Reset	external/tinyxml2.hpp	/^    void Reset();$/;"	p	class:tinyxml2::StrPair	access:private	signature:()
tinyxml2::StrPair::Set	external/tinyxml2.hpp	/^    void Set( char* start, char* end, int flags ) {$/;"	f	class:tinyxml2::StrPair	access:public	signature:( char* start, char* end, int flags )
tinyxml2::StrPair::SetInternedStr	external/tinyxml2.hpp	/^    void SetInternedStr( const char* str ) {$/;"	f	class:tinyxml2::StrPair	access:public	signature:( const char* str )
tinyxml2::StrPair::SetStr	external/tinyxml2.cpp	/^void StrPair::SetStr( const char* str, int flags )$/;"	f	class:tinyxml2::StrPair	signature:( const char* str, int flags )
tinyxml2::StrPair::SetStr	external/tinyxml2.hpp	/^    void SetStr( const char* str, int flags=0 );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( const char* str, int flags=0 )
tinyxml2::StrPair::StrPair	external/tinyxml2.hpp	/^    StrPair() : _flags( 0 ), _start( 0 ), _end( 0 ) {}$/;"	f	class:tinyxml2::StrPair	access:public	signature:()
tinyxml2::StrPair::TEXT_ELEMENT	external/tinyxml2.hpp	/^        TEXT_ELEMENT		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::TEXT_ELEMENT_LEAVE_ENTITIES	external/tinyxml2.hpp	/^        TEXT_ELEMENT_LEAVE_ENTITIES		= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
tinyxml2::StrPair::_end	external/tinyxml2.hpp	/^    char*   _end;$/;"	m	class:tinyxml2::StrPair	access:private
tinyxml2::StrPair::_flags	external/tinyxml2.hpp	/^    int     _flags;$/;"	m	class:tinyxml2::StrPair	access:private
tinyxml2::StrPair::_start	external/tinyxml2.hpp	/^    char*   _start;$/;"	m	class:tinyxml2::StrPair	access:private
tinyxml2::StrPair::~StrPair	external/tinyxml2.cpp	/^StrPair::~StrPair()$/;"	f	class:tinyxml2::StrPair	signature:()
tinyxml2::StrPair::~StrPair	external/tinyxml2.hpp	/^    ~StrPair();$/;"	p	class:tinyxml2::StrPair	access:public	signature:()
tinyxml2::Whitespace	external/tinyxml2.hpp	/^enum Whitespace {$/;"	g	namespace:tinyxml2
tinyxml2::XMLAttribute	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLAttribute$/;"	c	namespace:tinyxml2
tinyxml2::XMLAttribute::BUF_SIZE	external/tinyxml2.hpp	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLAttribute::__anon4
tinyxml2::XMLAttribute::BoolValue	external/tinyxml2.hpp	/^    bool	 BoolValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::DoubleValue	external/tinyxml2.hpp	/^    double 	 DoubleValue() const			{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::FloatValue	external/tinyxml2.hpp	/^    float	 FloatValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::IntValue	external/tinyxml2.hpp	/^    int		 IntValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::Name	external/tinyxml2.cpp	/^const char* XMLAttribute::Name() const $/;"	f	class:tinyxml2::XMLAttribute	signature:() const
tinyxml2::XMLAttribute::Name	external/tinyxml2.hpp	/^    const char* Name() const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::Next	external/tinyxml2.hpp	/^    const XMLAttribute* Next() const {$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::ParseDeep	external/tinyxml2.cpp	/^char* XMLAttribute::ParseDeep( char* p, bool processEntities )$/;"	f	class:tinyxml2::XMLAttribute	signature:( char* p, bool processEntities )
tinyxml2::XMLAttribute::ParseDeep	external/tinyxml2.hpp	/^    char* ParseDeep( char* p, bool processEntities );$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( char* p, bool processEntities )
tinyxml2::XMLAttribute::QueryBoolValue	external/tinyxml2.cpp	/^XMLError XMLAttribute::QueryBoolValue( bool* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( bool* value ) const
tinyxml2::XMLAttribute::QueryBoolValue	external/tinyxml2.hpp	/^    XMLError QueryBoolValue( bool* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( bool* value ) const
tinyxml2::XMLAttribute::QueryDoubleValue	external/tinyxml2.cpp	/^XMLError XMLAttribute::QueryDoubleValue( double* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( double* value ) const
tinyxml2::XMLAttribute::QueryDoubleValue	external/tinyxml2.hpp	/^    XMLError QueryDoubleValue( double* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( double* value ) const
tinyxml2::XMLAttribute::QueryFloatValue	external/tinyxml2.cpp	/^XMLError XMLAttribute::QueryFloatValue( float* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( float* value ) const
tinyxml2::XMLAttribute::QueryFloatValue	external/tinyxml2.hpp	/^    XMLError QueryFloatValue( float* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( float* value ) const
tinyxml2::XMLAttribute::QueryIntValue	external/tinyxml2.cpp	/^XMLError XMLAttribute::QueryIntValue( int* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( int* value ) const
tinyxml2::XMLAttribute::QueryIntValue	external/tinyxml2.hpp	/^    XMLError QueryIntValue( int* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( int* value ) const
tinyxml2::XMLAttribute::QueryUnsignedValue	external/tinyxml2.cpp	/^XMLError XMLAttribute::QueryUnsignedValue( unsigned int* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( unsigned int* value ) const
tinyxml2::XMLAttribute::QueryUnsignedValue	external/tinyxml2.hpp	/^    XMLError QueryUnsignedValue( unsigned int* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned int* value ) const
tinyxml2::XMLAttribute::SetAttribute	external/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( bool v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( bool v )
tinyxml2::XMLAttribute::SetAttribute	external/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( const char* v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( const char* v )
tinyxml2::XMLAttribute::SetAttribute	external/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( double v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( double v )
tinyxml2::XMLAttribute::SetAttribute	external/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( float v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( float v )
tinyxml2::XMLAttribute::SetAttribute	external/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( int v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( int v )
tinyxml2::XMLAttribute::SetAttribute	external/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( unsigned v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( unsigned v )
tinyxml2::XMLAttribute::SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( bool value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( bool value )
tinyxml2::XMLAttribute::SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( const char* value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( const char* value )
tinyxml2::XMLAttribute::SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( double value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( double value )
tinyxml2::XMLAttribute::SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( float value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( float value )
tinyxml2::XMLAttribute::SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( int value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( int value )
tinyxml2::XMLAttribute::SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( unsigned value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned value )
tinyxml2::XMLAttribute::SetName	external/tinyxml2.cpp	/^void XMLAttribute::SetName( const char* n )$/;"	f	class:tinyxml2::XMLAttribute	signature:( const char* n )
tinyxml2::XMLAttribute::SetName	external/tinyxml2.hpp	/^    void SetName( const char* name );$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const char* name )
tinyxml2::XMLAttribute::UnsignedValue	external/tinyxml2.hpp	/^    unsigned UnsignedValue() const			{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::Value	external/tinyxml2.cpp	/^const char* XMLAttribute::Value() const $/;"	f	class:tinyxml2::XMLAttribute	signature:() const
tinyxml2::XMLAttribute::Value	external/tinyxml2.hpp	/^    const char* Value() const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::XMLAttribute	external/tinyxml2.hpp	/^    XMLAttribute( const XMLAttribute& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
tinyxml2::XMLAttribute::XMLAttribute	external/tinyxml2.hpp	/^    XMLAttribute() : _next( 0 ), _memPool( 0 ) {}$/;"	f	class:tinyxml2::XMLAttribute	access:private	signature:()
tinyxml2::XMLAttribute::_memPool	external/tinyxml2.hpp	/^    MemPool*        _memPool;$/;"	m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::_name	external/tinyxml2.hpp	/^    mutable StrPair _name;$/;"	m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::_next	external/tinyxml2.hpp	/^    XMLAttribute*   _next;$/;"	m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::_value	external/tinyxml2.hpp	/^    mutable StrPair _value;$/;"	m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::operator =	external/tinyxml2.hpp	/^    void operator=( const XMLAttribute& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
tinyxml2::XMLAttribute::~XMLAttribute	external/tinyxml2.hpp	/^    virtual ~XMLAttribute()	{}$/;"	f	class:tinyxml2::XMLAttribute	access:private	signature:()
tinyxml2::XMLComment	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLComment : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLComment::Accept	external/tinyxml2.cpp	/^bool XMLComment::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLComment	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLComment::Accept	external/tinyxml2.hpp	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLComment::ParseDeep	external/tinyxml2.cpp	/^char* XMLComment::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLComment	signature:( char* p, StrPair* )
tinyxml2::XMLComment::ParseDeep	external/tinyxml2.hpp	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( char*, StrPair* endTag )
tinyxml2::XMLComment::ShallowClone	external/tinyxml2.cpp	/^XMLNode* XMLComment::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLComment	signature:( XMLDocument* doc ) const
tinyxml2::XMLComment::ShallowClone	external/tinyxml2.hpp	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLComment::ShallowEqual	external/tinyxml2.cpp	/^bool XMLComment::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLComment	signature:( const XMLNode* compare ) const
tinyxml2::XMLComment::ShallowEqual	external/tinyxml2.hpp	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLComment::ToComment	external/tinyxml2.hpp	/^    virtual XMLComment*	ToComment()					{$/;"	f	class:tinyxml2::XMLComment	access:public	signature:()
tinyxml2::XMLComment::ToComment	external/tinyxml2.hpp	/^    virtual const XMLComment* ToComment() const		{$/;"	f	class:tinyxml2::XMLComment	access:public	signature:() const
tinyxml2::XMLComment::XMLComment	external/tinyxml2.cpp	/^XMLComment::XMLComment( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLComment	signature:( XMLDocument* doc )
tinyxml2::XMLComment::XMLComment	external/tinyxml2.hpp	/^    XMLComment( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLComment::XMLComment	external/tinyxml2.hpp	/^    XMLComment( const XMLComment& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( const XMLComment& )
tinyxml2::XMLComment::operator =	external/tinyxml2.hpp	/^    XMLComment& operator=( const XMLComment& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( const XMLComment& )
tinyxml2::XMLComment::~XMLComment	external/tinyxml2.cpp	/^XMLComment::~XMLComment()$/;"	f	class:tinyxml2::XMLComment	signature:()
tinyxml2::XMLComment::~XMLComment	external/tinyxml2.hpp	/^    virtual ~XMLComment();$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:()
tinyxml2::XMLConstHandle	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLConstHandle$/;"	c	namespace:tinyxml2
tinyxml2::XMLConstHandle::FirstChild	external/tinyxml2.hpp	/^    const XMLConstHandle FirstChild() const											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::FirstChildElement	external/tinyxml2.hpp	/^    const XMLConstHandle FirstChildElement( const char* value=0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* value=0 ) const
tinyxml2::XMLConstHandle::LastChild	external/tinyxml2.hpp	/^    const XMLConstHandle LastChild()	const										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::LastChildElement	external/tinyxml2.hpp	/^    const XMLConstHandle LastChildElement( const char* _value=0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value=0 ) const
tinyxml2::XMLConstHandle::NextSibling	external/tinyxml2.hpp	/^    const XMLConstHandle NextSibling() const										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::NextSiblingElement	external/tinyxml2.hpp	/^    const XMLConstHandle NextSiblingElement( const char* _value=0 ) const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value=0 ) const
tinyxml2::XMLConstHandle::PreviousSibling	external/tinyxml2.hpp	/^    const XMLConstHandle PreviousSibling() const									{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::PreviousSiblingElement	external/tinyxml2.hpp	/^    const XMLConstHandle PreviousSiblingElement( const char* _value=0 ) const		{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value=0 ) const
tinyxml2::XMLConstHandle::ToDeclaration	external/tinyxml2.hpp	/^    const XMLDeclaration* ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToElement	external/tinyxml2.hpp	/^    const XMLElement* ToElement() const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToNode	external/tinyxml2.hpp	/^    const XMLNode* ToNode() const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToText	external/tinyxml2.hpp	/^    const XMLText* ToText() const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToUnknown	external/tinyxml2.hpp	/^    const XMLUnknown* ToUnknown() const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::XMLConstHandle	external/tinyxml2.hpp	/^    XMLConstHandle( const XMLConstHandle& ref )										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
tinyxml2::XMLConstHandle::XMLConstHandle	external/tinyxml2.hpp	/^    XMLConstHandle( const XMLNode& node )											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode& node )
tinyxml2::XMLConstHandle::XMLConstHandle	external/tinyxml2.hpp	/^    XMLConstHandle( const XMLNode* node )											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode* node )
tinyxml2::XMLConstHandle::_node	external/tinyxml2.hpp	/^    const XMLNode* _node;$/;"	m	class:tinyxml2::XMLConstHandle	access:private
tinyxml2::XMLConstHandle::operator =	external/tinyxml2.hpp	/^    XMLConstHandle& operator=( const XMLConstHandle& ref )							{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
tinyxml2::XMLDeclaration	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLDeclaration : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLDeclaration::Accept	external/tinyxml2.cpp	/^bool XMLDeclaration::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLDeclaration::Accept	external/tinyxml2.hpp	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLDeclaration::ParseDeep	external/tinyxml2.cpp	/^char* XMLDeclaration::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLDeclaration	signature:( char* p, StrPair* )
tinyxml2::XMLDeclaration::ParseDeep	external/tinyxml2.hpp	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( char*, StrPair* endTag )
tinyxml2::XMLDeclaration::ShallowClone	external/tinyxml2.cpp	/^XMLNode* XMLDeclaration::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLDocument* doc ) const
tinyxml2::XMLDeclaration::ShallowClone	external/tinyxml2.hpp	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLDeclaration::ShallowEqual	external/tinyxml2.cpp	/^bool XMLDeclaration::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( const XMLNode* compare ) const
tinyxml2::XMLDeclaration::ShallowEqual	external/tinyxml2.hpp	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLDeclaration::ToDeclaration	external/tinyxml2.hpp	/^    virtual XMLDeclaration*	ToDeclaration()					{$/;"	f	class:tinyxml2::XMLDeclaration	access:public	signature:()
tinyxml2::XMLDeclaration::ToDeclaration	external/tinyxml2.hpp	/^    virtual const XMLDeclaration* ToDeclaration() const		{$/;"	f	class:tinyxml2::XMLDeclaration	access:public	signature:() const
tinyxml2::XMLDeclaration::XMLDeclaration	external/tinyxml2.cpp	/^XMLDeclaration::XMLDeclaration( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLDocument* doc )
tinyxml2::XMLDeclaration::XMLDeclaration	external/tinyxml2.hpp	/^    XMLDeclaration( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLDeclaration::XMLDeclaration	external/tinyxml2.hpp	/^    XMLDeclaration( const XMLDeclaration& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( const XMLDeclaration& )
tinyxml2::XMLDeclaration::operator =	external/tinyxml2.hpp	/^    XMLDeclaration& operator=( const XMLDeclaration& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( const XMLDeclaration& )
tinyxml2::XMLDeclaration::~XMLDeclaration	external/tinyxml2.cpp	/^XMLDeclaration::~XMLDeclaration()$/;"	f	class:tinyxml2::XMLDeclaration	signature:()
tinyxml2::XMLDeclaration::~XMLDeclaration	external/tinyxml2.hpp	/^    virtual ~XMLDeclaration();$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:()
tinyxml2::XMLDocument	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLDocument : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLDocument::Accept	external/tinyxml2.cpp	/^bool XMLDocument::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLDocument::Accept	external/tinyxml2.hpp	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLDocument::Clear	external/tinyxml2.cpp	/^void XMLDocument::Clear()$/;"	f	class:tinyxml2::XMLDocument	signature:()
tinyxml2::XMLDocument::Clear	external/tinyxml2.hpp	/^    void Clear();$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:()
tinyxml2::XMLDocument::DeleteNode	external/tinyxml2.hpp	/^    void DeleteNode( XMLNode* node )	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( XMLNode* node )
tinyxml2::XMLDocument::Error	external/tinyxml2.hpp	/^    bool Error() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::ErrorID	external/tinyxml2.hpp	/^    XMLError  ErrorID() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::GetErrorStr1	external/tinyxml2.hpp	/^    const char* GetErrorStr1() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::GetErrorStr2	external/tinyxml2.hpp	/^    const char* GetErrorStr2() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::HasBOM	external/tinyxml2.hpp	/^    bool HasBOM() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::Identify	external/tinyxml2.cpp	/^char* XMLDocument::Identify( char* p, XMLNode** node )$/;"	f	class:tinyxml2::XMLDocument	signature:( char* p, XMLNode** node )
tinyxml2::XMLDocument::Identify	external/tinyxml2.hpp	/^    char* Identify( char* p, XMLNode** node );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( char* p, XMLNode** node )
tinyxml2::XMLDocument::LoadFile	external/tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( FILE* fp )$/;"	f	class:tinyxml2::XMLDocument	signature:( FILE* fp )
tinyxml2::XMLDocument::LoadFile	external/tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( const char* filename )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* filename )
tinyxml2::XMLDocument::LoadFile	external/tinyxml2.hpp	/^    XMLError LoadFile( FILE* );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* )
tinyxml2::XMLDocument::LoadFile	external/tinyxml2.hpp	/^    XMLError LoadFile( const char* filename );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename )
tinyxml2::XMLDocument::NewComment	external/tinyxml2.cpp	/^XMLComment* XMLDocument::NewComment( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
tinyxml2::XMLDocument::NewComment	external/tinyxml2.hpp	/^    XMLComment* NewComment( const char* comment );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* comment )
tinyxml2::XMLDocument::NewDeclaration	external/tinyxml2.cpp	/^XMLDeclaration* XMLDocument::NewDeclaration( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
tinyxml2::XMLDocument::NewDeclaration	external/tinyxml2.hpp	/^    XMLDeclaration* NewDeclaration( const char* text=0 );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text=0 )
tinyxml2::XMLDocument::NewElement	external/tinyxml2.cpp	/^XMLElement* XMLDocument::NewElement( const char* name )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* name )
tinyxml2::XMLDocument::NewElement	external/tinyxml2.hpp	/^    XMLElement* NewElement( const char* name );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* name )
tinyxml2::XMLDocument::NewText	external/tinyxml2.cpp	/^XMLText* XMLDocument::NewText( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
tinyxml2::XMLDocument::NewText	external/tinyxml2.hpp	/^    XMLText* NewText( const char* text );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
tinyxml2::XMLDocument::NewUnknown	external/tinyxml2.cpp	/^XMLUnknown* XMLDocument::NewUnknown( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
tinyxml2::XMLDocument::NewUnknown	external/tinyxml2.hpp	/^    XMLUnknown* NewUnknown( const char* text );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
tinyxml2::XMLDocument::Parse	external/tinyxml2.cpp	/^XMLError XMLDocument::Parse( const char* p, size_t len )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* p, size_t len )
tinyxml2::XMLDocument::Parse	external/tinyxml2.hpp	/^    XMLError Parse( const char* xml, size_t nBytes=(size_t)(-1) );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* xml, size_t nBytes=(size_t)(-1) )
tinyxml2::XMLDocument::Print	external/tinyxml2.cpp	/^void XMLDocument::Print( XMLPrinter* streamer ) const$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLPrinter* streamer ) const
tinyxml2::XMLDocument::Print	external/tinyxml2.hpp	/^    void Print( XMLPrinter* streamer=0 ) const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLPrinter* streamer=0 ) const
tinyxml2::XMLDocument::PrintError	external/tinyxml2.cpp	/^void XMLDocument::PrintError() const$/;"	f	class:tinyxml2::XMLDocument	signature:() const
tinyxml2::XMLDocument::PrintError	external/tinyxml2.hpp	/^    void PrintError() const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::ProcessEntities	external/tinyxml2.hpp	/^    bool ProcessEntities() const		{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::RootElement	external/tinyxml2.hpp	/^    XMLElement* RootElement()				{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:()
tinyxml2::XMLDocument::RootElement	external/tinyxml2.hpp	/^    const XMLElement* RootElement() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::SaveFile	external/tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( FILE* fp, bool compact )$/;"	f	class:tinyxml2::XMLDocument	signature:( FILE* fp, bool compact )
tinyxml2::XMLDocument::SaveFile	external/tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( const char* filename, bool compact )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* filename, bool compact )
tinyxml2::XMLDocument::SaveFile	external/tinyxml2.hpp	/^    XMLError SaveFile( FILE* fp, bool compact = false );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* fp, bool compact = false )
tinyxml2::XMLDocument::SaveFile	external/tinyxml2.hpp	/^    XMLError SaveFile( const char* filename, bool compact = false );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename, bool compact = false )
tinyxml2::XMLDocument::SetBOM	external/tinyxml2.hpp	/^    void SetBOM( bool useBOM ) {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( bool useBOM )
tinyxml2::XMLDocument::SetError	external/tinyxml2.cpp	/^void XMLDocument::SetError( XMLError error, const char* str1, const char* str2 )$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLError error, const char* str1, const char* str2 )
tinyxml2::XMLDocument::SetError	external/tinyxml2.hpp	/^    void SetError( XMLError error, const char* str1, const char* str2 );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLError error, const char* str1, const char* str2 )
tinyxml2::XMLDocument::ShallowClone	external/tinyxml2.hpp	/^    virtual XMLNode* ShallowClone( XMLDocument* \/*document*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( XMLDocument* ) const
tinyxml2::XMLDocument::ShallowEqual	external/tinyxml2.hpp	/^    virtual bool ShallowEqual( const XMLNode* \/*compare*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( const XMLNode* ) const
tinyxml2::XMLDocument::ToDocument	external/tinyxml2.hpp	/^    virtual XMLDocument* ToDocument()				{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:()
tinyxml2::XMLDocument::ToDocument	external/tinyxml2.hpp	/^    virtual const XMLDocument* ToDocument() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::WhitespaceMode	external/tinyxml2.hpp	/^    Whitespace WhitespaceMode() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::XMLDocument	external/tinyxml2.cpp	/^XMLDocument::XMLDocument( bool processEntities, Whitespace whitespace ) :$/;"	f	class:tinyxml2::XMLDocument	signature:( bool processEntities, Whitespace whitespace )
tinyxml2::XMLDocument::XMLDocument	external/tinyxml2.hpp	/^    XMLDocument( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE )
tinyxml2::XMLDocument::XMLDocument	external/tinyxml2.hpp	/^    XMLDocument( const XMLDocument& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
tinyxml2::XMLDocument::_attributePool	external/tinyxml2.hpp	/^    MemPoolT< sizeof(XMLAttribute) > _attributePool;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_charBuffer	external/tinyxml2.hpp	/^    char*       _charBuffer;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_commentPool	external/tinyxml2.hpp	/^    MemPoolT< sizeof(XMLComment) >	 _commentPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_elementPool	external/tinyxml2.hpp	/^    MemPoolT< sizeof(XMLElement) >	 _elementPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_errorID	external/tinyxml2.hpp	/^    XMLError    _errorID;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_errorStr1	external/tinyxml2.hpp	/^    const char* _errorStr1;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_errorStr2	external/tinyxml2.hpp	/^    const char* _errorStr2;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_processEntities	external/tinyxml2.hpp	/^    bool        _processEntities;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_textPool	external/tinyxml2.hpp	/^    MemPoolT< sizeof(XMLText) >		 _textPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_whitespace	external/tinyxml2.hpp	/^    Whitespace  _whitespace;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_writeBOM	external/tinyxml2.hpp	/^    bool        _writeBOM;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::operator =	external/tinyxml2.hpp	/^    void operator=( const XMLDocument& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
tinyxml2::XMLDocument::~XMLDocument	external/tinyxml2.cpp	/^XMLDocument::~XMLDocument()$/;"	f	class:tinyxml2::XMLDocument	signature:()
tinyxml2::XMLDocument::~XMLDocument	external/tinyxml2.hpp	/^    ~XMLDocument();$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:()
tinyxml2::XMLElement	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLElement : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLElement::Accept	external/tinyxml2.cpp	/^bool XMLElement::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLElement	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLElement::Accept	external/tinyxml2.hpp	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLElement::Attribute	external/tinyxml2.cpp	/^const char* XMLElement::Attribute( const char* name, const char* value ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name, const char* value ) const
tinyxml2::XMLElement::Attribute	external/tinyxml2.hpp	/^    const char* Attribute( const char* name, const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value=0 ) const
tinyxml2::XMLElement::BUF_SIZE	external/tinyxml2.hpp	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLElement::__anon6
tinyxml2::XMLElement::BoolAttribute	external/tinyxml2.hpp	/^    bool	 BoolAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::CLOSED	external/tinyxml2.hpp	/^        CLOSED,		\/\/ <foo\/>$/;"	e	enum:tinyxml2::XMLElement::__anon5
tinyxml2::XMLElement::CLOSING	external/tinyxml2.hpp	/^        CLOSING		\/\/ <\/foo>$/;"	e	enum:tinyxml2::XMLElement::__anon5
tinyxml2::XMLElement::ClosingType	external/tinyxml2.hpp	/^    int ClosingType() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::DeleteAttribute	external/tinyxml2.cpp	/^void XMLElement::DeleteAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
tinyxml2::XMLElement::DeleteAttribute	external/tinyxml2.hpp	/^    void DeleteAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name )
tinyxml2::XMLElement::DoubleAttribute	external/tinyxml2.hpp	/^    double 	 DoubleAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::FindAttribute	external/tinyxml2.cpp	/^XMLAttribute* XMLElement::FindAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
tinyxml2::XMLElement::FindAttribute	external/tinyxml2.cpp	/^const XMLAttribute* XMLElement::FindAttribute( const char* name ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name ) const
tinyxml2::XMLElement::FindAttribute	external/tinyxml2.hpp	/^    XMLAttribute* FindAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
tinyxml2::XMLElement::FindAttribute	external/tinyxml2.hpp	/^    const XMLAttribute* FindAttribute( const char* name ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::FindOrCreateAttribute	external/tinyxml2.cpp	/^XMLAttribute* XMLElement::FindOrCreateAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
tinyxml2::XMLElement::FindOrCreateAttribute	external/tinyxml2.hpp	/^    XMLAttribute* FindOrCreateAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
tinyxml2::XMLElement::FirstAttribute	external/tinyxml2.hpp	/^    const XMLAttribute* FirstAttribute() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::FloatAttribute	external/tinyxml2.hpp	/^    float	 FloatAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::GetText	external/tinyxml2.cpp	/^const char* XMLElement::GetText() const$/;"	f	class:tinyxml2::XMLElement	signature:() const
tinyxml2::XMLElement::GetText	external/tinyxml2.hpp	/^    const char* GetText() const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::IntAttribute	external/tinyxml2.hpp	/^    int		 IntAttribute( const char* name ) const		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::Name	external/tinyxml2.hpp	/^    const char* Name() const		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::OPEN	external/tinyxml2.hpp	/^        OPEN,		\/\/ <foo>$/;"	e	enum:tinyxml2::XMLElement::__anon5
tinyxml2::XMLElement::ParseAttributes	external/tinyxml2.cpp	/^char* XMLElement::ParseAttributes( char* p )$/;"	f	class:tinyxml2::XMLElement	signature:( char* p )
tinyxml2::XMLElement::ParseAttributes	external/tinyxml2.hpp	/^    char* ParseAttributes( char* p );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( char* p )
tinyxml2::XMLElement::ParseDeep	external/tinyxml2.cpp	/^char* XMLElement::ParseDeep( char* p, StrPair* strPair )$/;"	f	class:tinyxml2::XMLElement	signature:( char* p, StrPair* strPair )
tinyxml2::XMLElement::ParseDeep	external/tinyxml2.hpp	/^    char* ParseDeep( char* p, StrPair* endTag );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( char* p, StrPair* endTag )
tinyxml2::XMLElement::QueryAttribute	external/tinyxml2.hpp	/^	int QueryAttribute( const char* name, bool* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool* value ) const
tinyxml2::XMLElement::QueryAttribute	external/tinyxml2.hpp	/^	int QueryAttribute( const char* name, double* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double* value ) const
tinyxml2::XMLElement::QueryAttribute	external/tinyxml2.hpp	/^	int QueryAttribute( const char* name, float* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float* value ) const
tinyxml2::XMLElement::QueryAttribute	external/tinyxml2.hpp	/^	int QueryAttribute( const char* name, int* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int* value ) const
tinyxml2::XMLElement::QueryAttribute	external/tinyxml2.hpp	/^	int QueryAttribute( const char* name, unsigned int* value ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned int* value ) const
tinyxml2::XMLElement::QueryBoolAttribute	external/tinyxml2.hpp	/^    XMLError QueryBoolAttribute( const char* name, bool* value ) const				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool* value ) const
tinyxml2::XMLElement::QueryBoolText	external/tinyxml2.cpp	/^XMLError XMLElement::QueryBoolText( bool* bval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( bool* bval ) const
tinyxml2::XMLElement::QueryBoolText	external/tinyxml2.hpp	/^    XMLError QueryBoolText( bool* bval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( bool* bval ) const
tinyxml2::XMLElement::QueryDoubleAttribute	external/tinyxml2.hpp	/^    XMLError QueryDoubleAttribute( const char* name, double* value ) const			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double* value ) const
tinyxml2::XMLElement::QueryDoubleText	external/tinyxml2.cpp	/^XMLError XMLElement::QueryDoubleText( double* dval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( double* dval ) const
tinyxml2::XMLElement::QueryDoubleText	external/tinyxml2.hpp	/^    XMLError QueryDoubleText( double* dval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( double* dval ) const
tinyxml2::XMLElement::QueryFloatAttribute	external/tinyxml2.hpp	/^    XMLError QueryFloatAttribute( const char* name, float* value ) const			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float* value ) const
tinyxml2::XMLElement::QueryFloatText	external/tinyxml2.cpp	/^XMLError XMLElement::QueryFloatText( float* fval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( float* fval ) const
tinyxml2::XMLElement::QueryFloatText	external/tinyxml2.hpp	/^    XMLError QueryFloatText( float* fval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( float* fval ) const
tinyxml2::XMLElement::QueryIntAttribute	external/tinyxml2.hpp	/^    XMLError QueryIntAttribute( const char* name, int* value ) const				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int* value ) const
tinyxml2::XMLElement::QueryIntText	external/tinyxml2.cpp	/^XMLError XMLElement::QueryIntText( int* ival ) const$/;"	f	class:tinyxml2::XMLElement	signature:( int* ival ) const
tinyxml2::XMLElement::QueryIntText	external/tinyxml2.hpp	/^    XMLError QueryIntText( int* ival ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( int* ival ) const
tinyxml2::XMLElement::QueryUnsignedAttribute	external/tinyxml2.hpp	/^    XMLError QueryUnsignedAttribute( const char* name, unsigned int* value ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned int* value ) const
tinyxml2::XMLElement::QueryUnsignedText	external/tinyxml2.cpp	/^XMLError XMLElement::QueryUnsignedText( unsigned* uval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( unsigned* uval ) const
tinyxml2::XMLElement::QueryUnsignedText	external/tinyxml2.hpp	/^    XMLError QueryUnsignedText( unsigned* uval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( unsigned* uval ) const
tinyxml2::XMLElement::SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( const char* name, bool value )			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool value )
tinyxml2::XMLElement::SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( const char* name, const char* value )	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value )
tinyxml2::XMLElement::SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( const char* name, double value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double value )
tinyxml2::XMLElement::SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( const char* name, float value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float value )
tinyxml2::XMLElement::SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( const char* name, int value )			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int value )
tinyxml2::XMLElement::SetAttribute	external/tinyxml2.hpp	/^    void SetAttribute( const char* name, unsigned value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned value )
tinyxml2::XMLElement::SetName	external/tinyxml2.hpp	/^    void SetName( const char* str, bool staticMem=false )	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* str, bool staticMem=false )
tinyxml2::XMLElement::SetText	external/tinyxml2.cpp	/^void	XMLElement::SetText( const char* inText )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* inText )
tinyxml2::XMLElement::SetText	external/tinyxml2.cpp	/^void XMLElement::SetText( bool v ) $/;"	f	class:tinyxml2::XMLElement	signature:( bool v )
tinyxml2::XMLElement::SetText	external/tinyxml2.cpp	/^void XMLElement::SetText( double v ) $/;"	f	class:tinyxml2::XMLElement	signature:( double v )
tinyxml2::XMLElement::SetText	external/tinyxml2.cpp	/^void XMLElement::SetText( float v ) $/;"	f	class:tinyxml2::XMLElement	signature:( float v )
tinyxml2::XMLElement::SetText	external/tinyxml2.cpp	/^void XMLElement::SetText( int v ) $/;"	f	class:tinyxml2::XMLElement	signature:( int v )
tinyxml2::XMLElement::SetText	external/tinyxml2.cpp	/^void XMLElement::SetText( unsigned v ) $/;"	f	class:tinyxml2::XMLElement	signature:( unsigned v )
tinyxml2::XMLElement::SetText	external/tinyxml2.hpp	/^	void SetText( const char* inText );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* inText )
tinyxml2::XMLElement::SetText	external/tinyxml2.hpp	/^    void SetText( bool value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( bool value )
tinyxml2::XMLElement::SetText	external/tinyxml2.hpp	/^    void SetText( double value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( double value )
tinyxml2::XMLElement::SetText	external/tinyxml2.hpp	/^    void SetText( float value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( float value )
tinyxml2::XMLElement::SetText	external/tinyxml2.hpp	/^    void SetText( int value );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( int value )
tinyxml2::XMLElement::SetText	external/tinyxml2.hpp	/^    void SetText( unsigned value );  $/;"	p	class:tinyxml2::XMLElement	access:public	signature:( unsigned value )
tinyxml2::XMLElement::ShallowClone	external/tinyxml2.cpp	/^XMLNode* XMLElement::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLElement	signature:( XMLDocument* doc ) const
tinyxml2::XMLElement::ShallowClone	external/tinyxml2.hpp	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLElement::ShallowEqual	external/tinyxml2.cpp	/^bool XMLElement::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const XMLNode* compare ) const
tinyxml2::XMLElement::ShallowEqual	external/tinyxml2.hpp	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLElement::ToElement	external/tinyxml2.hpp	/^    virtual XMLElement* ToElement()				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:()
tinyxml2::XMLElement::ToElement	external/tinyxml2.hpp	/^    virtual const XMLElement* ToElement() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::UnsignedAttribute	external/tinyxml2.hpp	/^    unsigned UnsignedAttribute( const char* name ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::XMLElement	external/tinyxml2.cpp	/^XMLElement::XMLElement( XMLDocument* doc ) : XMLNode( doc ),$/;"	f	class:tinyxml2::XMLElement	signature:( XMLDocument* doc )
tinyxml2::XMLElement::XMLElement	external/tinyxml2.hpp	/^    XMLElement( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( XMLDocument* doc )
tinyxml2::XMLElement::XMLElement	external/tinyxml2.hpp	/^    XMLElement( const XMLElement& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
tinyxml2::XMLElement::_closingType	external/tinyxml2.hpp	/^    int _closingType;$/;"	m	class:tinyxml2::XMLElement	access:private
tinyxml2::XMLElement::_rootAttribute	external/tinyxml2.hpp	/^    XMLAttribute* _rootAttribute;$/;"	m	class:tinyxml2::XMLElement	access:private
tinyxml2::XMLElement::operator =	external/tinyxml2.hpp	/^    void operator=( const XMLElement& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
tinyxml2::XMLElement::~XMLElement	external/tinyxml2.cpp	/^XMLElement::~XMLElement()$/;"	f	class:tinyxml2::XMLElement	signature:()
tinyxml2::XMLElement::~XMLElement	external/tinyxml2.hpp	/^    virtual ~XMLElement();$/;"	p	class:tinyxml2::XMLElement	access:private	signature:()
tinyxml2::XMLError	external/tinyxml2.hpp	/^enum XMLError {$/;"	g	namespace:tinyxml2
tinyxml2::XMLHandle	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLHandle$/;"	c	namespace:tinyxml2
tinyxml2::XMLHandle::FirstChild	external/tinyxml2.hpp	/^    XMLHandle FirstChild() 													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::FirstChildElement	external/tinyxml2.hpp	/^    XMLHandle FirstChildElement( const char* value=0 )						{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* value=0 )
tinyxml2::XMLHandle::LastChild	external/tinyxml2.hpp	/^    XMLHandle LastChild()													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::LastChildElement	external/tinyxml2.hpp	/^    XMLHandle LastChildElement( const char* _value=0 )						{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value=0 )
tinyxml2::XMLHandle::NextSibling	external/tinyxml2.hpp	/^    XMLHandle NextSibling()													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::NextSiblingElement	external/tinyxml2.hpp	/^    XMLHandle NextSiblingElement( const char* _value=0 )					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value=0 )
tinyxml2::XMLHandle::PreviousSibling	external/tinyxml2.hpp	/^    XMLHandle PreviousSibling()												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::PreviousSiblingElement	external/tinyxml2.hpp	/^    XMLHandle PreviousSiblingElement( const char* _value=0 )				{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value=0 )
tinyxml2::XMLHandle::ToDeclaration	external/tinyxml2.hpp	/^    XMLDeclaration* ToDeclaration() 			{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToElement	external/tinyxml2.hpp	/^    XMLElement* ToElement() 					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToNode	external/tinyxml2.hpp	/^    XMLNode* ToNode()							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToText	external/tinyxml2.hpp	/^    XMLText* ToText() 							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToUnknown	external/tinyxml2.hpp	/^    XMLUnknown* ToUnknown() 					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::XMLHandle	external/tinyxml2.hpp	/^    XMLHandle( XMLNode& node )												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode& node )
tinyxml2::XMLHandle::XMLHandle	external/tinyxml2.hpp	/^    XMLHandle( XMLNode* node )												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode* node )
tinyxml2::XMLHandle::XMLHandle	external/tinyxml2.hpp	/^    XMLHandle( const XMLHandle& ref )										{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
tinyxml2::XMLHandle::_node	external/tinyxml2.hpp	/^    XMLNode* _node;$/;"	m	class:tinyxml2::XMLHandle	access:private
tinyxml2::XMLHandle::operator =	external/tinyxml2.hpp	/^    XMLHandle& operator=( const XMLHandle& ref )							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
tinyxml2::XMLNode	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLNode$/;"	c	namespace:tinyxml2
tinyxml2::XMLNode::Accept	external/tinyxml2.hpp	/^    virtual bool Accept( XMLVisitor* visitor ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLNode::DeleteChild	external/tinyxml2.cpp	/^void XMLNode::DeleteChild( XMLNode* node )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* node )
tinyxml2::XMLNode::DeleteChild	external/tinyxml2.hpp	/^    void DeleteChild( XMLNode* node );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* node )
tinyxml2::XMLNode::DeleteChildren	external/tinyxml2.cpp	/^void XMLNode::DeleteChildren()$/;"	f	class:tinyxml2::XMLNode	signature:()
tinyxml2::XMLNode::DeleteChildren	external/tinyxml2.hpp	/^    void DeleteChildren();$/;"	p	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::FirstChild	external/tinyxml2.hpp	/^    XMLNode*		FirstChild()			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::FirstChild	external/tinyxml2.hpp	/^    const XMLNode*  FirstChild() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::FirstChildElement	external/tinyxml2.cpp	/^const XMLElement* XMLNode::FirstChildElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
tinyxml2::XMLNode::FirstChildElement	external/tinyxml2.hpp	/^    XMLElement* FirstChildElement( const char* value=0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
tinyxml2::XMLNode::FirstChildElement	external/tinyxml2.hpp	/^    const XMLElement* FirstChildElement( const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
tinyxml2::XMLNode::GetDocument	external/tinyxml2.hpp	/^    XMLDocument* GetDocument()				{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::GetDocument	external/tinyxml2.hpp	/^    const XMLDocument* GetDocument() const	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::InsertAfterChild	external/tinyxml2.cpp	/^XMLNode* XMLNode::InsertAfterChild( XMLNode* afterThis, XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* afterThis, XMLNode* addThis )
tinyxml2::XMLNode::InsertAfterChild	external/tinyxml2.hpp	/^    XMLNode* InsertAfterChild( XMLNode* afterThis, XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* afterThis, XMLNode* addThis )
tinyxml2::XMLNode::InsertEndChild	external/tinyxml2.cpp	/^XMLNode* XMLNode::InsertEndChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* addThis )
tinyxml2::XMLNode::InsertEndChild	external/tinyxml2.hpp	/^    XMLNode* InsertEndChild( XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
tinyxml2::XMLNode::InsertFirstChild	external/tinyxml2.cpp	/^XMLNode* XMLNode::InsertFirstChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* addThis )
tinyxml2::XMLNode::InsertFirstChild	external/tinyxml2.hpp	/^    XMLNode* InsertFirstChild( XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
tinyxml2::XMLNode::LastChild	external/tinyxml2.hpp	/^    XMLNode*		LastChild()								{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::LastChild	external/tinyxml2.hpp	/^    const XMLNode*	LastChild() const						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::LastChildElement	external/tinyxml2.cpp	/^const XMLElement* XMLNode::LastChildElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
tinyxml2::XMLNode::LastChildElement	external/tinyxml2.hpp	/^    XMLElement* LastChildElement( const char* value=0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
tinyxml2::XMLNode::LastChildElement	external/tinyxml2.hpp	/^    const XMLElement* LastChildElement( const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
tinyxml2::XMLNode::LinkEndChild	external/tinyxml2.hpp	/^    XMLNode* LinkEndChild( XMLNode* addThis )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
tinyxml2::XMLNode::NextSibling	external/tinyxml2.hpp	/^    XMLNode*	NextSibling()								{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::NextSibling	external/tinyxml2.hpp	/^    const XMLNode*	NextSibling() const						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::NextSiblingElement	external/tinyxml2.cpp	/^const XMLElement* XMLNode::NextSiblingElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
tinyxml2::XMLNode::NextSiblingElement	external/tinyxml2.hpp	/^    XMLElement*	NextSiblingElement( const char* value=0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
tinyxml2::XMLNode::NextSiblingElement	external/tinyxml2.hpp	/^    const XMLElement*	NextSiblingElement( const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
tinyxml2::XMLNode::NoChildren	external/tinyxml2.hpp	/^    bool NoChildren() const					{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::Parent	external/tinyxml2.hpp	/^    XMLNode* Parent()						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::Parent	external/tinyxml2.hpp	/^    const XMLNode*	Parent() const			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ParseDeep	external/tinyxml2.cpp	/^char* XMLNode::ParseDeep( char* p, StrPair* parentEnd )$/;"	f	class:tinyxml2::XMLNode	signature:( char* p, StrPair* parentEnd )
tinyxml2::XMLNode::ParseDeep	external/tinyxml2.hpp	/^    virtual char* ParseDeep( char*, StrPair* );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( char*, StrPair* )
tinyxml2::XMLNode::PreviousSibling	external/tinyxml2.hpp	/^    XMLNode*	PreviousSibling()							{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::PreviousSibling	external/tinyxml2.hpp	/^    const XMLNode*	PreviousSibling() const					{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::PreviousSiblingElement	external/tinyxml2.cpp	/^const XMLElement* XMLNode::PreviousSiblingElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
tinyxml2::XMLNode::PreviousSiblingElement	external/tinyxml2.hpp	/^    XMLElement*	PreviousSiblingElement( const char* value=0 ) {$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
tinyxml2::XMLNode::PreviousSiblingElement	external/tinyxml2.hpp	/^    const XMLElement*	PreviousSiblingElement( const char* value=0 ) const ;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
tinyxml2::XMLNode::SetValue	external/tinyxml2.cpp	/^void XMLNode::SetValue( const char* str, bool staticMem )$/;"	f	class:tinyxml2::XMLNode	signature:( const char* str, bool staticMem )
tinyxml2::XMLNode::SetValue	external/tinyxml2.hpp	/^    void SetValue( const char* val, bool staticMem=false );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* val, bool staticMem=false )
tinyxml2::XMLNode::ShallowClone	external/tinyxml2.hpp	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLNode::ShallowEqual	external/tinyxml2.hpp	/^    virtual bool ShallowEqual( const XMLNode* compare ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLNode::ToComment	external/tinyxml2.hpp	/^    virtual XMLComment*		ToComment()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToComment	external/tinyxml2.hpp	/^    virtual const XMLComment*		ToComment() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToDeclaration	external/tinyxml2.hpp	/^    virtual XMLDeclaration*	ToDeclaration()	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToDeclaration	external/tinyxml2.hpp	/^    virtual const XMLDeclaration*	ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToDocument	external/tinyxml2.hpp	/^    virtual XMLDocument*	ToDocument()	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToDocument	external/tinyxml2.hpp	/^    virtual const XMLDocument*		ToDocument() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToElement	external/tinyxml2.hpp	/^    virtual XMLElement*		ToElement()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToElement	external/tinyxml2.hpp	/^    virtual const XMLElement*		ToElement() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToText	external/tinyxml2.hpp	/^    virtual XMLText*		ToText()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToText	external/tinyxml2.hpp	/^    virtual const XMLText*			ToText() const			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToUnknown	external/tinyxml2.hpp	/^    virtual XMLUnknown*		ToUnknown()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToUnknown	external/tinyxml2.hpp	/^    virtual const XMLUnknown*		ToUnknown() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::Unlink	external/tinyxml2.cpp	/^void XMLNode::Unlink( XMLNode* child )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* child )
tinyxml2::XMLNode::Unlink	external/tinyxml2.hpp	/^    void Unlink( XMLNode* child );$/;"	p	class:tinyxml2::XMLNode	access:private	signature:( XMLNode* child )
tinyxml2::XMLNode::Value	external/tinyxml2.cpp	/^const char* XMLNode::Value() const $/;"	f	class:tinyxml2::XMLNode	signature:() const
tinyxml2::XMLNode::Value	external/tinyxml2.hpp	/^    const char* Value() const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::XMLNode	external/tinyxml2.cpp	/^XMLNode::XMLNode( XMLDocument* doc ) :$/;"	f	class:tinyxml2::XMLNode	signature:( XMLDocument* doc )
tinyxml2::XMLNode::XMLNode	external/tinyxml2.hpp	/^    XMLNode( XMLDocument* );$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( XMLDocument* )
tinyxml2::XMLNode::XMLNode	external/tinyxml2.hpp	/^    XMLNode( const XMLNode& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( const XMLNode& )
tinyxml2::XMLNode::_document	external/tinyxml2.hpp	/^    XMLDocument*	_document;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_firstChild	external/tinyxml2.hpp	/^    XMLNode*		_firstChild;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_lastChild	external/tinyxml2.hpp	/^    XMLNode*		_lastChild;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_memPool	external/tinyxml2.hpp	/^    MemPool*		_memPool;$/;"	m	class:tinyxml2::XMLNode	access:private
tinyxml2::XMLNode::_next	external/tinyxml2.hpp	/^    XMLNode*		_next;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_parent	external/tinyxml2.hpp	/^    XMLNode*		_parent;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_prev	external/tinyxml2.hpp	/^    XMLNode*		_prev;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_value	external/tinyxml2.hpp	/^    mutable StrPair	_value;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::operator =	external/tinyxml2.hpp	/^    XMLNode& operator=( const XMLNode& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( const XMLNode& )
tinyxml2::XMLNode::~XMLNode	external/tinyxml2.cpp	/^XMLNode::~XMLNode()$/;"	f	class:tinyxml2::XMLNode	signature:()
tinyxml2::XMLNode::~XMLNode	external/tinyxml2.hpp	/^    virtual ~XMLNode();$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:()
tinyxml2::XMLPrinter	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLPrinter : public XMLVisitor$/;"	c	namespace:tinyxml2	inherits:XMLVisitor
tinyxml2::XMLPrinter::BUF_SIZE	external/tinyxml2.hpp	/^        BUF_SIZE = 200$/;"	e	enum:tinyxml2::XMLPrinter::__anon7
tinyxml2::XMLPrinter::CStr	external/tinyxml2.hpp	/^    const char* CStr() const {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:() const
tinyxml2::XMLPrinter::CStrSize	external/tinyxml2.hpp	/^    int CStrSize() const {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:() const
tinyxml2::XMLPrinter::ClearBuffer	external/tinyxml2.hpp	/^    void ClearBuffer() {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:()
tinyxml2::XMLPrinter::CloseElement	external/tinyxml2.cpp	/^void XMLPrinter::CloseElement( bool compactMode )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool compactMode )
tinyxml2::XMLPrinter::CloseElement	external/tinyxml2.hpp	/^    virtual void CloseElement( bool compactMode );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool compactMode )
tinyxml2::XMLPrinter::CompactMode	external/tinyxml2.hpp	/^	virtual bool CompactMode( const XMLElement& )	{ return _compactMode; };$/;"	f	class:tinyxml2::XMLPrinter	access:protected	signature:( const XMLElement& )
tinyxml2::XMLPrinter::ENTITY_RANGE	external/tinyxml2.hpp	/^        ENTITY_RANGE = 64,$/;"	e	enum:tinyxml2::XMLPrinter::__anon7
tinyxml2::XMLPrinter::OpenElement	external/tinyxml2.cpp	/^void XMLPrinter::OpenElement( const char* name, bool compactMode )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, bool compactMode )
tinyxml2::XMLPrinter::OpenElement	external/tinyxml2.hpp	/^    void OpenElement( const char* name, bool compactMode );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, bool compactMode )
tinyxml2::XMLPrinter::Print	external/tinyxml2.cpp	/^void XMLPrinter::Print( const char* format, ... )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* format, ... )
tinyxml2::XMLPrinter::Print	external/tinyxml2.hpp	/^    void Print( const char* format, ... );$/;"	p	class:tinyxml2::XMLPrinter	access:protected	signature:( const char* format, ... )
tinyxml2::XMLPrinter::PrintSpace	external/tinyxml2.cpp	/^void XMLPrinter::PrintSpace( int depth )$/;"	f	class:tinyxml2::XMLPrinter	signature:( int depth )
tinyxml2::XMLPrinter::PrintSpace	external/tinyxml2.hpp	/^    virtual void PrintSpace( int depth );$/;"	p	class:tinyxml2::XMLPrinter	access:protected	signature:( int depth )
tinyxml2::XMLPrinter::PrintString	external/tinyxml2.cpp	/^void XMLPrinter::PrintString( const char* p, bool restricted )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* p, bool restricted )
tinyxml2::XMLPrinter::PrintString	external/tinyxml2.hpp	/^    void PrintString( const char*, bool restrictedEntitySet );	\/\/ prints out, after detecting entities.$/;"	p	class:tinyxml2::XMLPrinter	access:private	signature:( const char*, bool restrictedEntitySet )
tinyxml2::XMLPrinter::PushAttribute	external/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, bool v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, bool v )
tinyxml2::XMLPrinter::PushAttribute	external/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, const char* value )
tinyxml2::XMLPrinter::PushAttribute	external/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, double v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, double v )
tinyxml2::XMLPrinter::PushAttribute	external/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, int v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, int v )
tinyxml2::XMLPrinter::PushAttribute	external/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, unsigned v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, unsigned v )
tinyxml2::XMLPrinter::PushAttribute	external/tinyxml2.hpp	/^    void PushAttribute( const char* name, bool value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, bool value )
tinyxml2::XMLPrinter::PushAttribute	external/tinyxml2.hpp	/^    void PushAttribute( const char* name, const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, const char* value )
tinyxml2::XMLPrinter::PushAttribute	external/tinyxml2.hpp	/^    void PushAttribute( const char* name, double value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, double value )
tinyxml2::XMLPrinter::PushAttribute	external/tinyxml2.hpp	/^    void PushAttribute( const char* name, int value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, int value )
tinyxml2::XMLPrinter::PushAttribute	external/tinyxml2.hpp	/^    void PushAttribute( const char* name, unsigned value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, unsigned value )
tinyxml2::XMLPrinter::PushComment	external/tinyxml2.cpp	/^void XMLPrinter::PushComment( const char* comment )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* comment )
tinyxml2::XMLPrinter::PushComment	external/tinyxml2.hpp	/^    void PushComment( const char* comment );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* comment )
tinyxml2::XMLPrinter::PushDeclaration	external/tinyxml2.cpp	/^void XMLPrinter::PushDeclaration( const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* value )
tinyxml2::XMLPrinter::PushDeclaration	external/tinyxml2.hpp	/^    void PushDeclaration( const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
tinyxml2::XMLPrinter::PushHeader	external/tinyxml2.cpp	/^void XMLPrinter::PushHeader( bool writeBOM, bool writeDec )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool writeBOM, bool writeDec )
tinyxml2::XMLPrinter::PushHeader	external/tinyxml2.hpp	/^    void PushHeader( bool writeBOM, bool writeDeclaration );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool writeBOM, bool writeDeclaration )
tinyxml2::XMLPrinter::PushText	external/tinyxml2.cpp	/^void XMLPrinter::PushText( bool value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool value )
tinyxml2::XMLPrinter::PushText	external/tinyxml2.cpp	/^void XMLPrinter::PushText( const char* text, bool cdata )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* text, bool cdata )
tinyxml2::XMLPrinter::PushText	external/tinyxml2.cpp	/^void XMLPrinter::PushText( double value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( double value )
tinyxml2::XMLPrinter::PushText	external/tinyxml2.cpp	/^void XMLPrinter::PushText( float value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( float value )
tinyxml2::XMLPrinter::PushText	external/tinyxml2.cpp	/^void XMLPrinter::PushText( int value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( int value )
tinyxml2::XMLPrinter::PushText	external/tinyxml2.cpp	/^void XMLPrinter::PushText( unsigned value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( unsigned value )
tinyxml2::XMLPrinter::PushText	external/tinyxml2.hpp	/^    void PushText( bool value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool value )
tinyxml2::XMLPrinter::PushText	external/tinyxml2.hpp	/^    void PushText( const char* text, bool cdata=false );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* text, bool cdata=false )
tinyxml2::XMLPrinter::PushText	external/tinyxml2.hpp	/^    void PushText( double value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( double value )
tinyxml2::XMLPrinter::PushText	external/tinyxml2.hpp	/^    void PushText( float value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( float value )
tinyxml2::XMLPrinter::PushText	external/tinyxml2.hpp	/^    void PushText( int value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( int value )
tinyxml2::XMLPrinter::PushText	external/tinyxml2.hpp	/^    void PushText( unsigned value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( unsigned value )
tinyxml2::XMLPrinter::PushUnknown	external/tinyxml2.cpp	/^void XMLPrinter::PushUnknown( const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* value )
tinyxml2::XMLPrinter::PushUnknown	external/tinyxml2.hpp	/^    void PushUnknown( const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
tinyxml2::XMLPrinter::SealElement	external/tinyxml2.cpp	/^void XMLPrinter::SealElement()$/;"	f	class:tinyxml2::XMLPrinter	signature:()
tinyxml2::XMLPrinter::SealElement	external/tinyxml2.hpp	/^	void SealElement();$/;"	p	class:tinyxml2::XMLPrinter	access:protected	signature:()
tinyxml2::XMLPrinter::Visit	external/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLComment& comment )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLComment& comment )
tinyxml2::XMLPrinter::Visit	external/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLDeclaration& declaration )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLDeclaration& declaration )
tinyxml2::XMLPrinter::Visit	external/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLText& text )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLText& text )
tinyxml2::XMLPrinter::Visit	external/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLUnknown& unknown )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLUnknown& unknown )
tinyxml2::XMLPrinter::Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLComment& comment );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLComment& comment )
tinyxml2::XMLPrinter::Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLDeclaration& declaration );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDeclaration& declaration )
tinyxml2::XMLPrinter::Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLText& text );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLText& text )
tinyxml2::XMLPrinter::Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLUnknown& unknown );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLUnknown& unknown )
tinyxml2::XMLPrinter::VisitEnter	external/tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLDocument& doc )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLDocument& doc )
tinyxml2::XMLPrinter::VisitEnter	external/tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLElement& element, const XMLAttribute* attribute )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLElement& element, const XMLAttribute* attribute )
tinyxml2::XMLPrinter::VisitEnter	external/tinyxml2.hpp	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
tinyxml2::XMLPrinter::VisitEnter	external/tinyxml2.hpp	/^    virtual bool VisitEnter( const XMLElement& element, const XMLAttribute* attribute );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element, const XMLAttribute* attribute )
tinyxml2::XMLPrinter::VisitExit	external/tinyxml2.cpp	/^bool XMLPrinter::VisitExit( const XMLElement& element )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLElement& element )
tinyxml2::XMLPrinter::VisitExit	external/tinyxml2.hpp	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
tinyxml2::XMLPrinter::VisitExit	external/tinyxml2.hpp	/^    virtual bool VisitExit( const XMLElement& element );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element )
tinyxml2::XMLPrinter::XMLPrinter	external/tinyxml2.cpp	/^XMLPrinter::XMLPrinter( FILE* file, bool compact, int depth ) :$/;"	f	class:tinyxml2::XMLPrinter	signature:( FILE* file, bool compact, int depth )
tinyxml2::XMLPrinter::XMLPrinter	external/tinyxml2.hpp	/^    XMLPrinter( FILE* file=0, bool compact = false, int depth = 0 );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( FILE* file=0, bool compact = false, int depth = 0 )
tinyxml2::XMLPrinter::_accumulator	external/tinyxml2.hpp	/^    DynArray< char, 20 > _accumulator;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_buffer	external/tinyxml2.hpp	/^    DynArray< char, 20 > _buffer;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_compactMode	external/tinyxml2.hpp	/^	bool _compactMode;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_depth	external/tinyxml2.hpp	/^    int _depth;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_elementJustOpened	external/tinyxml2.hpp	/^    bool _elementJustOpened;$/;"	m	class:tinyxml2::XMLPrinter	access:protected
tinyxml2::XMLPrinter::_entityFlag	external/tinyxml2.hpp	/^    bool _entityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_firstElement	external/tinyxml2.hpp	/^    bool _firstElement;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_fp	external/tinyxml2.hpp	/^    FILE* _fp;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_processEntities	external/tinyxml2.hpp	/^    bool _processEntities;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_restrictedEntityFlag	external/tinyxml2.hpp	/^    bool _restrictedEntityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_stack	external/tinyxml2.hpp	/^    DynArray< const char*, 10 > _stack;$/;"	m	class:tinyxml2::XMLPrinter	access:protected
tinyxml2::XMLPrinter::_textDepth	external/tinyxml2.hpp	/^    int _textDepth;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::~XMLPrinter	external/tinyxml2.hpp	/^    virtual ~XMLPrinter()	{}$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:()
tinyxml2::XMLText	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLText : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLText::Accept	external/tinyxml2.cpp	/^bool XMLText::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLText	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLText::Accept	external/tinyxml2.hpp	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLText::CData	external/tinyxml2.hpp	/^    bool CData() const						{$/;"	f	class:tinyxml2::XMLText	access:public	signature:() const
tinyxml2::XMLText::ParseDeep	external/tinyxml2.cpp	/^char* XMLText::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLText	signature:( char* p, StrPair* )
tinyxml2::XMLText::ParseDeep	external/tinyxml2.hpp	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLText	access:public	signature:( char*, StrPair* endTag )
tinyxml2::XMLText::SetCData	external/tinyxml2.hpp	/^    void SetCData( bool isCData )			{$/;"	f	class:tinyxml2::XMLText	access:public	signature:( bool isCData )
tinyxml2::XMLText::ShallowClone	external/tinyxml2.cpp	/^XMLNode* XMLText::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLText	signature:( XMLDocument* doc ) const
tinyxml2::XMLText::ShallowClone	external/tinyxml2.hpp	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLText::ShallowEqual	external/tinyxml2.cpp	/^bool XMLText::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLText	signature:( const XMLNode* compare ) const
tinyxml2::XMLText::ShallowEqual	external/tinyxml2.hpp	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLText::ToText	external/tinyxml2.hpp	/^    virtual XMLText* ToText()			{$/;"	f	class:tinyxml2::XMLText	access:public	signature:()
tinyxml2::XMLText::ToText	external/tinyxml2.hpp	/^    virtual const XMLText* ToText() const	{$/;"	f	class:tinyxml2::XMLText	access:public	signature:() const
tinyxml2::XMLText::XMLText	external/tinyxml2.hpp	/^    XMLText( XMLDocument* doc )	: XMLNode( doc ), _isCData( false )	{}$/;"	f	class:tinyxml2::XMLText	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLText::XMLText	external/tinyxml2.hpp	/^    XMLText( const XMLText& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLText	access:protected	signature:( const XMLText& )
tinyxml2::XMLText::_isCData	external/tinyxml2.hpp	/^    bool _isCData;$/;"	m	class:tinyxml2::XMLText	access:private
tinyxml2::XMLText::operator =	external/tinyxml2.hpp	/^    XMLText& operator=( const XMLText& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLText	access:protected	signature:( const XMLText& )
tinyxml2::XMLText::~XMLText	external/tinyxml2.hpp	/^    virtual ~XMLText()												{}$/;"	f	class:tinyxml2::XMLText	access:protected	signature:()
tinyxml2::XMLUnknown	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLUnknown : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLUnknown::Accept	external/tinyxml2.cpp	/^bool XMLUnknown::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLUnknown::Accept	external/tinyxml2.hpp	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLUnknown::ParseDeep	external/tinyxml2.cpp	/^char* XMLUnknown::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLUnknown	signature:( char* p, StrPair* )
tinyxml2::XMLUnknown::ParseDeep	external/tinyxml2.hpp	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( char*, StrPair* endTag )
tinyxml2::XMLUnknown::ShallowClone	external/tinyxml2.cpp	/^XMLNode* XMLUnknown::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLDocument* doc ) const
tinyxml2::XMLUnknown::ShallowClone	external/tinyxml2.hpp	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLUnknown::ShallowEqual	external/tinyxml2.cpp	/^bool XMLUnknown::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( const XMLNode* compare ) const
tinyxml2::XMLUnknown::ShallowEqual	external/tinyxml2.hpp	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLUnknown::ToUnknown	external/tinyxml2.hpp	/^    virtual XMLUnknown*	ToUnknown()					{$/;"	f	class:tinyxml2::XMLUnknown	access:public	signature:()
tinyxml2::XMLUnknown::ToUnknown	external/tinyxml2.hpp	/^    virtual const XMLUnknown* ToUnknown() const		{$/;"	f	class:tinyxml2::XMLUnknown	access:public	signature:() const
tinyxml2::XMLUnknown::XMLUnknown	external/tinyxml2.cpp	/^XMLUnknown::XMLUnknown( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLDocument* doc )
tinyxml2::XMLUnknown::XMLUnknown	external/tinyxml2.hpp	/^    XMLUnknown( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLUnknown::XMLUnknown	external/tinyxml2.hpp	/^    XMLUnknown( const XMLUnknown& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( const XMLUnknown& )
tinyxml2::XMLUnknown::operator =	external/tinyxml2.hpp	/^    XMLUnknown& operator=( const XMLUnknown& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( const XMLUnknown& )
tinyxml2::XMLUnknown::~XMLUnknown	external/tinyxml2.cpp	/^XMLUnknown::~XMLUnknown()$/;"	f	class:tinyxml2::XMLUnknown	signature:()
tinyxml2::XMLUnknown::~XMLUnknown	external/tinyxml2.hpp	/^    virtual ~XMLUnknown();$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:()
tinyxml2::XMLUtil	external/tinyxml2.hpp	/^class XMLUtil$/;"	c	namespace:tinyxml2
tinyxml2::XMLUtil::ConvertUTF32ToUTF8	external/tinyxml2.cpp	/^void XMLUtil::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:tinyxml2::XMLUtil	signature:( unsigned long input, char* output, int* length )
tinyxml2::XMLUtil::ConvertUTF32ToUTF8	external/tinyxml2.hpp	/^    static void ConvertUTF32ToUTF8( unsigned long input, char* output, int* length );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned long input, char* output, int* length )
tinyxml2::XMLUtil::GetCharacterRef	external/tinyxml2.cpp	/^const char* XMLUtil::GetCharacterRef( const char* p, char* value, int* length )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* p, char* value, int* length )
tinyxml2::XMLUtil::GetCharacterRef	external/tinyxml2.hpp	/^    static const char* GetCharacterRef( const char* p, char* value, int* length );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, char* value, int* length )
tinyxml2::XMLUtil::IsNameChar	external/tinyxml2.hpp	/^    inline static bool IsNameChar( unsigned char ch ) {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char ch )
tinyxml2::XMLUtil::IsNameStartChar	external/tinyxml2.hpp	/^    inline static bool IsNameStartChar( unsigned char ch ) {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char ch )
tinyxml2::XMLUtil::IsUTF8Continuation	external/tinyxml2.hpp	/^    inline static int IsUTF8Continuation( const char p ) {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char p )
tinyxml2::XMLUtil::IsWhiteSpace	external/tinyxml2.hpp	/^    static bool IsWhiteSpace( char p )					{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( char p )
tinyxml2::XMLUtil::ReadBOM	external/tinyxml2.cpp	/^const char* XMLUtil::ReadBOM( const char* p, bool* bom )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* p, bool* bom )
tinyxml2::XMLUtil::ReadBOM	external/tinyxml2.hpp	/^    static const char* ReadBOM( const char* p, bool* hasBOM );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, bool* hasBOM )
tinyxml2::XMLUtil::SkipWhiteSpace	external/tinyxml2.hpp	/^    static char* SkipWhiteSpace( char* p )				{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( char* p )
tinyxml2::XMLUtil::SkipWhiteSpace	external/tinyxml2.hpp	/^    static const char* SkipWhiteSpace( const char* p )	{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p )
tinyxml2::XMLUtil::StringEqual	external/tinyxml2.hpp	/^    inline static bool StringEqual( const char* p, const char* q, int nChar=INT_MAX )  {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, const char* q, int nChar=INT_MAX )
tinyxml2::XMLUtil::ToBool	external/tinyxml2.cpp	/^bool XMLUtil::ToBool( const char* str, bool* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, bool* value )
tinyxml2::XMLUtil::ToBool	external/tinyxml2.hpp	/^    static bool	ToBool( const char* str, bool* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, bool* value )
tinyxml2::XMLUtil::ToDouble	external/tinyxml2.cpp	/^bool XMLUtil::ToDouble( const char* str, double* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, double* value )
tinyxml2::XMLUtil::ToDouble	external/tinyxml2.hpp	/^    static bool ToDouble( const char* str, double* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, double* value )
tinyxml2::XMLUtil::ToFloat	external/tinyxml2.cpp	/^bool XMLUtil::ToFloat( const char* str, float* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, float* value )
tinyxml2::XMLUtil::ToFloat	external/tinyxml2.hpp	/^    static bool	ToFloat( const char* str, float* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, float* value )
tinyxml2::XMLUtil::ToInt	external/tinyxml2.cpp	/^bool XMLUtil::ToInt( const char* str, int* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, int* value )
tinyxml2::XMLUtil::ToInt	external/tinyxml2.hpp	/^    static bool	ToInt( const char* str, int* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, int* value )
tinyxml2::XMLUtil::ToStr	external/tinyxml2.cpp	/^void XMLUtil::ToStr( bool v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( bool v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	external/tinyxml2.cpp	/^void XMLUtil::ToStr( double v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( double v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	external/tinyxml2.cpp	/^void XMLUtil::ToStr( float v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( float v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	external/tinyxml2.cpp	/^void XMLUtil::ToStr( int v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( int v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	external/tinyxml2.cpp	/^void XMLUtil::ToStr( unsigned v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( unsigned v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	external/tinyxml2.hpp	/^    static void ToStr( bool v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( bool v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	external/tinyxml2.hpp	/^    static void ToStr( double v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( double v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	external/tinyxml2.hpp	/^    static void ToStr( float v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( float v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	external/tinyxml2.hpp	/^    static void ToStr( int v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( int v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	external/tinyxml2.hpp	/^    static void ToStr( unsigned v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToUnsigned	external/tinyxml2.cpp	/^bool XMLUtil::ToUnsigned( const char* str, unsigned *value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, unsigned *value )
tinyxml2::XMLUtil::ToUnsigned	external/tinyxml2.hpp	/^    static bool ToUnsigned( const char* str, unsigned* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, unsigned* value )
tinyxml2::XMLVisitor	external/tinyxml2.hpp	/^class TINYXML2_LIB XMLVisitor$/;"	c	namespace:tinyxml2
tinyxml2::XMLVisitor::Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLComment& \/*comment*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLComment& )
tinyxml2::XMLVisitor::Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLDeclaration& \/*declaration*\/ )		{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDeclaration& )
tinyxml2::XMLVisitor::Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLText& \/*text*\/ )					{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLText& )
tinyxml2::XMLVisitor::Visit	external/tinyxml2.hpp	/^    virtual bool Visit( const XMLUnknown& \/*unknown*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLUnknown& )
tinyxml2::XMLVisitor::VisitEnter	external/tinyxml2.hpp	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
tinyxml2::XMLVisitor::VisitEnter	external/tinyxml2.hpp	/^    virtual bool VisitEnter( const XMLElement& \/*element*\/, const XMLAttribute* \/*firstAttribute*\/ )	{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& , const XMLAttribute* )
tinyxml2::XMLVisitor::VisitExit	external/tinyxml2.hpp	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
tinyxml2::XMLVisitor::VisitExit	external/tinyxml2.hpp	/^    virtual bool VisitExit( const XMLElement& \/*element*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& )
tinyxml2::XMLVisitor::~XMLVisitor	external/tinyxml2.hpp	/^    virtual ~XMLVisitor() {}$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:()
tinyxml2::XML_CAN_NOT_CONVERT_TEXT	external/tinyxml2.hpp	/^    XML_CAN_NOT_CONVERT_TEXT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_ELEMENT_MISMATCH	external/tinyxml2.hpp	/^    XML_ERROR_ELEMENT_MISMATCH,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_EMPTY_DOCUMENT	external/tinyxml2.hpp	/^    XML_ERROR_EMPTY_DOCUMENT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_FILE_COULD_NOT_BE_OPENED	external/tinyxml2.hpp	/^    XML_ERROR_FILE_COULD_NOT_BE_OPENED,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_FILE_NOT_FOUND	external/tinyxml2.hpp	/^    XML_ERROR_FILE_NOT_FOUND,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_FILE_READ_ERROR	external/tinyxml2.hpp	/^    XML_ERROR_FILE_READ_ERROR,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_IDENTIFYING_TAG	external/tinyxml2.hpp	/^    XML_ERROR_IDENTIFYING_TAG,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_MISMATCHED_ELEMENT	external/tinyxml2.hpp	/^    XML_ERROR_MISMATCHED_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING	external/tinyxml2.hpp	/^    XML_ERROR_PARSING,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_ATTRIBUTE	external/tinyxml2.hpp	/^    XML_ERROR_PARSING_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_CDATA	external/tinyxml2.hpp	/^    XML_ERROR_PARSING_CDATA,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_COMMENT	external/tinyxml2.hpp	/^    XML_ERROR_PARSING_COMMENT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_DECLARATION	external/tinyxml2.hpp	/^    XML_ERROR_PARSING_DECLARATION,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_ELEMENT	external/tinyxml2.hpp	/^    XML_ERROR_PARSING_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_TEXT	external/tinyxml2.hpp	/^    XML_ERROR_PARSING_TEXT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_UNKNOWN	external/tinyxml2.hpp	/^    XML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_NO_ATTRIBUTE	external/tinyxml2.hpp	/^    XML_NO_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_NO_ERROR	external/tinyxml2.hpp	/^    XML_NO_ERROR = 0,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_NO_TEXT_NODE	external/tinyxml2.hpp	/^    XML_NO_TEXT_NODE$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_SUCCESS	external/tinyxml2.hpp	/^    XML_SUCCESS = 0,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_WRONG_ATTRIBUTE_TYPE	external/tinyxml2.hpp	/^    XML_WRONG_ATTRIBUTE_TYPE,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::entities	external/tinyxml2.cpp	/^static const Entity entities[NUM_ENTITIES] = {$/;"	m	namespace:tinyxml2	file:
top	include/core/ApplicationStateStack.hpp	/^		ApplicationState &top() { return *m_stack.top().get(); } $/;"	f	class:ApplicationStateStack	access:public	signature:()
u16	include/system/Types.hpp	/^typedef unsigned short u16;$/;"	t
u32	include/system/Types.hpp	/^typedef unsigned long u32;$/;"	t
u8	include/system/Types.hpp	/^typedef unsigned char u8;$/;"	t
update	include/display/AnimatedMap.hpp	/^		void update();$/;"	p	class:AnimatedMap	access:public	signature:()
update	include/input/GamePad.hpp	/^		void update();$/;"	p	class:GamePad	access:public	signature:()
update	include/input/InputHandler.hpp	/^		virtual void update() = 0;$/;"	p	class:InputHandler	access:public	signature:()
update	include/input/KeyboardHandler.hpp	/^		void update();$/;"	p	class:KeyboardHandler	access:public	signature:()
update	include/states/ApplicationState.hpp	/^		virtual void update() = 0;$/;"	p	class:ApplicationState	access:public	signature:()
update	include/states/MapState.hpp	/^		void update();$/;"	p	class:MapState	access:public	signature:()
update	include/states/TransitionState.hpp	/^		void update();$/;"	p	class:TransitionState	access:public	signature:()
update	source/display/AnimatedMap.cpp	/^void AnimatedMap::update() {$/;"	f	class:AnimatedMap	signature:()
update	source/input/GamePad.cpp	/^void GamePad::update() {$/;"	f	class:GamePad	signature:()
update	source/input/KeyboardHandler.cpp	/^void KeyboardHandler::update() {$/;"	f	class:KeyboardHandler	signature:()
update	source/states/MapState.cpp	/^void MapState::update() {$/;"	f	class:MapState	signature:()
update	source/states/TransitionState.cpp	/^void TransitionState::update() {$/;"	f	class:TransitionState	signature:()
updateGame	include/system/GameClock.hpp	/^		void updateGame(std::function<void(void)> updateFunc);$/;"	p	class:GameClock	access:public	signature:(std::function<void(void)> updateFunc)
updateGame	source/system/GameClock.cpp	/^void GameClock::updateGame(std::function<void(void)> updateFunc) {$/;"	f	class:GameClock	signature:(std::function<void(void)> updateFunc)
updateTile	include/display/TileMap.hpp	/^		virtual void updateTile(u16 tileX, u16 tileY);$/;"	p	class:TileMap	access:public	signature:(u16 tileX, u16 tileY)
updateTile	source/display/AnimatedMap.cpp	/^void AnimatedMap::updateTile(u16 tileX, u16 tileY) {$/;"	f	class:AnimatedMap	signature:(u16 tileX, u16 tileY)
updateTile	source/display/TileMap.cpp	/^void TileMap::updateTile(u16 tileX, u16 tileY) {$/;"	f	class:TileMap	signature:(u16 tileX, u16 tileY)
updateTiles	include/display/TileMap.hpp	/^		void updateTiles();$/;"	p	class:TileMap	access:public	signature:()
updateTiles	source/display/TileMap.cpp	/^void TileMap::updateTiles() {$/;"	f	class:TileMap	signature:()
value	external/tinyxml2.cpp	/^    char value;$/;"	m	struct:tinyxml2::Entity	file:	access:public
view	include/display/TileMap.hpp	/^		static sf::View view;$/;"	m	class:TileMap	access:public
what	include/system/Exception.hpp	/^		virtual const char *what() const throw() {$/;"	f	class:Exception	access:public	signature:() const
width	include/display/Image.hpp	/^		u16 width() const { return m_texture->getSize().x; }$/;"	f	class:Image	access:public	signature:() const
window	include/core/Application.hpp	/^		sf::RenderWindow &window() { return m_window; }$/;"	f	class:Application	access:public	signature:()
~AnimatedMap	include/display/AnimatedMap.hpp	/^		~AnimatedMap();$/;"	p	class:AnimatedMap	access:public	signature:()
~AnimatedMap	source/display/AnimatedMap.cpp	/^AnimatedMap::~AnimatedMap() {$/;"	f	class:AnimatedMap	signature:()
~Application	include/core/Application.hpp	/^		~Application();$/;"	p	class:Application	access:public	signature:()
~Application	source/core/Application.cpp	/^Application::~Application() {$/;"	f	class:Application	signature:()
~ApplicationState	include/states/ApplicationState.hpp	/^		virtual ~ApplicationState();$/;"	p	class:ApplicationState	access:public	signature:()
~ApplicationState	source/states/ApplicationState.cpp	/^ApplicationState::~ApplicationState() {$/;"	f	class:ApplicationState	signature:()
~ApplicationStateStack	include/core/ApplicationStateStack.hpp	/^		~ApplicationStateStack();$/;"	p	class:ApplicationStateStack	access:public	signature:()
~ApplicationStateStack	source/core/ApplicationStateStack.cpp	/^ApplicationStateStack::~ApplicationStateStack() {$/;"	f	class:ApplicationStateStack	signature:()
~DynArray	external/tinyxml2.hpp	/^    ~DynArray() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
~Exception	include/system/Exception.hpp	/^		~Exception() throw() {$/;"	f	class:Exception	access:public	signature:()
~GameClock	include/system/GameClock.hpp	/^		~GameClock();$/;"	p	class:GameClock	access:public	signature:()
~GameClock	source/system/GameClock.cpp	/^GameClock::~GameClock() {$/;"	f	class:GameClock	signature:()
~GamePad	include/input/GamePad.hpp	/^		~GamePad();$/;"	p	class:GamePad	access:public	signature:()
~GamePad	source/input/GamePad.cpp	/^GamePad::~GamePad() {$/;"	f	class:GamePad	signature:()
~GameState	include/core/GameState.hpp	/^		~GameState();$/;"	p	class:GameState	access:public	signature:()
~GameState	source/core/GameState.cpp	/^GameState::~GameState() {$/;"	f	class:GameState	signature:()
~Image	include/display/Image.hpp	/^		~Image();$/;"	p	class:Image	access:public	signature:()
~Image	source/display/Image.cpp	/^Image::~Image() {$/;"	f	class:Image	signature:()
~InputHandler	include/input/InputHandler.hpp	/^		~InputHandler();$/;"	p	class:InputHandler	access:public	signature:()
~InputHandler	source/input/InputHandler.cpp	/^InputHandler::~InputHandler() {$/;"	f	class:InputHandler	signature:()
~KeyboardHandler	include/input/KeyboardHandler.hpp	/^		~KeyboardHandler();$/;"	p	class:KeyboardHandler	access:public	signature:()
~KeyboardHandler	source/input/KeyboardHandler.cpp	/^KeyboardHandler::~KeyboardHandler() {$/;"	f	class:KeyboardHandler	signature:()
~KeyboardMovement	include/movements/KeyboardMovement.hpp	/^		~KeyboardMovement();$/;"	p	class:KeyboardMovement	access:public	signature:()
~KeyboardMovement	source/movements/KeyboardMovement.cpp	/^KeyboardMovement::~KeyboardMovement() {$/;"	f	class:KeyboardMovement	signature:()
~MapState	include/states/MapState.hpp	/^		~MapState();$/;"	p	class:MapState	access:public	signature:()
~MapState	source/states/MapState.cpp	/^MapState::~MapState() {$/;"	f	class:MapState	signature:()
~MemPool	external/tinyxml2.hpp	/^    virtual ~MemPool() {}$/;"	f	class:tinyxml2::MemPool	access:public	signature:()
~MemPoolT	external/tinyxml2.hpp	/^    ~MemPoolT() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
~Movable	include/mapObjects/Movable.hpp	/^		~Movable();$/;"	p	class:Movable	access:public	signature:()
~Movable	source/mapObjects/Movable.cpp	/^Movable::~Movable() {$/;"	f	class:Movable	signature:()
~Movement	include/movements/Movement.hpp	/^		virtual ~Movement() {}$/;"	f	class:Movement	access:public	signature:()
~Player	include/mapObjects/Player.hpp	/^		~Player();$/;"	p	class:Player	access:public	signature:()
~Player	source/mapObjects/Player.cpp	/^Player::~Player() {$/;"	f	class:Player	signature:()
~ResourceHandler	include/core/ResourceHandler.hpp	/^		~ResourceHandler();$/;"	p	class:ResourceHandler	access:public	signature:()
~ResourceHandler	source/core/ResourceHandler.cpp	/^ResourceHandler::~ResourceHandler() {$/;"	f	class:ResourceHandler	signature:()
~Sprite	include/display/Sprite.hpp	/^		~Sprite();$/;"	p	class:Sprite	access:public	signature:()
~Sprite	source/display/Sprite.cpp	/^Sprite::~Sprite() {$/;"	f	class:Sprite	signature:()
~StatsBar	include/interface/StatsBar.hpp	/^		~StatsBar();$/;"	p	class:StatsBar	access:public	signature:()
~StatsBar	source/interface/StatsBar.cpp	/^StatsBar::~StatsBar() {$/;"	f	class:StatsBar	signature:()
~StrPair	external/tinyxml2.cpp	/^StrPair::~StrPair()$/;"	f	class:tinyxml2::StrPair	signature:()
~StrPair	external/tinyxml2.hpp	/^    ~StrPair();$/;"	p	class:tinyxml2::StrPair	access:public	signature:()
~TileMap	include/display/TileMap.hpp	/^		~TileMap();$/;"	p	class:TileMap	access:public	signature:()
~TileMap	source/display/TileMap.cpp	/^TileMap::~TileMap() {$/;"	f	class:TileMap	signature:()
~Timer	include/system/Timer.hpp	/^		~Timer();$/;"	p	class:Timer	access:public	signature:()
~Timer	source/system/Timer.cpp	/^Timer::~Timer() {$/;"	f	class:Timer	signature:()
~TransitionState	include/states/TransitionState.hpp	/^		~TransitionState();$/;"	p	class:TransitionState	access:public	signature:()
~TransitionState	source/states/TransitionState.cpp	/^TransitionState::~TransitionState() {$/;"	f	class:TransitionState	signature:()
~XMLAttribute	external/tinyxml2.hpp	/^    virtual ~XMLAttribute()	{}$/;"	f	class:tinyxml2::XMLAttribute	access:private	signature:()
~XMLComment	external/tinyxml2.cpp	/^XMLComment::~XMLComment()$/;"	f	class:tinyxml2::XMLComment	signature:()
~XMLComment	external/tinyxml2.hpp	/^    virtual ~XMLComment();$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:()
~XMLDeclaration	external/tinyxml2.cpp	/^XMLDeclaration::~XMLDeclaration()$/;"	f	class:tinyxml2::XMLDeclaration	signature:()
~XMLDeclaration	external/tinyxml2.hpp	/^    virtual ~XMLDeclaration();$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:()
~XMLDocument	external/tinyxml2.cpp	/^XMLDocument::~XMLDocument()$/;"	f	class:tinyxml2::XMLDocument	signature:()
~XMLDocument	external/tinyxml2.hpp	/^    ~XMLDocument();$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:()
~XMLElement	external/tinyxml2.cpp	/^XMLElement::~XMLElement()$/;"	f	class:tinyxml2::XMLElement	signature:()
~XMLElement	external/tinyxml2.hpp	/^    virtual ~XMLElement();$/;"	p	class:tinyxml2::XMLElement	access:private	signature:()
~XMLFile	include/core/XMLFile.hpp	/^		~XMLFile();$/;"	p	class:XMLFile	access:public	signature:()
~XMLFile	source/core/XMLFile.cpp	/^XMLFile::~XMLFile() {$/;"	f	class:XMLFile	signature:()
~XMLNode	external/tinyxml2.cpp	/^XMLNode::~XMLNode()$/;"	f	class:tinyxml2::XMLNode	signature:()
~XMLNode	external/tinyxml2.hpp	/^    virtual ~XMLNode();$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:()
~XMLPrinter	external/tinyxml2.hpp	/^    virtual ~XMLPrinter()	{}$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:()
~XMLText	external/tinyxml2.hpp	/^    virtual ~XMLText()												{}$/;"	f	class:tinyxml2::XMLText	access:protected	signature:()
~XMLUnknown	external/tinyxml2.cpp	/^XMLUnknown::~XMLUnknown()$/;"	f	class:tinyxml2::XMLUnknown	signature:()
~XMLUnknown	external/tinyxml2.hpp	/^    virtual ~XMLUnknown();$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:()
~XMLVisitor	external/tinyxml2.hpp	/^    virtual ~XMLVisitor() {}$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:()
